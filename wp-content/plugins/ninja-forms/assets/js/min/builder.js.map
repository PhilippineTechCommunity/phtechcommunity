{"version":3,"sources":["../../../config-wrap-start-default.js","../lib/almond.js","views/app/menuItem.js","views/app/menu.js","views/app/menuButtons.js","views/app/mobileMenuButton.js","views/app/header.js","views/app/subHeader.js","views/app/builderHeader.js","views/app/main.js","views/app/mobileMenuItem.js","views/app/mobileMenu.js","views/app/drawer/contentEmpty.js","views/app/drawer.js","views/app/drawer/mergeTagItem.js","views/app/drawer/mergeTagsSection.js","models/app/mergeTagModel.js","models/app/mergeTagCollection.js","views/app/drawer/mergeTagsContent.js","views/app/builder.js","controllers/app/remote.js","controllers/app/drawer.js","views/app/drawer/headerDefault.js","views/app/drawer/footerDefault.js","models/app/drawerModel.js","models/app/drawerCollection.js","views/fields/drawer/stagedField.js","views/fields/drawer/stagingEmpty.js","views/fields/drawer/stagingCollection.js","models/fields/stagingModel.js","models/fields/stagingCollection.js","views/fields/drawer/typeSection.js","views/fields/drawer/typeSectionCollection.js","views/fields/drawer/addField.js","views/app/drawer/itemSettingCollection.js","views/app/drawer/itemSettingGroup.js","views/app/drawer/itemSettingGroupCollection.js","views/app/drawer/editSettings.js","views/app/drawer/headerEditSettings.js","views/actions/drawer/typeButton.js","views/actions/drawer/typeCollection.js","views/actions/drawer/addAction.js","views/app/drawer/contentViewChangesItem.js","views/app/drawer/contentViewChanges.js","views/app/drawer/headerViewChanges.js","views/app/drawer/settingError.js","views/app/drawer/itemSetting.js","views/app/drawer/contentNewForm.js","views/app/drawer/headerNewForm.js","controllers/app/drawerConfig.js","views/app/drawer/defaultSettingsTitle.js","views/app/empty.js","models/app/domainModel.js","models/app/domainCollection.js","views/fields/subHeader.js","views/fields/mainContentFieldCollection.js","views/fields/drawer/addSavedField.js","views/fields/drawer/settingsTitle.js","views/actions/mainHeader.js","views/actions/subHeader.js","views/app/itemControls.js","views/actions/actionItem.js","views/actions/mainContentEmpty.js","views/actions/mainContent.js","views/advanced/mainHeader.js","views/advanced/subHeader.js","views/advanced/settingItem.js","views/advanced/mainContent.js","models/fields/fieldModel.js","models/fields/fieldCollection.js","controllers/app/domainConfig.js","models/app/appModel.js","controllers/app/data.js","controllers/app/drawerToggleSettingGroup.js","controllers/app/updateDB.js","models/app/formModel.js","controllers/app/formData.js","controllers/app/previewLink.js","controllers/app/menuButtons.js","models/app/changeModel.js","models/app/changeCollection.js","controllers/app/trackChanges.js","controllers/app/undoChanges.js","controllers/app/publishResponse.js","controllers/app/changeDomain.js","controllers/app/pushstate.js","controllers/app/hotkeys.js","controllers/app/cleanState.js","controllers/app/coreUndo.js","controllers/app/cloneModelDeep.js","controllers/app/getSettingChildView.js","controllers/app/changeSettingDefault.js","views/app/drawer/typeSettingFieldset.js","models/app/settingModel.js","models/app/settingCollection.js","controllers/app/fieldset.js","controllers/app/toggleSetting.js","controllers/app/itemControls.js","controllers/app/mergeTags.js","models/app/mergeTagLookupCollection.js","views/app/drawer/mergeTag.js","views/app/drawer/mergeTagList.js","views/app/drawer/mergeTagGroup.js","views/app/drawer/mergeTagGroupList.js","views/app/drawer/mergeTagFilter.js","views/app/drawer/mergeTagBox.js","controllers/app/mergeTagBox.js","controllers/app/itemSettingFill.js","controllers/app/confirmPublish.js","controllers/app/rte.js","controllers/app/settingFieldSelect.js","controllers/app/settingFieldList.js","controllers/app/settingHTML.js","controllers/app/settingColor.js","controllers/app/changeMenu.js","controllers/app/mobile.js","controllers/app/notices.js","controllers/app/unloadCheck.js","controllers/app/formContentFilters.js","controllers/app/formContentGutterFilters.js","controllers/app/cloneCollectionDeep.js","controllers/app/trackKeyDown.js","controllers/app/perfectScroll.js","models/app/settingGroupModel.js","models/app/settingGroupCollection.js","controllers/app/getNewSettingGroupCollection.js","controllers/app/settingMedia.js","models/app/typeModel.js","models/app/typeCollection.js","models/fields/typeSectionModel.js","models/fields/typeSectionCollection.js","controllers/fields/types.js","controllers/fields/fieldTypeDrag.js","controllers/fields/stagingDrag.js","controllers/fields/staging.js","controllers/fields/stagingSortable.js","controllers/fields/filterTypes.js","controllers/fields/sortable.js","controllers/fields/data.js","models/app/optionRepeaterModel.js","models/app/optionRepeaterCollection.js","views/app/drawer/optionRepeaterError.js","views/app/drawer/optionRepeaterOption.js","views/app/drawer/optionRepeaterEmpty.js","views/app/drawer/optionRepeaterComposite.js","controllers/app/optionRepeater.js","controllers/fields/editActive.js","controllers/fields/fieldSettings.js","controllers/fields/fieldCreditCard.js","controllers/fields/fieldList.js","controllers/fields/fieldPassword.js","controllers/fields/fieldQuantity.js","controllers/fields/fieldShipping.js","controllers/fields/key.js","controllers/fields/notices.js","controllers/fields/mobile.js","controllers/fields/savedFields.js","controllers/fields/fieldDatepicker.js","controllers/fields/fieldDisplayCalc.js","controllers/actions/types.js","models/actions/actionModel.js","models/actions/actionCollection.js","controllers/actions/data.js","controllers/actions/actionSettings.js","controllers/actions/editActive.js","controllers/actions/emailFromSetting.js","controllers/actions/addActionTypes.js","controllers/actions/typeDrag.js","controllers/actions/droppable.js","models/actions/typeModel.js","models/actions/typeCollection.js","controllers/actions/filterTypes.js","controllers/actions/newsletterList.js","controllers/actions/deleteFieldListener.js","controllers/actions/collectPaymentFields.js","controllers/actions/collectPaymentCalculations.js","controllers/actions/collectPaymentFixed.js","controllers/actions/collectPayment.js","controllers/advanced/types.js","models/advanced/settingsModel.js","controllers/advanced/data.js","controllers/advanced/formSettings.js","controllers/advanced/editActive.js","controllers/advanced/clickEdit.js","controllers/advanced/calculations.js","controllers/loadControllers.js","views/fields/fieldItem.js","views/fields/mainContentEmpty.js","views/app/formTitle.js","views/loadViews.js","main.js"],"names":["requirejs","require","define","undef","hasProp","obj","prop","hasOwn","call","normalize","name","baseName","nameParts","nameSegment","mapValue","foundMap","lastIndex","foundI","foundStarMap","starI","i","j","part","baseParts","split","map","config","starMap","charAt","length","nodeIdCompat","jsSuffixRegExp","test","replace","slice","concat","splice","join","indexOf","substring","makeRequire","relName","forceSync","args","aps","arguments","push","req","apply","makeNormalize","makeLoad","depName","value","defined","callDep","waiting","defining","main","Error","splitPrefix","prefix","index","makeConfig","makeMap","handlers","Object","prototype","hasOwnProperty","plugin","parts","f","n","pr","p","exports","e","module","id","uri","deps","callback","cjsModule","ret","usingExports","callbackType","load","undefined","alt","setTimeout","cfg","_defined","amd","jQuery","view","Marionette","ItemView","extend","tagName","template","initialize","this","listenTo","nfRadio","channel","render","model","on","onRender","$el","children","unwrap","setElement","events","click a","clickAppMenu","trigger","templateHelpers","renderDashicons","dashicons","icon","document","createElement","classList","add","outerHTML","renderClasses","classes","currentDomain","request","get","renderUrl","url","formModel","renderTarget","renderDisabled","disabled","appMenuItemView","CollectionView","childView","onShow","el","find","bounceIcon","that","renderPublish","publishWidth","maybeDisabled","maybeRenderCancel","viewChanges","click .publish","click .viewChanges","clickPublish","clickViewChanges","changeModel","effect","times","click .nf-mobile-menu","clickMobileMenu","builderEl","toggleClass","appMenuCollectionView","appMenuButtonsView","mobileMenuButtonView","LayoutView","regions","menu","buttons","mobileMenuButton","appDomainCollection","show","collection","click #nf-logo","clickLogo","appHeaderView","appSubHeaderView","app","formTitle","appSub","changeSubHeader","formData","formSettings","formTitleView","subHeaderView","className","maybeDone","offsetRight","offsetLeft","gutterLeft","body","gutterRight","reply","getMainEl","window","context","resizeBothGutters","setBothGuttersAbsolute","setBothGuttersFixed","updateGutters","bodyView","gutterLeftView","gutterRightView","parent","onAttach","initialGutterResize","onBeforeDestroy","off","resize","resizeGutter","data","leftEl","rightEl","clearTimeout","top","offset","viewHeight","height","topLeft","leftLeft","left","css","position","topRight","leftRight","scrollTop","right","mobileDashicon","mobileMenuItemView","CompositeView","attachHtml","collectionView","append","click .nf-publish","drawerEmptyView","header","content","footer","getEl","loadContent","emptyContent","perfectScrollbar","drawerID","drawer","contentView","headerView","footerView","empty","click .nf-toggle-drawer","clickToggleDrawer","clickTag","active","mergeTagItemView","fieldCollection","updateFields","set","Backbone","Model","defaults","exclude","mergeTagModel","Collection","mergeTagsSectionView","MergeTagCollection","getMergeTagsView","reRender","settingModel","mergeTagCollection","defaultGroups","where","default_group","calcMergeTagGroup","useMergeTags","_","each","remove","include","models","sectionModel","mainView","mobileMenuView","drawerView","mergeTagsContentView","menuDrawer","mergeTagsContent","getBuilderEl","getBuilderView","mergeTags","mergeTagsClone","clone","click .nf-open-drawer","click .nf-change-domain","click .nf-close-drawer","openDrawer","closeDrawer","changeDomain","addListener","dataModel","listen","updateSetting","clickExtra","getRemote","settingView","srcElement","addClass","remote","parentValue","action","security","nfAdmin","ajaxNonce","post","ajaxurl","response","JSON","parse","options","controller","clickOpenDrawer","toggleDrawerSize","getClosedDrawerPos","preventClose","enableClose","maybePreventClose","objPreventClose","filterFocused","currentDrawer","removeClass","rightClosed","drawerEl","checkCloseDrawerPos","setInterval","clearInterval","target","currentDomainID","hasFocus","checkOpenDrawerPos","focusFilter","filterEl","focus","closedPos","width","keys","key","getPreventClose","clearFilter","blurFilter","keyup .nf-filter","input .nf-filter","focus input","changeFilter","maybeChangeFilter","keyCode","addObject","trim","val","blur","getFocus","drawerDisabled","defaultHeaderView","defaultFooterView","getHeaderView","getFooterView","drawerModel","click .dashicons-dismiss","removeStagedField","stagedFieldView","stagedFieldsEmptyView","emptyView","activeClass","getStagedFieldsEl","sortable","placeholder","helper","tolerance","over","ui","out","receive","update","start","stop","draggable","opacity","connectToSortable","appendTo","refreshPositions","grid","element","zIndex","onAddChild","onRemoveChild","hasStagedFields","stagingModel","comparator","bindAll","getTypeSection","dragging","drag","disableSelection","click .nf-item","keydown .nf-item","mousedown .nf-item","clickFieldType","mousedownFieldType","maybeClickFieldType","renderFieldTypes","html","fieldTypes","type","nicename","renderType","templateHTML","savedField","htmlFragments","createRange","createContextualFragment","appendChild","innerHTML","fieldTypeSectionView","drawerStagingView","StagingCollection","fieldTypeSectionCollectionView","staging","primary","secondary","filterFieldTypes","removeFieldTypeFilter","savedCollection","primaryCollection","fieldTypeSectionCollection","secondaryCollection","stagingCollection","filteredSectionCollection","reset","childViewOptions","getChildView","itemSettingCollectionView","settings","click .toggle","clickToggleGroup","renderLabel","label","groupLabel","renderArrowDir","display","itemSettingGroupView","itemSettingGroupCollectionView","settingTitle","settingGroups","groupCollection","titleView","maybeRenderTitle","title","renderTypeNicename","domainID","scroll","clickAddAction","open","image","section","renderStyle","actionTypeButtonView","renderNicename","slug","actionTypeCollectionView","filteractionTypes","removeactionTypeFilter","installedActions","availableActions","filteredInstalled","filteredAvailable","click .undoSingle","undoSingle","viewChangesItem","click .undoChanges","clickUndoChanges","settingErrorView","error","renderOnChange","renderError","renderWarning","refresh","labelText","updateIcon","updateLink","labelWrapper","createTextNode","drawerOpened","drawerClosed","setting","unescape","silent","onBeforeRender","escape","next","jBox","maxWidth","theme","closeOnClick","mask","input","autoNumeric","aSep","thousandsSeparator","aDec","decimalPoint","currency","currencySymbol","currencySymbols","aSign","text","format","console","log","renderVisible","renderSetting","renderLabelClasses","use_merge_tags","renderTooltip","help","helpText","helpTextContainer","helpIcon","helpIconLink","helpTextWrapper","setAttribute","renderMergeTags","hide_merge_tags","change .setting","keyup .setting","click .setting","click .extra","changeSetting","keyUpSetting","clickSetting","itemSettingView","formName","formSubmit","titleSettingModel","addSubmitSettingModel","submitButtons","findWhere","drawerCollection","addFieldView","editSettingsView","editSettingsHeaderView","addActionView","viewChangesView","viewChangesHeaderView","newFormView","newFormHeaderView","mobileItemControlsView","getContentView","typeModel","getDrawerCollection","getDrawer","DefaultSettingsTitleView","EmptyView","hotkeys","getSettingsTitleView","getDefaultSettingsTitleView","getGutterLeftView","getGutterRightView","domainModel","reorderOnSort","getEmptyView","getSortableEl","initSortable","destroySortable","cancel","scrollSensitivity","item","dropping","hide","renderAddButton","button","click .nf-button","clickAddSavedField","addSavedFieldView","renderjBoxContent","addSaved","addSavedjBox","destroy","unset","x","y","outside","onCreated","setContent","attach","displayName","saved","realType","renderSavedStar","star","actionCollection","mouseover .nf-item-control","click .nf-edit-settings","singletap .nf-item-control","click .nf-item-delete","click .nf-item-duplicate","clickEdit","singleTapEdit","clickDelete","clickDuplicateField","mouseoverItemControl","itemControlsView","itemControls","maybeDeactivate","change input","click","maybeClickEdit","changeToggle","renderToggle","settingName","actionLabel","actionView","droppable","accept","hoverClass","drop","updateActiveClass","editActive","settingItem","objectType","objectDomain","order","fieldType","parentType","updateFieldKey","changedAttributes","keyModel","fieldModel","parseInt","tmpNum","addField","removeField","addNewField","appendNewField","removeFieldResponse","newIDs","removedIDs","at","fieldExists","fieldsSubHeaderView","FieldsMainContentFieldCollectionView","fieldsSettingsTitleView","actionsMainHeaderView","actionsSubHeaderView","actionsMainContentView","settingsMainHeaderView","settingsSubHeaderView","settingsMainContentView","FieldCollection","defaultFormContentView","defaultFormContentLoad","defaultFormContentGutterView","nfi18n","domainFormFields","Esc","Ctrl+Shift+n","Ctrl+Shift+a","Ctrl+Shift+s","Alt+Ctrl+t","up","down","Shift+return","getSubHeaderView","getMainContentView","formContentData","formContentLoadFilters","sortedArray","without","first","formContentViewFilters","formContentView","gutterFilters","gutterView","domainActions","Ctrl+Shift+f","domainAdvanced","previewurl","getDomainCollection","getDomainModel","fieldModels","loading","changeStatus","appModel","clean","mobile","isMobile","getData","getSetting","getCurrentDomain","getCurrentDrawer","updateCurrentDomain","updateCurrentDrawer","currentDrawerID","toggleSettingGroup","errors","updateDB","defaultSaveFilter","jsAction","formContentSaveDataFilters","stringify","fields","field","parent_id","deleted_fields","actions","deleted_actions","autoClose","form","exception","fail","xhr","status","alert","pluck","isNumeric","preloadedFormData","getFormModel","disablePreview","enablePreview","changePreviewNicename","appDomains","preview","publish","changeCollection","cid","ChangeModel","registerChange","getCollection","maybeResetCollection","changes","dashicon","undoChanges","sort","change","undoAll","publishResponse","new_ids","newID","oldID","forms","history","replaceState","changeAppDomain","preventChange","enableChange","objPreventChange","maybePreventChange","mainEl","changePushState","pushState","location","href","reExp","toString","newUrl","changeHotkeys","addNewAction","changeDomainFields","changeDomainActions","changeDomainSettings","hotkey","msg","fieldsDomain","actionsDomain","settingsDomain","ignoreAttributes","setAppClean","attr","changedAttr","after","undoChangeSetting","undoAddObject","undoRemoveObject","undoDuplicateObject","undoSortFields","undoAddListOption","undoRemoveListOption","undoSortListOptions","before","maybeRemoveChange","objectModel","results","objectCollection","objModels","optionModel","cloneModelDeep","attributes","clonedCollection","newModel","getSettingChildView","settingChildView","object","maybePreventUI","updateKey","fieldsetView","settingCollection","createSettingsCollection","settingTypeModel","clickDuplicate","tmpID","tagSectionCollection","tagSection","tags","fieldTags","tag","getFieldKeyFormat","calcTags","calcCollection","calcModel","currentElement","clickMergeTag","addFieldTags","deleteFieldTags","updateCalcTags","updateCurrentElement","updateCurrentSetting","getSectionModel","updateID","replaceFieldKey","initMergeTags","mergeTagsView","jBoxes","closeOnEsc","maxHeight","onOpen","prev","onClose","tagModel","currentValue","currentPos","caret","newPos","substr","summernote","calcTag","getFieldKeyFormatCalc","fieldID","calc","openMergeTags","returnMergeTags","preventDefault","currentModel","upMergeTags","changeActiveTag","downMergeTags","dir","inc","currentIndex","nextModel","userInfo","system","updateOpen","targetTag","oldTag","fieldMergeTag","newKey","oldKey","_previousAttributes","oldVal","oldCalcKey","newCalcKey","re","RegExp","newVal","insertTag","mergeTagView","sectionFilter","searchFilter","filter","child","term","toLowerCase","removeActive","onClick","updateTags","setActive","siblings","mergeTagGroupView","keyup input","updateFilter","event","firstFilteredTag","sections","MergeTagModel","MergeTagLookupCollection","MergeTagView","MergeTagListView","MergeTagGroupView","MergeTagGroupListView","MergeTagFilterView","MergeTagBoxLayout","old","mergeTagsButtonClick","afterAppStart","beforeRenderSetting","beforeDrawerClose","bind","selector","focusCallback","keyupCallback","closest","Radio","layout","tagCollection","mergeTagListView","mergeTagGroupListView","getRegion","rteEditor","posY","outerHeight","tagBoxY","windowHeight","innerHeight","tagBoxHeight","boxHeight","repeaterRow","scrollLeft","posX","$input","hasClass","str","caretPos","patt","match","exec","string","childNode","childNodes","node","nodeValue","range","sel","getSelection","setStart","err","collapse","removeAllRanges","addRange","$this","$inputSetting","autocomplete","$overlayElement","dataID","so","mergetags","mergetag","elementClasses","confirmPublish","initSettingModel","destroySetting","meta_image_frame","icons","align","alignCenter","alignJustify","alignLeft","alignRight","indent","outdent","bold","close","code","eraser","italic","link","unlink","magic","minus","orderedlist","redo","square","table","underline","undo","unorderedlist","currentContext","initRTE","linkButton","mediaButton","toolbar","codemirror","lineNumbers","callbacks","onBlur","editor","getValue","updateDataModel","prettifyHtml","onFocus","onKeydown","onKeyup","linkMenu","replaceWith","class","removeRTE","linkDropdown","buttonGroup","contents","tooltip","clickLinkButton","toggle","dropdown","mergeTagsButton","openMediaManager","invoke","wp","media","frames","media_attachment","state","toJSON","insertMedia","textEl","urlEl","isNewWindowEl","isNewWindow","filename","trackKeyChanges","beforeRender","maybeSwitchToFieldsDomain","autoOpenDrawer","filterDrawerContents","SwitchToFieldsDomain","updateFieldMap","contains","fieldFilter","bail","fieldTypeModel","rubble","filterDrawer","switchDomain","fieldDomainModel","fieldListSettings","registerFieldListSettings","updateFieldListSettingKeys","changed","actionModel","lastChanged","oldValue","init","changedSettingValue","setRenderFalse","closeColorPickers","initColorPicker","wpColorPicker","color","editFormText","changeMenu","formPublish","isNewForm","highlightAddNew","appendEditForm","form_id","isNaN","editFormLinkText","editFormLink","editFormListItem","closeMobileMenu","addNotice","closeNotice","notices","appDefaults","constructOnInit","stack","animation","mobileDefaults","desktopDefaults","openNotice","maybePrompt","viewFilters","saveFilters","loadFilters","addViewFilter","addSaveFilter","addLoadFilter","getViewFilters","getSaveFilters","getLoadFilters","priority","leftFilters","rightFilters","addLeftFilter","addRightFilter","getLeftFilters","getRightFilters","cloneCollectionDeep","constructor","keyDown","keyUp","getKeyDown","movedPos","initPerfectScroll","moveRail","resetRail","suppressScrollX","outerWidth","SettingCollection","settingGroupModel","SettingGroupCollection","getNewSettingGroupCollection","option","typeSectionModel","TypeCollection","SectionCollection","fieldTypeSections","registerSection","fieldTypeData","getFieldType","getTypeCollection","getTypeSections","getSavedFields","shiftKey","startDrag","stopDrag","getCurrentDraggableHelperClone","style","setProperty","draggableHelperClone","stagedFields","num","addStagedField","getStagingCollection","sortStagedFields","clearStagedFields","beforeCloseDrawer","now","tmpField","sortableEl","search","pos","receiveStagedFields","overStagedFields","outStagedFields","startStagedFields","stopStagedFields","addActiveClass","stagedFieldsEl","removeActiveClass","currentHelper","helperClone","filtered","filterCollection","hiddenFields","found","alias","receiveFieldsSortable","overfieldsSortable","outFieldsSortable","stopFieldsSortable","startFieldsSortable","updateFieldsSortable","insertedAt","fieldWidth","dragFieldID","dragModel","oldPos","adding","removing","getFieldCollection","getField","redrawFieldCollection","getTmpFieldID","deleteField","sortFields","getAdding","setAdding","getRemoving","setRemoving","renderTrigger","savedType","updateFieldSetting","max_options","changeErrors","size","errorsFound","opt","listOptionModel","addOption","renderErrors","ErrorView","columns","parentView","hasErrors","click .nf-delete","keyup","changeOption","deleteOption","keyupOption","maybeAddOption","findByIndex","getColumns","renderFieldSelect","initialOption","select","emptyContainer","selected","renderOptions","column","optionNode","listOptionView","listEmptyView","listOptionCollection","optionCollection","maybeHideNew","handle","forcePlaceholderSize","importLink","closeButton","clickImport","renderHeaders","beforeColumns","afterColumns","col","headerText","headerContainer","renderFieldsetClasses","currency_symbol","click .nf-add-new","limit","clickAddOption","textarea","trimLeft","trimRight","lines","isArray","line","row","slugify","separator","listCompositeView","updateOptionSortable","stopOptionSortable","startOptionSortable","convertSettings","optionView","triggerDataModel","modelData","new","default","newOrder","clearEditActive","fieldSettings","getSettingModel","getSettingCollection","dropCreditCardField","newField","stageCreditCardField","ListOptionCollection","updateOptionLabel","updateOptionValue","convertOptions","confirm","insertField","productFields","getProductFields","addMask","newFieldKey","updateLabel","d","Date","valueOf","setError","keyExists","testKey","startWiggle","stopWiggle","initWiggle","ClassyWiggle","degrees","delay","updateField","modified","modelClone","fieldData","created_at","formID","newType","newTypeDefaults","settingDefaults","typeCollection","typeSections","addDatepicker","pikadayResponsive","actionTypeData","installed","available","getType","getInstalledActions","getAvailableActions","actionType","addAction","removeAction","getAction","getTmpID","deleteAction","actionSettings","updateFromAddress","isValidEmail","home_url_host","errorInvalidEmailFromAddress","email","dropActionType","type_slug","actionTypeModel","filterActionTypes","newInstalled","newAvailable","defaultFields","clickListUpdate","maybeRenderFields","maybeRenderGroups","registerFieldsListener","registerGroupsListener","updateFieldMapping","updateInterestGroups","updateLists","lists","always","selectedList","list","groups","group","registerListener","maybeUpdateSettings","newObject","isString","isObject","mapObject","filteredCollection","every","getFields","field_key","returnFields","sortBy","calcModels","calcs","getCalcs","returnCalcs","isEmpty","initCollectPayment","maybeClearTotal","maybeUpdateTotal","maybeError","oldName","formSettingTypeData","settingsModel","getSettings","updateCalc","sortCalc","checkName","checkEQ","checkDec","checkAllCalcs","nameExists","eq","errorSelfRef","errorFutureCalc","calculations","targetCalc","selfRef","futureCalc","dec","errorNonIntDec","checked","Math","abs","nonIntDec","Remote","Drawer","DrawerConfig","DomainConfig","AppData","DrawerToggleSettingGroup","UpdateDB","FormData","PreviewLink","AppMenuButtons","AppTrackChanges","AppUndoChanges","AppPublishResponse","AppChangeDomain","Pushstate","Hotkeys","CleanState","CoreUndo","CloneModelDeep","DrawerSettingChildView","ChangeSettingDefault","Fieldset","ToggleSetting","ItemControls","MergeTags","MergeTagsBox","ItemSettingFill","ConfirmPublish","RTE","SettingFieldSelect","SettingFieldList","SettingHTML","SettingColor","ChangeMenu","AppMobile","AppNotices","AppUnloadCheck","FormContentFilters","FormContentGutterFilters","CloneCollectionDeep","TrackKeyDown","PerfectScroll","GetNewSettingGroupCollection","SettingMedia","FieldTypes","FieldTypeDrag","FieldStagingDrag","StagedFieldsData","StagedFieldsSortable","DrawerFilterFieldTypes","MainContentFieldsSortable","FieldData","OptionRepeater","FieldsEditActive","FieldSettings","FieldCreditCard","FieldList","FieldPassword","FieldQuantity","FieldShipping","FieldKey","Notices","FieldsMobile","SavedFields","FieldDatepicker","FieldDisplayCalc","ActionTypes","ActionData","ActionSettings","ActionEditActive","ActionEmailFromSetting","ActionAddTypes","ActionTypeDrag","ActionDroppable","ActionFilterTypes","ActionNewsletterList","ActionDeleteFieldListener","ActionCollectPaymentFields","ActionCollectPaymentCalculations","ActionCollectPaymentFixed","ActionCollectPayment","SettingTypes","SettingData","FormSettings","SettingsEditActive","SettingsClickEdit","AdvancedCalculations","doingShortcut","touch","renderRequired","required","getFieldID","renderIcon","mousedown","singletap","swipeleft","swiperight","tapend","maybeShortcut","maybeTapEdit","swipeLeft","startEvnt","swipeRight","renderTitle","fieldItemView","mainContentEmptyView","FormTitleView","getFieldItem","getMainContentEmpty","getFormTitle","ready","$","BuilderView","LoadControllers","LoadViews","NinjaForms","Application","Renderer","onStart","evaluate","interpolate","variable","ninjaForms"],"mappings":"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ACA,2BACA,8BACA,8BACA,+BACA,8BACA,kCACA,+BACA,4BACA,0BACA,6BACA,2BACA,iCACA,sCACA,uCACA,2BACA,gCACA,+BACA,4BACA,8BACA,kCACA,iCACA,sBACA,qCACA,mCACA,8BACA,+BACA,6BACA,yBACA,0BACA,8BACA,qCACA,2CACA,sCACA,+BACA,gCACA,+CACA,+BAIA,2BACA,mCACA,iCACA,6BACA,qCACA,iCACA,8BACA,0BACA,iCACA,gCACA,mCACA,qCACA,+BACA,mCACA,mCACA,mCACA,yBACA,6BACA,4BACA,iCACA,qCACA,sCAKA,4BACA,2BACA,qCACA,iCACA,uCACA,qCACA,+BACA,gCACA,kCACA,qCACA,0CACA,2CACA,iDACA,0CACA,qCAKA,6BACA,4BACA,oCACA,kCACA,iCACA,qCAEA,SAIAy1C,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAIAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAIAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAKAC,GACAC,GACAC,GACAC,GACAC,GACAC;AAGA,GAAAtnC,IAAA7N,WAAA7B,OAAA+B,QACAG,WAAA,WAIA,GAAA6xC,GACA,GAAAC,GACA,GAAAvB,GACA,GAAAf,GACA,GAAAC,GACA,GAAAC,GACA,GAAAC,GACA,GAAAE,GACA,GAAAG,GACA,GAAAC,GACA,GAAAC,GACA,GAAAC,GACA,GAAAC,G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","file":"builder.js","sourcesContent":["(function () {\n","/**\n * @license almond 0.3.1 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/jrburke/almond for details\n */\n//Going sloppy to avoid 'use strict' string cost, but strict practices should\n//be followed.\n/*jslint sloppy: true */\n/*global setTimeout: false */\n\nvar requirejs, require, define;\n(function (undef) {\n    var main, req, makeMap, handlers,\n        defined = {},\n        waiting = {},\n        config = {},\n        defining = {},\n        hasOwn = Object.prototype.hasOwnProperty,\n        aps = [].slice,\n        jsSuffixRegExp = /\\.js$/;\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    /**\n     * Given a relative module name, like ./something, normalize it to\n     * a real name that can be mapped to a path.\n     * @param {String} name the relative name\n     * @param {String} baseName a real name that the name arg is relative\n     * to.\n     * @returns {String} normalized name\n     */\n    function normalize(name, baseName) {\n        var nameParts, nameSegment, mapValue, foundMap, lastIndex,\n            foundI, foundStarMap, starI, i, j, part,\n            baseParts = baseName && baseName.split(\"/\"),\n            map = config.map,\n            starMap = (map && map['*']) || {};\n\n        //Adjust any relative paths.\n        if (name && name.charAt(0) === \".\") {\n            //If have a base name, try to normalize against it,\n            //otherwise, assume it is a top-level require that will\n            //be relative to baseUrl in the end.\n            if (baseName) {\n                name = name.split('/');\n                lastIndex = name.length - 1;\n\n                // Node .js allowance:\n                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n                }\n\n                //Lop off the last part of baseParts, so that . matches the\n                //\"directory\" and not name of the baseName's module. For instance,\n                //baseName of \"one/two/three\", maps to \"one/two/three.js\", but we\n                //want the directory, \"one/two\" for this normalization.\n                name = baseParts.slice(0, baseParts.length - 1).concat(name);\n\n                //start trimDots\n                for (i = 0; i < name.length; i += 1) {\n                    part = name[i];\n                    if (part === \".\") {\n                        name.splice(i, 1);\n                        i -= 1;\n                    } else if (part === \"..\") {\n                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {\n                            //End of the line. Keep at least one non-dot\n                            //path segment at the front so it can be mapped\n                            //correctly to disk. Otherwise, there is likely\n                            //no path mapping for a path starting with '..'.\n                            //This can still fail, but catches the most reasonable\n                            //uses of ..\n                            break;\n                        } else if (i > 0) {\n                            name.splice(i - 1, 2);\n                            i -= 2;\n                        }\n                    }\n                }\n                //end trimDots\n\n                name = name.join(\"/\");\n            } else if (name.indexOf('./') === 0) {\n                // No baseName, so this is ID is resolved relative\n                // to baseUrl, pull off the leading dot.\n                name = name.substring(2);\n            }\n        }\n\n        //Apply map config if available.\n        if ((baseParts || starMap) && map) {\n            nameParts = name.split('/');\n\n            for (i = nameParts.length; i > 0; i -= 1) {\n                nameSegment = nameParts.slice(0, i).join(\"/\");\n\n                if (baseParts) {\n                    //Find the longest baseName segment match in the config.\n                    //So, do joins on the biggest to smallest lengths of baseParts.\n                    for (j = baseParts.length; j > 0; j -= 1) {\n                        mapValue = map[baseParts.slice(0, j).join('/')];\n\n                        //baseName segment has  config, find if it has one for\n                        //this name.\n                        if (mapValue) {\n                            mapValue = mapValue[nameSegment];\n                            if (mapValue) {\n                                //Match, update name to the new value.\n                                foundMap = mapValue;\n                                foundI = i;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (foundMap) {\n                    break;\n                }\n\n                //Check for a star map match, but just hold on to it,\n                //if there is a shorter segment match later in a matching\n                //config, then favor over this star map.\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\n                    foundStarMap = starMap[nameSegment];\n                    starI = i;\n                }\n            }\n\n            if (!foundMap && foundStarMap) {\n                foundMap = foundStarMap;\n                foundI = starI;\n            }\n\n            if (foundMap) {\n                nameParts.splice(0, foundI, foundMap);\n                name = nameParts.join('/');\n            }\n        }\n\n        return name;\n    }\n\n    function makeRequire(relName, forceSync) {\n        return function () {\n            //A version of a require function that passes a moduleName\n            //value for items that may need to\n            //look up paths relative to the moduleName\n            var args = aps.call(arguments, 0);\n\n            //If first arg is not require('string'), and there is only\n            //one arg, it is the array form without a callback. Insert\n            //a null so that the following concat is correct.\n            if (typeof args[0] !== 'string' && args.length === 1) {\n                args.push(null);\n            }\n            return req.apply(undef, args.concat([relName, forceSync]));\n        };\n    }\n\n    function makeNormalize(relName) {\n        return function (name) {\n            return normalize(name, relName);\n        };\n    }\n\n    function makeLoad(depName) {\n        return function (value) {\n            defined[depName] = value;\n        };\n    }\n\n    function callDep(name) {\n        if (hasProp(waiting, name)) {\n            var args = waiting[name];\n            delete waiting[name];\n            defining[name] = true;\n            main.apply(undef, args);\n        }\n\n        if (!hasProp(defined, name) && !hasProp(defining, name)) {\n            throw new Error('No ' + name);\n        }\n        return defined[name];\n    }\n\n    //Turns a plugin!resource to [plugin, resource]\n    //with the plugin being undefined if the name\n    //did not have a plugin prefix.\n    function splitPrefix(name) {\n        var prefix,\n            index = name ? name.indexOf('!') : -1;\n        if (index > -1) {\n            prefix = name.substring(0, index);\n            name = name.substring(index + 1, name.length);\n        }\n        return [prefix, name];\n    }\n\n    /**\n     * Makes a name map, normalizing the name, and using a plugin\n     * for normalization if necessary. Grabs a ref to plugin\n     * too, as an optimization.\n     */\n    makeMap = function (name, relName) {\n        var plugin,\n            parts = splitPrefix(name),\n            prefix = parts[0];\n\n        name = parts[1];\n\n        if (prefix) {\n            prefix = normalize(prefix, relName);\n            plugin = callDep(prefix);\n        }\n\n        //Normalize according\n        if (prefix) {\n            if (plugin && plugin.normalize) {\n                name = plugin.normalize(name, makeNormalize(relName));\n            } else {\n                name = normalize(name, relName);\n            }\n        } else {\n            name = normalize(name, relName);\n            parts = splitPrefix(name);\n            prefix = parts[0];\n            name = parts[1];\n            if (prefix) {\n                plugin = callDep(prefix);\n            }\n        }\n\n        //Using ridiculous property names for space reasons\n        return {\n            f: prefix ? prefix + '!' + name : name, //fullName\n            n: name,\n            pr: prefix,\n            p: plugin\n        };\n    };\n\n    function makeConfig(name) {\n        return function () {\n            return (config && config.config && config.config[name]) || {};\n        };\n    }\n\n    handlers = {\n        require: function (name) {\n            return makeRequire(name);\n        },\n        exports: function (name) {\n            var e = defined[name];\n            if (typeof e !== 'undefined') {\n                return e;\n            } else {\n                return (defined[name] = {});\n            }\n        },\n        module: function (name) {\n            return {\n                id: name,\n                uri: '',\n                exports: defined[name],\n                config: makeConfig(name)\n            };\n        }\n    };\n\n    main = function (name, deps, callback, relName) {\n        var cjsModule, depName, ret, map, i,\n            args = [],\n            callbackType = typeof callback,\n            usingExports;\n\n        //Use name if no relName\n        relName = relName || name;\n\n        //Call the callback to define the module, if necessary.\n        if (callbackType === 'undefined' || callbackType === 'function') {\n            //Pull out the defined dependencies and pass the ordered\n            //values to the callback.\n            //Default to [require, exports, module] if no deps\n            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;\n            for (i = 0; i < deps.length; i += 1) {\n                map = makeMap(deps[i], relName);\n                depName = map.f;\n\n                //Fast path CommonJS standard dependencies.\n                if (depName === \"require\") {\n                    args[i] = handlers.require(name);\n                } else if (depName === \"exports\") {\n                    //CommonJS module spec 1.1\n                    args[i] = handlers.exports(name);\n                    usingExports = true;\n                } else if (depName === \"module\") {\n                    //CommonJS module spec 1.1\n                    cjsModule = args[i] = handlers.module(name);\n                } else if (hasProp(defined, depName) ||\n                           hasProp(waiting, depName) ||\n                           hasProp(defining, depName)) {\n                    args[i] = callDep(depName);\n                } else if (map.p) {\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\n                    args[i] = defined[depName];\n                } else {\n                    throw new Error(name + ' missing ' + depName);\n                }\n            }\n\n            ret = callback ? callback.apply(defined[name], args) : undefined;\n\n            if (name) {\n                //If setting exports via \"module\" is in play,\n                //favor that over return value and exports. After that,\n                //favor a non-undefined return value over exports use.\n                if (cjsModule && cjsModule.exports !== undef &&\n                        cjsModule.exports !== defined[name]) {\n                    defined[name] = cjsModule.exports;\n                } else if (ret !== undef || !usingExports) {\n                    //Use the return value from the function.\n                    defined[name] = ret;\n                }\n            }\n        } else if (name) {\n            //May just be an object definition for the module. Only\n            //worry about defining if have a module name.\n            defined[name] = callback;\n        }\n    };\n\n    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\n        if (typeof deps === \"string\") {\n            if (handlers[deps]) {\n                //callback in this case is really relName\n                return handlers[deps](callback);\n            }\n            //Just return the module wanted. In this scenario, the\n            //deps arg is the module name, and second arg (if passed)\n            //is just the relName.\n            //Normalize module name, if it contains . or ..\n            return callDep(makeMap(deps, callback).f);\n        } else if (!deps.splice) {\n            //deps is a config object, not an array.\n            config = deps;\n            if (config.deps) {\n                req(config.deps, config.callback);\n            }\n            if (!callback) {\n                return;\n            }\n\n            if (callback.splice) {\n                //callback is an array, which means it is a dependency list.\n                //Adjust args if there are dependencies\n                deps = callback;\n                callback = relName;\n                relName = null;\n            } else {\n                deps = undef;\n            }\n        }\n\n        //Support require(['a'])\n        callback = callback || function () {};\n\n        //If relName is a function, it is an errback handler,\n        //so remove it.\n        if (typeof relName === 'function') {\n            relName = forceSync;\n            forceSync = alt;\n        }\n\n        //Simulate async callback;\n        if (forceSync) {\n            main(undef, deps, callback, relName);\n        } else {\n            //Using a non-zero value because of concern for what old browsers\n            //do, and latest browsers \"upgrade\" to 4 if lower value is used:\n            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\n            //If want a value immediately, use require('id') instead -- something\n            //that works in almond on the global level, but not guaranteed and\n            //unlikely to work in other AMD implementations.\n            setTimeout(function () {\n                main(undef, deps, callback, relName);\n            }, 4);\n        }\n\n        return req;\n    };\n\n    /**\n     * Just drops the config on the floor, but returns req in case\n     * the config return value is used.\n     */\n    req.config = function (cfg) {\n        return req(cfg);\n    };\n\n    /**\n     * Expose module registry for debugging and tooling\n     */\n    requirejs._defined = defined;\n\n    define = function (name, deps, callback) {\n        if (typeof name !== 'string') {\n            throw new Error('See almond README: incorrect module build, no module name');\n        }\n\n        //This module may not have dependencies\n        if (!deps.splice) {\n            //deps is not an array, so probably means\n            //an object literal or factory function for\n            //the value. Adjust args.\n            callback = deps;\n            deps = [];\n        }\n\n        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\n            waiting[name] = [name, deps, callback];\n        }\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n}());\n\ndefine(\"../lib/almond\", function(){});\n\n","/**\n * Renders an application menu item from a domain model.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/menuItem',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-app-menu-item',\n\n\t\tinitialize: function() {\n\t\t\t// Listen for domain changes and re-render when we detect one.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.render );\n\t\t\t// When we change the model (to disable it, for example), re-render.\n\t\t\tthis.model.on( 'change', this.render, this );\n\t\t},\n\n\t\t/**\n\t\t * When we render this view, remove the extra <div> tag created by backbone.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t},\n\n\t\t// Listen for clicks on our app menu.\n\t\tevents: {\n\t\t\t'click a': 'clickAppMenu'\n\t\t},\n\n\t\t/**\n\t\t * When we click on a menu item, fire a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t * We pass this.model so that we know what item was clicked.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\te event\n\t\t * @return return\n\t\t */\n\t\tclickAppMenu: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:menu', e, this.model );\n\t\t},\n\n\t\t/**\n\t\t * These functions are available to templates, and help us to remove logic from template files.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return Object\n\t\t */\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\t/**\n\t\t\t\t * If we have any dashicons in our model, render them.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderDashicons: function() {\n\t\t\t\t\tif ( ! this.dashicons ) return '';\n\n\t\t\t\t\tvar icon = document.createElement( 'span' );\n\t\t\t\t\ticon.classList.add( 'dashicons' );\n\t\t\t\t\ticon.classList.add( this.dashicons );\n\n\t\t\t\t\treturn icon.outerHTML;\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * Render classes for our menu item, including active.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tvar classes = this.classes;\n\t\t\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\t\t\tif ( currentDomain.get( 'id' ) == this.id ) {\n\t\t\t\t\t\tclasses += ' active';\n\t\t\t\t\t}\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * If our menu is a link (like preview), render its url.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderUrl: function() {\n\t\t\t\t\tif ( '' != this.url ) {\n\t\t\t\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\t\t\t\t\t\treturn this.url + formModel.get( 'id' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '#';\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * If our menu is a link (like preview), render its target.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderTarget: function() {\n\t\t\t\t\tif ( '' != this.url ) {\n\t\t\t\t\t\treturn '_blank';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '_self';\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t/**\n\t\t\t\t * If our menu item is disabled, output 'disabled'\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderDisabled: function() {\n\t\t\t\t\tif ( this.disabled ) {\n\t\t\t\t\t\treturn 'disabled';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn view;\n} );\n\n","/**\n * Collection view that takes our app menu items and renders an individual view for each.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/menu',['views/app/menuItem'], function( appMenuItemView ) {\n\tvar view = Marionette.CollectionView.extend( {\n\t\ttagName: 'div',\n\t\tchildView: appMenuItemView,\n\n\t\t/**\n\t\t * When we show this view, get rid of the extra <div> tag added by backbone.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tonShow: function() {\n\t\t\tjQuery( this.el ).find( 'li:last' ).unwrap();\n\t\t}\n\t} );\n\n\treturn view;\n} );\n","/**\n * Renders the action buttons to the right of the app menu. i.e. Publish\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/menuButtons',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'span',\n\t\ttemplate: '#tmpl-nf-app-header-action-button',\n\n\t\tinitialize: function() {\n\t\t\t// Listen to changes on the app 'clean' state. When it changes, re-render.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:clean', this.render, this );\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:loading', this.render, this );\n\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'response:updateDB', this.bounceIcon, this );\n\t\t},\n\n\t\t/**\n\t\t * These functions are available to templates, and help us to remove logic from template files.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return Object\n\t\t */\n\t\ttemplateHelpers: function () {\n\t\t\tvar that = this;\n\t    \treturn {\n\n\t    \t\t/**\n\t    \t\t * Render our Publish button. If we're loading, render the loading version.\n\t    \t\t *\n\t    \t\t * @since  3.0\n\t    \t\t * @return string\n\t    \t\t */\n\t    \t\trenderPublish: function() {\n\t    \t\t\tif ( that.publishWidth ) {\n\t    \t\t\t\tthis.publishWidth = that.publishWidth + 'px';\n\t    \t\t\t} else {\n\t    \t\t\t\tthis.publishWidth = 'auto';\n\t    \t\t\t}\n\n\t    \t\t\tif ( nfRadio.channel( 'app' ).request( 'get:setting', 'loading' ) ) {\n\t    \t\t\t\tvar template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-add-header-publish-loading' );\n\t    \t\t\t} else {\n\t    \t\t\t\tvar template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-app-header-publish-button' );\n\t    \t\t\t}\n\t    \t\t\treturn template( this );\n\t    \t\t},\n\n\t    \t\t/**\n\t    \t\t * If our app state is clean, disable publish.\n\t    \t\t * \n\t    \t\t * @since  3.0\n\t    \t\t * @return string\n\t    \t\t */\n\t    \t\tmaybeDisabled: function() {\n\t    \t\t\tif ( nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\n\t    \t\t\t\treturn 'disabled';\n\t    \t\t\t} else {\n\t    \t\t\t\treturn '';\n\t    \t\t\t}\n\t    \t\t},\n\n\t    \t\t/**\n\t    \t\t * If our app isn't clean, render our 'viewChanges' button.\n\t    \t\t * @since  version\n\t    \t\t * @return {[type]} [description]\n\t    \t\t */\n\t    \t\tmaybeRenderCancel: function() {\n\t    \t\t\tif ( ! nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\n\t    \t\t\t\tvar viewChanges = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-app-header-view-changes' );\n\t    \t\t\t\treturn viewChanges( this );\n\t    \t\t\t} else {\n\t    \t\t\t\treturn '';\n\t    \t\t\t}\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tvar publishEL = jQuery( this.el ).find( '.publish' );\n\t\t\t// this.publishWidth = jQuery( publishEL ).outerWidth( true );\n\t\t},\n\n\t\t/**\n\t\t * Listen for clicks on the Publish or view changes button.\n\t\t * @type {Object}\n\t\t */\n\t\tevents: {\n\t\t\t'click .publish': 'clickPublish',\n\t\t\t'click .viewChanges': 'clickViewChanges'\n\t\t},\n\n\t\t/**\n\t\t * When we click publish, trigger a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \te event\n\t\t * @return void\n\t\t */\n\t\tclickPublish: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:publish', e );\n\t\t},\n\n\t\t/**\n\t\t * When we click view changes, trigger a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \te event\n\t\t * @return void\n\t\t */\n\t\tclickViewChanges: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:viewChanges', e );\n\t\t},\n\n\t\tbounceIcon: function( changeModel ) {\n\t\t\tjQuery( this.el ).find( '.dashicons-backup' ).effect( 'bounce', { times: 3 }, 600 );\n\t\t}\n\n\t});\n\n\treturn view;\n} );\n\n","/**\n * Renders the action buttons to the right of the app menu. i.e. Publish\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/mobileMenuButton',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'span',\n\t\ttemplate: '#tmpl-nf-mobile-menu-button',\n\n\t\tinitialize: function() {\n\t\t\t// Listen to changes on the app 'clean' state. When it changes, re-render.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:clean', this.render, this );\n\t\t},\n\n\t\t/**\n\t\t * These functions are available to templates, and help us to remove logic from template files.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return Object\n\t\t */\n\t\ttemplateHelpers: function () {\n\t\t\tvar that = this;\n\t    \treturn {\n\t    \t\t/**\n\t    \t\t * If our app state is clean, disable button.\n\t    \t\t * \n\t    \t\t * @since  3.0\n\t    \t\t * @return string\n\t    \t\t */\n\t    \t\tmaybeDisabled: function() {\n\t    \t\t\tif ( nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\n\t    \t\t\t\treturn 'disabled';\n\t    \t\t\t} else {\n\t    \t\t\t\treturn '';\n\t    \t\t\t}\n\t    \t\t}\n\t\t\t};\n\t\t},\n\n\t\t/**\n\t\t * Listen for clicks on the mobile menu button.\n\t\t * @type {Object}\n\t\t */\n\t\tevents: {\n\t\t\t'click .nf-mobile-menu': 'clickMobileMenu'\n\t\t},\n\n\t\t/**\n\t\t * When we click publish, trigger a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \te event\n\t\t * @return void\n\t\t */\n\t\tclickMobileMenu: function( e) {\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\n\t\t\tjQuery( builderEl ).toggleClass( 'nf-menu-expand' );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Main application header. Includes links to all of our domains.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/header',['views/app/menu', 'views/app/menuButtons', 'views/app/mobileMenuButton'], function( appMenuCollectionView, appMenuButtonsView, mobileMenuButtonView ) {\n\tvar view = Marionette.LayoutView.extend( {\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-app-header',\n\n\t\tregions: {\n\t\t\t// Menu is our main app menu.\n\t\t\tmenu: '.nf-app-menu',\n\t\t\t// Buttons represents the 'view changes' and 'Publish' buttons.\n\t\t\tbuttons: '.nf-app-buttons',\n\t\t\tmobileMenuButton: '.nf-mobile-menu-button'\n\t\t},\n\n\t\t/**\n\t\t * Since this is a layout region, we need to fill the two areas: menu and buttons whenever we show this view.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tonRender: function() {\n\t\t\t// Get our domains\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\t// show the menu area using the appropriate view, passing our domain collection.\n\t\t\tthis.menu.show( new appMenuCollectionView( { collection: appDomainCollection } ) );\n\t\t\tthis.buttons.show( new appMenuButtonsView() );\n\t\t\tthis.mobileMenuButton.show( new mobileMenuButtonView() );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click #nf-logo': 'clickLogo'\n\t\t},\n\n\t\tclickLogo: function( e ) {\n\t\t\t\n\t\t}\n\n\t} );\n\n\treturn view;\n} );\n","/**\n * Renders our sub-header. i.e. add new field, add new action, etc.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/subHeader',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-sub-header'\n\t});\n\n\treturn view;\n} );\n","/**\n * Renders our builder header.\n *\n * This is a layout view and handles two regions:\n * app - menu/buttons\n * subapp - title, add new field, etc.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/builderHeader',[ 'views/app/header', 'views/app/subHeader' ], function( appHeaderView, appSubHeaderView ) {\n\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: \"div\",\n\t\ttemplate: \"#tmpl-nf-header\",\n\n\t\tregions: {\n\t\t\tapp: \"#nf-app-header\",\n\t\t\tformTitle: \"#nf-app-form-title\",\n\t\t\tappSub: \"#nf-app-sub-header\"\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.changeSubHeader );\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tthis.app.show( new appHeaderView() );\n\n\t\t\tvar formData = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\t\t\tvar formSettings = formData.get( 'settings' );\n\n\t\t\tvar formTitleView = nfRadio.channel( 'views' ).request( 'get:formTitle' );\n\t\t\tthis.formTitle.show( new formTitleView( { model: formSettings } ) );\n\n\t\t\tthis.changeSubHeader();\n\t\t},\n\n\t\tchangeSubHeader: function() {\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tvar subHeaderView = currentDomain.get( 'getSubHeaderView' ).call( currentDomain );\n\t\t\tthis.appSub.show( subHeaderView );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Renders our builder.\n *\n * This is a layout view and handles three regions:\n * gutterLeft - gutter to the left of our main content area\n * body - main content area\n * gutterRight - gutter to the right of our main content area\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2016 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/main',[], function() {\n\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-main',\n\t\tclassName: 'nf-main-test',\n\t\tmaybeDone: false,\n\n\t\toffsetRight: false,\n\t\toffsetLeft: false,\n\n\t\tregions: {\n\t\t\tgutterLeft: '#nf-main-gutter-left',\n\t\t\tbody: '#nf-main-body',\n\t\t\tgutterRight: '#nf-main-gutter-right'\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.render );\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:mainEl', this.getMainEl, this );\n\n\t\t\t/*\n\t\t\t * Make sure that our gutters resize to match our screen upon resize or drawer open/close.\n\t\t\t */\n\t\t\tjQuery( window ).on( 'resize', { context: this }, this.resizeBothGutters );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'before:open', this.setBothGuttersAbsolute );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'opened', this.setBothGuttersFixed );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'before:close', this.setBothGuttersAbsolute );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'closed', this.setBothGuttersFixed );\n\t\t\t// ... or Domain Change.\n            this.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', function(){\n                // @todo Using a timeout feels like a hack, but there may be a timing issue here.\n            \tsetTimeout(function(){\n                    nfRadio.channel( 'app' ).request( 'update:gutters' );\n\t\t\t\t}, 300, this );\n\t\t\t}, this );\n\n\n\t\t\t/*\n\t\t\t * Reply to messages requesting that we resize our gutters.\n\t\t\t */\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:gutters', this.updateGutters, this );\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tnfRadio.channel( 'main' ).trigger( 'show:main', this );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tvar bodyView = currentDomain.get( 'getMainContentView' ).call( currentDomain );\n\t\t\tthis.body.show( bodyView );\n\n\t\t\tvar gutterLeftView = currentDomain.get( 'getGutterLeftView' ).call( currentDomain );\n\t\t\tthis.gutterLeft.show( gutterLeftView );\n\n\t\t\tvar gutterRightView = currentDomain.get( 'getGutterRightView' ).call( currentDomain );\n\t\t\tthis.gutterRight.show( gutterRightView );\n\t\t\t\n\t\t\tnfRadio.channel( 'main' ).trigger( 'render:main' );\n\t\t},\n\n\t\tgetMainEl: function() {\n\t\t\treturn jQuery( this.el ).parent();\n\t\t},\n\n\t\tonAttach: function() {\n\t\t\tthis.initialGutterResize();\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tjQuery( window ).off( 'resize', this.resize );\n\t\t},\n\n\t\tinitialGutterResize: function() {\n\t\t\tthis.resizeGutter( this.gutterLeft.el );\n\t\t\tthis.resizeGutter( this.gutterRight.el );\n\t\t\tthis.setBothGuttersFixed( this );\n\t\t},\n\n\t\tresizeBothGutters: function( e ) {\n\t\t\tvar context = ( e ) ? e.data.context : this;\n\n\t\t\tvar leftEl = context.gutterLeft.el;\n\t\t\tvar rightEl = context.gutterRight.el;\n\t\t\t\n\t\t\tcontext.resizeGutter( leftEl, context );\n\t\t\tcontext.resizeGutter( rightEl, context );\n\n\t\t\tcontext.setBothGuttersAbsolute( context );\n\n\t\t\t/*\n\t\t\t * Clear our timeout. If the timeout runs, it means we've stopped resizing.\n\t\t\t */\t\n\t\t\tclearTimeout( context.maybeDone );\n\t\t\t/*\n\t\t\t * Add our timeout.\n\t\t\t */\n\t\t\tcontext.maybeDone = setTimeout( context.setBothGuttersFixed, 100, context );\n\t\t},\n\n\t\tresizeGutter: function( el, context ) {\n\t\t\tvar top = jQuery( el ).offset().top;\n\t\t\tvar viewHeight = jQuery( window ).height();\n\t\t\tvar height = viewHeight - top;\n\t\t\tjQuery( el ).height( height );\n\t\t},\n\n\t\tsetBothGuttersFixed: function( context ) {\n\t\t\tcontext = context || this;\n\n\t\t\tvar offsetLeft = jQuery( context.gutterLeft.el ).offset();\n\t\t\tvar topLeft = offsetLeft.top;\n\t\t\tvar leftLeft = offsetLeft.left;\n\n\t\t\tjQuery( context.gutterLeft.el ).css( { position: 'fixed', left: leftLeft, top: topLeft } );\t\t\tvar offsetLeft = jQuery( context.gutterLeft.el ).offset();\n\t\t\t\n\t\t\tvar offsetRight = jQuery( context.gutterRight.el ).offset();\n\t\t\tvar topRight = offsetRight.top;\n\t\t\tvar leftRight = offsetRight.left;\n\n\t\t\tjQuery( context.gutterRight.el ).css( { position: 'fixed', left: leftRight, top: topRight } );\n\t\t},\n\n\t\tsetBothGuttersAbsolute: function( context ) {\n\t\t\tcontext = context || this;\n\n\t\t\tvar offsetLeft = jQuery( context.gutterLeft.el ).offset();\n\t\t\tvar offsetRight = jQuery( context.gutterRight.el ).offset();\n\n\t\t\tvar scrollTop = jQuery( '#nf-main' ).scrollTop();\n\n\t\t\tjQuery( context.gutterLeft.el ).css( { position: 'absolute', left: 0, top: scrollTop } );\n\t\t\tjQuery( context.gutterRight.el ).css( { position: 'absolute', top: scrollTop, right: 0, left: 'auto' } );\n\t\t},\n\n\t\tupdateGutters: function() {\n\t\t\tthis.resizeBothGutters();\n\t\t}\n\n\t});\n\n\treturn view;\n} );\n\n","/**\n * Renders an application menu item from a domain model.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/mobileMenuItem',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-mobile-menu-item',\n\n\t\t/**\n\t\t * When we render this view, remove the extra <div> tag created by backbone.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t},\n\n\t\t// Listen for clicks on our app menu.\n\t\tevents: {\n\t\t\t'click a': 'clickAppMenu'\n\t\t},\n\n\t\t/**\n\t\t * When we click on a menu item, fire a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t * We pass this.model so that we know what item was clicked.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\te event\n\t\t * @return return\n\t\t */\n\t\tclickAppMenu: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:menu', e, this.model );\n\t\t},\n\n\t\t/**\n\t\t * These functions are available to templates, and help us to remove logic from template files.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return Object\n\t\t */\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\t/**\n\t\t\t\t * If we have any dashicons in our model, render them.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderDashicons: function() {\n\t\t\t\t\tif ( ! this.mobileDashicon ) return '';\n\n                    var icon = document.createElement( 'span' );\n                    icon.classList.add( 'dashicons' );\n                    icon.classList.add( this.mobileDashicon );\n\n                    return icon.outerHTML;\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * Render classes for our menu item, including active.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tvar classes = this.classes;\n\t\t\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\t\t\tif ( currentDomain.get( 'id' ) == this.id ) {\n\t\t\t\t\t\tclasses += ' active';\n\t\t\t\t\t}\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * If our menu is a link (like preview), render its url.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderUrl: function() {\n\t\t\t\t\tif ( '' != this.url ) {\n\t\t\t\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\t\t\t\t\t\treturn this.url + formModel.get( 'id' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '#';\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * If our menu is a link (like preview), render its target.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderTarget: function() {\n\t\t\t\t\tif ( '' != this.url ) {\n\t\t\t\t\t\treturn '_blank';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '_self';\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t/**\n\t\t\t\t * If our menu item is disabled, output 'disabled'\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderDisabled: function() {\n\t\t\t\t\tif ( this.disabled ) {\n\t\t\t\t\t\treturn 'disabled';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n\n","/**\n * Single item view used for the menu drawer.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/mobileMenu',['views/app/mobileMenuItem'], function( mobileMenuItemView ) {\n\tvar view = Marionette.CompositeView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-mobile-menu',\n\t\tchildView: mobileMenuItemView,\n\n\t\tinitialize: function() {\n\t\t\t// Listen to changes on the app 'clean' state. When it changes, re-render.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:clean', this.render, this );\n\t\t},\n\n\t\tattachHtml: function( collectionView, childView ) {\n\t\t\tjQuery( collectionView.el ).find( '.secondary' ).append( childView.el );\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\t/**\n\t    \t\t * If our app state is clean, disable button.\n\t    \t\t * \n\t    \t\t * @since  3.0\n\t    \t\t * @return string\n\t    \t\t */\n\t    \t\tmaybeDisabled: function() {\n\t    \t\t\tif ( nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\n\t    \t\t\t\treturn 'disabled';\n\t    \t\t\t} else {\n\t    \t\t\t\treturn '';\n\t    \t\t\t}\n\t    \t\t}\n\t\t\t};\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .nf-publish': 'clickPublish'\n\t\t},\n\n\t\t/**\n\t\t * When we click publish, trigger a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \te event\n\t\t * @return void\n\t\t */\n\t\tclickPublish: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:publish', e );\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\n\t\t\tjQuery( builderEl ).toggleClass( 'nf-menu-expand' );\n\t\t},\n\t});\n\n\treturn view;\n} );\n","/**\n * Empty drawer content view.\n * Called before we close the drawer.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/contentEmpty',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-empty'\n\t});\n\n\treturn view;\n} );\n","/**\n * Renders our drawer region\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer',['views/app/drawer/contentEmpty'], function( drawerEmptyView ) {\n\n\tvar view = Marionette.LayoutView.extend( {\n\t\ttemplate: '#tmpl-nf-drawer',\n\n\t\tregions: {\n\t\t\theader: '#nf-drawer-header',\n\t\t\tcontent: '#nf-drawer-content',\n\t\t\tfooter: '#nf-drawer-footer'\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:drawerEl', this.getEl, this );\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'load:drawerContent', this.loadContent, this );\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'empty:drawerContent', this.emptyContent, this );\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tjQuery( this.el ).parent().perfectScrollbar();\n\t\t},\n\n\t\tloadContent: function( drawerID, data ) {\n\t\t\tvar drawer = nfRadio.channel( 'app' ).request( 'get:drawer', drawerID );\n\t\t\tvar contentView = drawer.get( 'getContentView' ).call( drawer, data );\n\t\t\tvar headerView = drawer.get( 'getHeaderView' ).call( drawer, data );\n\t\t\tvar footerView = drawer.get( 'getFooterView' ).call( drawer, data );\n\n\t\t\tthis.header.show( headerView );\n\t\t\tthis.content.show( contentView );\n\t\t\tthis.footer.show( footerView );\n\n\t\t},\n\n\t\temptyContent: function() {\n\t\t\tthis.header.empty();\n\t\t\tthis.content.empty();\n\t\t\tthis.footer.empty();\n\t\t},\n\n\t\tgetEl: function() {\n\t\t\treturn jQuery( this.el ).parent();\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .nf-toggle-drawer': 'clickToggleDrawer'\n\t\t},\n\n\t\tclickToggleDrawer: function() {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:toggleDrawerSize' );\n\t\t}\n\n\t} );\n\n\treturn view;\n} );\n\n","/**\n * Single item view used for merge tags.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/mergeTagItem',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'li',\n\n\t\ttemplate: '#tmpl-nf-merge-tags-item',\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change:active', this.render );\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.model.on( 'change:active', this.render, this );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click a': 'clickTag'\n\t\t},\n\n\t\tclickTag: function( e ) {\n\t\t\tnfRadio.channel( 'mergeTags' ).trigger( 'click:mergeTag', e, this.model );\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tif ( this.active ) {\n\t\t\t\t\t\treturn 'active';\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Merge tags popup section\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/mergeTagsSection',['views/app/drawer/mergeTagItem'], function( mergeTagItemView ) {\n\tvar view = Marionette.CompositeView.extend({\n\t\ttagName: 'div',\n\t\tchildView: mergeTagItemView,\n\t\ttemplate: '#tmpl-nf-merge-tags-section',\n\n\t\tinitialize: function() {\n\t\t\tthis.collection = this.model.get( 'tags' );\n\t\t\tthis.model.on( 'change', this.render, this );\n\t\t\tif ( 'fields' == this.model.get( 'id' ) ) {\n\t\t\t\t// var fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t\t// fieldCollection.on( 'all', this.updateFields, this );\n\t\t\t}\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change', this.render );\n\t\t\tif ( 'fields' == this.model.get( 'id' ) ) {\n\t\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t\tfieldCollection.off( 'all', this.updateFields, this );\n\t\t\t}\n\t\t},\n\n\t\tattachHtml: function( collectionView, childView ) {\n\t\t\tjQuery( collectionView.el ).find( '.merge-tags' ).append( childView.el );\n\t\t},\n\n\t\tupdateFields: function() {\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\tthis.model.set( 'tags', fieldCollection );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Model that represents our merge tags.\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/mergeTagModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tactive: false,\n\t\t\texclude: false\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collections of merge tags.\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/mergeTagCollection',['models/app/mergeTagModel'], function( mergeTagModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: mergeTagModel\n\t} );\n\treturn collection;\n} );\n","/**\n * Merge tags popup\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/mergeTagsContent',['views/app/drawer/mergeTagsSection', 'models/app/mergeTagCollection'], function( mergeTagsSectionView, MergeTagCollection ) {\n\tvar view = Marionette.CollectionView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-merge-tags-content',\n\t\tchildView: mergeTagsSectionView,\n\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'get:view', this.getMergeTagsView, this );\n\t\t},\n\n\t\treRender: function( settingModel ) {\n\t\t\tvar mergeTagCollection = nfRadio.channel( 'mergeTags' ).request( 'get:collection' );\n\t\t\tvar defaultGroups = mergeTagCollection.where( { default_group: true } );\n\n\t\t\t/*\n\t\t\t * For the Actions Domain, Add Calc Merge Tags as a Default Group.\n\t\t\t */\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tif( 'actions' == currentDomain.get( 'id' ) ){\n\t\t\t\tvar calcMergeTagGroup = mergeTagCollection.where( { id: 'calcs' } );\n                defaultGroups = defaultGroups.concat( calcMergeTagGroup );\n            }\n\n\t\t\tthis.collection = new MergeTagCollection( defaultGroups );\n\t\t\tvar that = this;\n\t\t\tvar useMergeTags = settingModel.get( 'use_merge_tags' );\n\t\t\tif ( 'object' == typeof useMergeTags ) {\n\t\t\t\tif ( 'undefined' != typeof useMergeTags.exclude ) {\n\t\t\t\t\t_.each( useMergeTags.exclude, function( exclude ) {\n\t\t\t\t\t\tthat.collection.remove( exclude )\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\tif ( 'undefined' != typeof useMergeTags.include ) {\n\t\t\t\t\t_.each( mergeTagCollection.models, function( sectionModel ) {\n\t\t\t\t\t\tif ( -1 != useMergeTags.include.indexOf( sectionModel.get( 'id' ) ) ) {\n\t\t\t\t\t\t\t// console.log( sectionModel );\n\t\t\t\t\t\t\tthat.collection.add( sectionModel );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.render();\n\t\t},\n\n\t\tgetMergeTagsView: function() {\n\t\t\treturn this;\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Builder view.\n *\n * This layout view has regions that represent our application areas:\n * header\n * main\n * menuDrawer - Mobile side-menu\n * drawer\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/builder',['views/app/builderHeader', 'views/app/main', 'views/app/mobileMenu', 'views/app/drawer', 'views/app/drawer/mergeTagsContent'], function( headerView, mainView, mobileMenuView, drawerView, mergeTagsContentView ) {\n\tvar view = Marionette.LayoutView.extend( {\n\t\ttemplate: \"#tmpl-nf-builder\",\n\t\tel: '#nf-builder',\n\n\t\tregions: {\n\t\t\theader: \"#nf-header\",\n\t\t\tmain: \"#nf-main\",\n\t\t\tmenuDrawer: \"#nf-menu-drawer\",\n\t\t\tdrawer: \"#nf-drawer\",\n\t\t\tmergeTagsContent: '.merge-tags-content'\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\t// Respond to requests asking for the builder dom element.\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:builderEl', this.getBuilderEl, this );\n\t\t\t// Respond to requests asking for the builder view\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:builderView', this.getBuilderView, this );\n\t\t\t// Layout views aren't self-rendering.\n\t\t\tthis.render();\n\t\t\tvar mergeTags = nfRadio.channel( 'mergeTags' ).request( 'get:collection' );\n\t\t\tvar mergeTagsClone = mergeTags.clone();\n\t\t\tthis.mergeTagsContent.show( new mergeTagsContentView( { collection: mergeTagsClone } ) );\n\t\t\t// Show our header.\n\t\t\tthis.header.show( new headerView() );\n\t\t\t// Show our main content.\n\t\t\tthis.main.show( new mainView() );\n\t\t\t// Show our mobile menu\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\tthis.menuDrawer.show( new mobileMenuView( { collection: appDomainCollection } ) );\n\t\t\t// Show our drawer.\n\t\t\tthis.drawer.show( new drawerView() );\n\n\n\t\t},\n\n\t\tonRender: function() {\n\n\t\t},\n\n\t\tgetBuilderEl: function() {\n\t\t\treturn this.el;\n\t\t},\n\n\t\tgetBuilderView: function() {\n\t\t\treturn this;\n\t\t},\n\n\t\t// Listen for clicks\n\t\tevents: {\n\t\t\t'click .nf-open-drawer': 'openDrawer',\n\t\t\t'click .nf-change-domain': 'changeDomain',\n\t\t\t'click .nf-close-drawer': 'closeDrawer'\n\t\t},\n\n\t\t/**\n\t\t * Someone clicked to open a drawer, so fire a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  Object \te \tevent\n\t\t * @return void\n\t\t */\n\t\topenDrawer: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:openDrawer', e );\n\t\t},\n\t\t/**\n\t\t * Someone clicked to close a drawer, so fire a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t *\n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tcloseDrawer: function() {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:closeDrawer' );\n\t\t},\n\t\t/**\n\t\t * Someone clicked to change the domain, so fire a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  Object \te \tevent\n\t\t * @return void\n\t\t */\n\t\tchangeDomain: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:menu', e );\n\t\t}\n\n\t} );\n\n\treturn view;\n} );\n\n","\ndefine( 'controllers/app/remote',[], function() {\n    return Marionette.Object.extend( {\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'setting' ), 'remote', this.addListener );\n        },\n\n        addListener: function( model, dataModel ) {\n\n            var listenTo = model.get( 'remote' ).listen;\n\n            // TODO: Change seems to be triggering twice on each update.\n            this.listenTo( nfRadio.channel( 'fieldSetting-' + listenTo ), 'update:setting', this.updateSetting );\n            this.listenTo( nfRadio.channel( 'actionSetting-' + listenTo ), 'update:setting', this.updateSetting );\n\n            this.listenTo( nfRadio.channel( 'setting-type-' + model.get( 'type' ) ), 'click:extra', this.clickExtra );\n\n            model.listenTo( nfRadio.channel( 'setting-remote' ), 'get:remote', this.getRemote, model );\n\n            // Auto-trigger get:remote on drawer load.\n            nfRadio.channel( 'setting-remote' ).trigger( 'get:remote', dataModel );\n        },\n\n        clickExtra: function( e, settingModel, dataModel, settingView ) {\n            jQuery( e.srcElement ).addClass( 'spin' );\n            nfRadio.channel( 'setting-remote' ).trigger( 'get:remote', dataModel );\n        },\n\n        updateSetting: function( dataModel, settingModel ) {\n            nfRadio.channel( 'setting-remote' ).trigger( 'get:remote', dataModel );\n        },\n\n        getRemote: function( dataModel ) {\n\n            var remote = this.get( 'remote' );\n\n            var data = {\n                parentValue: dataModel.get( remote.listen ),\n                action: remote.action,\n                security: ( remote.security ) ? remote.security : nfAdmin.ajaxNonce\n            };\n\n            // TODO: Disable setting and lock drawer while updating.\n            var that = this;\n            jQuery.post( ajaxurl, data, function( response ){\n                var response = JSON.parse( response );\n\n                if( 'textbox' == that.get( 'type' ) ) {\n                    dataModel.set( that.get('name'), response.value );\n                }\n\n                if( 'select' == that.get( 'type' ) ) {\n                    that.set( 'options', response.options );\n                    that.trigger( 'rerender' );\n                }\n            });\n        },\n\n    });\n} );\n","/**\n * Handles opening and closing our drawer. This is where we display settings for fields, actions, and settings.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/drawer',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen to our drawer-related click events.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:openDrawer', this.clickOpenDrawer );\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:closeDrawer', this.closeDrawer );\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:toggleDrawerSize', this.toggleDrawerSize );\n\n\t\t\t// Reply to direct requests to open or close the drawer.\n\t\t\tnfRadio.channel( 'app' ).reply( 'open:drawer', this.openDrawer, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'close:drawer', this.closeDrawer, this );\n\n\t\t\t/*\n\t\t\t * When we close the drawer, we have to figure out what the right position should be.\n\t\t\t * This listens to requests from other parts of our app asking what the closed right position is.\n\t\t\t */\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'get:closedRightPos', this.getClosedDrawerPos, this );\n\t\t\t\n\t\t\t// Reply to requests to prevent our drawer from closing\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'prevent:close', this.preventClose, this );\n\t\t\t// Reply to requests to enable drawer closing\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'enable:close', this.enableClose, this );\n\t\t\t// Reply to requests for our disabled/enabled state.\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'get:preventClose', this.maybePreventClose, this );\n\n\t\t\t/*\n\t\t\t * Object that holds our array of 'prevent close' values.\n\t\t\t * We use an array so that registered requests can unregister and not affect each other.\n\t\t\t */\n\t\t\tthis.objPreventClose = {};\n\n\t\t\t/*\n\t\t\t *  Listen to focus events on the filter and stop our interval when it happens.\n\t\t\t *  This is to fix a bug that can cause the filter to gain focus every few seconds.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'filter:focused', this.filterFocused );\n\t\t},\n\n\t\t/**\n\t\t * Handles closing our drawer\n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tcloseDrawer: function() {\n\t\t\t// Get our current domain.\n\t\t\tvar currentDrawer = nfRadio.channel( 'app' ).request( 'get:currentDrawer' );\n            if ( ! currentDrawer || this.maybePreventClose() ) {\n                return false;\n            }\n\n\t\t\t// Triggers the before close drawer action on our current domain's drawer channel.\n\t\t\tnfRadio.channel( 'drawer-' + currentDrawer.get( 'id' ) ).trigger( 'before:closeDrawer' );\n\t\t\t/*\n\t\t\t * The 'before:closeDrawer' message is deprecated as of version 3.0 in favour of 'before:close'.\n\t\t\t * TODO: Remove this radio message in the future.\n\t\t\t */\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'before:closeDrawer' );\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'before:close' );\n\t\t\t// Send a message to our drawer to empty its contents.\n\t\t\tnfRadio.channel( 'drawer' ).request( 'empty:drawerContent' );\n\n\t\t\t// To close our drawer, we have to add our closed class to the builder and remove the opened class.\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\n\t\t\tjQuery( builderEl ).addClass( 'nf-drawer-closed' ).removeClass( 'nf-drawer-opened' );\n\t\t\tjQuery( builderEl ).removeClass( 'disable-main' );\n\n\t\t\t// Get the right position of our closed drawer. Should be container size in -px.\n\t\t\tvar rightClosed = this.getClosedDrawerPos();\n\n\t\t\t// Get our drawer element and give change the 'right' property to our closed position.\n\t\t\tvar drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\n\t\t\tjQuery( drawerEl ).css( { 'right': rightClosed } );\n\n\t\t\t// In order to access properties in 'this' context in our interval below, we have to set it here.\t\n\t\t\tvar that = this;\n\n\t\t\t/*\n\t\t\t * Since jQuery can't bind to a CSS change, we poll every .15 seconds to see if we've closed the drawer.\n\t\t\t *\n\t\t\t * Once our drawer is closed, we:\n\t\t\t * clear our interval\n\t\t\t * request that the app change it's current drawer to false\n\t\t\t * trigger a drawer closed message\n\t\t\t */\n\t\t\tthis.checkCloseDrawerPos = setInterval( function() {\n\t        \tif ( rightClosed == jQuery( drawerEl ).css( 'right' ) ) {\n\t        \t\tclearInterval( that.checkCloseDrawerPos );\n\t\t    \t\tnfRadio.channel( 'app' ).request( 'update:currentDrawer', false );\n\t\t    \t\tnfRadio.channel( 'drawer' ).trigger( 'closed' );\n\t\t    \t\t/*\n\t\t    \t\t * Reset the add new button z-index to 98.\n\t\t    \t\t */\n\t\t    \t\tjQuery( '.nf-master-control' ).css( 'z-index', 98 );\n\t\t    \t\t// jQuery( drawerEl ).scrollTop( 0 );\n\t        \t}\n\t\t\t}, 150 );\n\t\t},\n\n\t\t/**\n\t\t * Click handler for our 'open drawer' event.\n\t\t * @since  3.0\n\t\t * @param  e jQuery event\n\t\t * @return void\n\t\t */\n\t\tclickOpenDrawer: function( e ) {\n\t\t\tvar drawerID = jQuery( e.target ).data( 'drawerid' );\n\t\t\tthis.openDrawer( drawerID );\n\t\t},\n\n\t\t/**\n\t\t * Open our drawer.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  string drawerID \tID of the drawer we want to open.\n\t\t * @param  object data     \tOptional data that we want to pass to the drawer.\n\t\t * @return void\n\t\t */\n\t\topenDrawer: function( drawerID, data ) {\n\t\t\tif ( this.maybePreventClose() ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// If we haven't sent a data object, set the variable to an empty object.\n\t\t\tdata = data || {};\n\n\t\t\t/*\n\t\t\t * If we're dealing with something that has a model, set the proper active state.\n\t\t\t *\n\t\t\t * TODO: Make this more dynamic. I'm not sure that it fits in the drawer controller.\n\t\t\t */\n\t\t\tif ( 'undefined' != typeof data.model ) {\n\t\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\t\tvar currentDomainID = currentDomain.get( 'id' );\n\t\t\t\tnfRadio.channel( currentDomainID ).request( 'clear:editActive' );\n\t\t\t\tdata.model.set( 'editActive', true );\n\t\t\t\tthis.dataModel = data.model;\n\t\t\t}\n\n\t\t\t// Send out a message requesting our drawer view to load the content for our drawer ID.\n\t\t\tnfRadio.channel( 'drawer' ).request( 'load:drawerContent', drawerID, data );\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'before:open' );\n\t\t\t\n\t\t\t// To open our drawer, we have to add our opened class to our builder element and remove the closed class.\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\n\t\t\tjQuery( builderEl ).addClass( 'nf-drawer-opened' ).removeClass( 'nf-drawer-closed' );\n\t\t\t\n\t\t\t// To open our drawer, we have to set the right position of our drawer to 0px.\n\t\t\tvar drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\n\t\t\tjQuery( drawerEl ).css( { 'right': '0px' } );\n\t\t\t\n\t\t\t// In order to access properties in 'this' context in our interval below, we have to set it here.\t\n\t\t\tvar that = this;\n\n\t\t\t/*\n\t\t\t * Since jQuery can't bind to a CSS change, we poll every .15 seconds to see if we've opened the drawer.\n\t\t\t *\n\t\t\t * Once our drawer is opened, we:\n\t\t\t * clear our interval\n\t\t\t * focus our filter\n\t\t\t * request that the app update its current drawer to the one we opened\n\t\t\t * trigger a drawer opened message\n\t\t\t */\n\t\t\tthis.hasFocus = false;\n\n\t\t\t/*\n\t\t\t * Set our add new button z-index to 0;\n\t\t\t */\n\t\t\tjQuery( '.nf-master-control' ).css( 'z-index', 0 );\n\n\t\t\tthis.checkOpenDrawerPos = setInterval( function() {\n\t        \tif ( '0px' == jQuery( drawerEl ).css( 'right' ) ) {\n\t        \t\tclearInterval( that.checkOpenDrawerPos );\n\t\t\t\t\tif ( ! that.hasFocus ) {\n\t\t        \t\tthat.focusFilter();\n\t\t\t\t\t\tthat.hasFocus = true;\n\t\t\t    \t\tnfRadio.channel( 'app' ).request( 'update:currentDrawer', drawerID );\n\t\t\t    \t\tjQuery( drawerEl ).scrollTop( 0 );\n\t\t\t    \t\tnfRadio.channel( 'drawer' ).trigger( 'opened' );\n\t\t\t\t\t}   \t\t\n\t        \t}\n\t\t\t}, 150 );\n\t\t},\n\n\t\t/**\n\t\t * Toggle the drawer from half to full screen and vise-versa\n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\ttoggleDrawerSize: function() {\n\t\t\t// Get our drawer element.\n\t\t\tvar drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\n\t\t\t// toggle our drawer size class.\n\t\t\tjQuery( drawerEl ).toggleClass( 'nf-drawer-expand' );\n\t\t},\n\n\t\t/**\n\t\t * Focus our filter\n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n        focusFilter: function() {\n        \t// Get our filter element\n        \tvar filterEl = nfRadio.channel( 'drawer' ).request( 'get:filterEl' );\n        \t// Focus\n        \tjQuery( filterEl ).focus();\n        },\n\n        /**\n         * Get the CSS right position (in px) of the closed drawer element.\n         * This is calculated by:\n         * getting the width of the builder element\n         * add 300 pixels\n         * make it negative\n         * \n         * @since  3.0\n         * @return void\n         */\n        getClosedDrawerPos: function() {\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\n\t\t\tvar closedPos = jQuery( builderEl ).width() + 300;\n\t\t\treturn '-' + closedPos + 'px';\n        },\n\n        /**\n         * Check to see if anything has registered a prevent close key.\n         * \n         * @since  3.0\n         * @return boolean\n         */\n        maybePreventClose: function() {\n        \tif ( 0 == Object.keys( this.objPreventClose ).length ) {\n        \t\treturn false;\n        \t} else {\n        \t\treturn true;\n        \t}\n        },\n\n        /**\n         * Register a prevent close key.\n         * \n         * @since  3.0\n         * @param  string \tkey unique id for our 'prevent close' setting.\n         * @return void\n         */\n        preventClose: function( key ) {\n        \tthis.objPreventClose[ key ] = true;\n        \t/*\n        \t * When we disable closing the drawer, add the disable class.\n        \t */\n        \t// Get our current drawer.\n\t\t\tthis.dataModel.set( 'drawerDisabled', true );\n        },\n\n        /**\n         * Remove a previously registered prevent close key.\n         * \n         * @since  3.0\n         * @param  string \tkey unique id for our 'prevent close' setting.\n         * @return void\n         */\n        enableClose: function( key ) {\n        \tdelete this.objPreventClose[ key ];\n        \t /*\n        \t * When we remove all of our disables preventing closing the drawer, remove the disable class.\n        \t */\n        \tif ( ! this.maybePreventClose() && 'undefined' != typeof this.dataModel ) {\n\t        \t// Get our current drawer.\n\t\t\t\tthis.dataModel.set( 'drawerDisabled', false );        \t\t\n        \t}\n        },\n\n        /**\n         * When we focus our filter, make sure that our open drawer interval is cleared.\n         * \n         * @since  3.0\n         * @return void\n         */\n        filterFocused: function() {\n        \tclearInterval( this.checkOpenDrawerPos );\n        },\n\n        getPreventClose: function() {\n        \treturn this.objPreventClose;\n        }\n\t});\n\n\treturn controller;\n} );\n","/**\n * Default drawer header.\n *\n * Includes our filter/search and 'Done' button.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/headerDefault',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-header-default',\n\n\t\tinitialize: function() {\n\t\t\tif ( this.model ) {\n\t\t\t\t// Listen for our drawer being disabled.\n\t\t\t\tthis.model.on( 'change:drawerDisabled', this.render, this );\t\t\t\t\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * When we render, remove the extra div added by backbone and add listeners related to our filter.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tonRender: function() {\n\t\t\t// Remove extra wrapping div.\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t\t// Respond to requests related to our filter.\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'clear:filter', this.clearFilter, this );\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'blur:filter', this.blurFilter, this );\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'get:filterEl', this.getEl, this );\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tif ( this.model ) {\n\t\t\t\tthis.model.off( 'change:drawerDisabled', this.render );\n\t\t\t}\n\t\t},\n\n\t\tevents: {\n\t\t\t'keyup .nf-filter'\t: 'maybeChangeFilter',\n\t\t\t'input .nf-filter'\t: 'changeFilter',\n\t\t\t'focus input'\t\t: 'getFocus'\n\t\t},\n\n\t\t/**\n\t\t * When the filter text is changed, trigger an event on our current drawer.\n\t\t * This lets us keep the logic separate from the click event and view.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \te event\n\t\t * @return void\n\t\t */\n\t\tchangeFilter: function( e ) {\n\t\t\tvar currentDrawer = nfRadio.channel( 'app' ).request( 'get:currentDrawer' );\n\t\t\tnfRadio.channel( 'drawer-' + currentDrawer.get( 'id' ) ).trigger( 'change:filter', e.target.value, e );\n\t\t},\n\n\t\t/**\n\t\t * The user pressed a key. If it's the enter key, then run the change filter function.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \te event\n\t\t * @return void\n\t\t */\n\t\tmaybeChangeFilter: function( e ) {\n\t\t\tif ( 13 == e.keyCode ) {\n\t\t\t\te.addObject = true;\n\t\t\t\tthis.changeFilter( e );\t\t\t\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Clear our filter.\n\t\t *\n\t\t * This triggers 'input' on the field, which will trigger a change if necessary.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tclearFilter: function() {\n\t\t\tvar filterEl =  jQuery( this.el ).find( '.nf-filter' );\n\t\t\tif ( '' != jQuery.trim( filterEl.val() ) ) {\n\t\t\t\tfilterEl.val('');\n\t\t\t\tfilterEl.trigger( 'input' );\n\t\t\t\tfilterEl.focus();\t\t\t\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Fire the 'blur' event on our filter. Used to force a change event when the user tabs.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tblurFilter: function() {\n\t\t\tjQuery( this.el ).find( '.nf-filter' ).blur();\n\t\t},\n\n\t\t/**\n\t\t * Return our filter dom element.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return Object\n\t\t */\n\t\tgetEl: function() {\n\t\t\treturn jQuery( this.el ).find( '.nf-filter' );\n\t\t},\n\n\t\tgetFocus: function() {\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'filter:focused' );\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\trenderDisabled: function() {\n\t\t\t\t\t// Get our current domain.\n\t\t\t\t\tif ( this.drawerDisabled ) {\n\t\t\t\t\t\treturn 'disabled';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Default drawer footer\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/footerDefault',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-empty'\n\t});\n\n\treturn view;\n} );\n","define( 'models/app/drawerModel',['views/app/drawer/headerDefault', 'views/app/drawer/footerDefault'], function( defaultHeaderView, defaultFooterView ) {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tgetHeaderView: function( data ) {\n\t\t\t\treturn new defaultHeaderView( data );\n\t\t\t},\n\n\t\t\tgetFooterView: function( data ) {\n\t\t\t\treturn new defaultFooterView( data );\n\t\t\t}\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collection that holds all of our drawer models.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/drawerCollection',['models/app/drawerModel'], function( drawerModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: drawerModel\n\t} );\n\treturn collection;\n} );\n","define( 'views/fields/drawer/stagedField',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-staged-field',\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .dashicons-dismiss': 'removeStagedField'\n\t\t},\n\n\t\tremoveStagedField: function( el ) {\n\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'click:removeStagedField', el, this.model );\n\t\t}\n\t});\n\n\treturn view;\n} );\n\n","define( 'views/fields/drawer/stagingEmpty',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-staged-fields-empty',\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","define( 'views/fields/drawer/stagingCollection',['views/fields/drawer/stagedField', 'views/fields/drawer/stagingEmpty'], function( stagedFieldView, stagedFieldsEmptyView ) {\n\tvar view = Marionette.CollectionView.extend( {\n\t\ttagName: 'div',\n\t\tchildView: stagedFieldView,\n\t\temptyView: stagedFieldsEmptyView,\n\n\t\tactiveClass: 'nf-staged-fields-active', // CSS Class for showing the reservoir.\n\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:stagedFieldsEl', this.getStagedFieldsEl, this );\n\t\t},\n\n\t\tonShow: function() {\n\n\t\t\tthis.$el = jQuery( this.el ).parent();\n\t\t\tjQuery( this.$el ).find( 'span:first' ).unwrap();\n\t\t\tthis.setElement( this.$el );\n\n\t\t\tvar that = this;\n\n\t\t\tjQuery( this.el ).sortable( {\n\t\t\t\tplaceholder: 'nf-staged-fields-sortable-placeholder',\n\t\t\t\thelper: 'clone',\n\t\t\t\ttolerance: 'pointer',\n\t\t\t\tover: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'over:stagedFields', e, ui );\n\t\t\t\t},\n\n\t\t\t\tout: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'out:stagedFields', ui );\n\t\t\t\t},\n\n\t\t\t\treceive: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'receive:stagedFields', ui );\n\t\t\t\t},\n\n\t\t\t\tupdate: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'fields' ).request( 'sort:staging' );\n\t\t\t\t},\n\n\t\t\t\tstart: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'start:stagedFields', ui );\n\n\t\t\t\t},\n\n\t\t\t\tstop: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'stop:stagedFields', ui );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tjQuery( this.el ).parent().draggable( {\n\t\t\t\topacity: 0.9,\n\t\t\t\tconnectToSortable: '.nf-field-type-droppable',\n\t\t\t\tappendTo: '#nf-main',\n\t\t\t\trefreshPositions: true,\n\t\t\t\tgrid: [ 3, 3 ],\n\t\t\t\ttolerance: 'pointer',\n\n\t\t\t\thelper: function( e ) {\n\t\t\t\t\tvar width = jQuery( e.target ).parent().width();\n\t\t\t\t\tvar height = jQuery( e.target ).parent().height();\n\t\t\t\t\tvar element = jQuery( e.target ).parent().clone();\n\t\t\t\t\tvar left = width / 4;\n\t\t\t\t\tvar top = height / 2;\n\t\t\t\t\tjQuery( this ).draggable( 'option', 'cursorAt', { top: top, left: left } );\n\t\t\t\t\tjQuery( element ).zIndex( 1000 );\n\t\t\t\t\treturn element;\n\t\t\t\t},\n\n\t\t\t\tstart: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'startDrag:fieldStaging', this, ui );\n\t\t\t\t},\n\t\t\t\tstop: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'stopDrag:fieldStaging', this, ui );\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\n\t\tgetStagedFieldsEl: function() {\n\t\t\treturn jQuery( this.el );\n\t\t},\n\n\t\tonAddChild: function() {\n\t\t\tjQuery( this.el ).addClass( this.activeClass );\n\t\t},\n\n\t\tonRemoveChild: function() {\n\t\t\tif( this.hasStagedFields() ) return;\n\t\t\tjQuery( this.el ).removeClass( this.activeClass );\n\t\t},\n\n\t\thasStagedFields: function() {\n\t\t\treturn  0 != this.collection.length;\n\t\t}\n\n\t} );\n\n\treturn view;\n} );\n","/**\n * Model for our staged field.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/fields/stagingModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collection of staged fields.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/fields/stagingCollection',['models/fields/stagingModel'], function( stagingModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: stagingModel,\n\t\tcomparator: 'order'\n\t} );\n\treturn collection;\n} );\n","define( 'views/fields/drawer/typeSection',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-field-type-section',\n\n\t\tinitialize: function() {\n\t\t\t_.bindAll( this, 'render' );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:typeSection', this.getTypeSection, this );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\n\t\t\tthis.dragging = false;\n\t\t\tvar that = this;\n\t\t\t/*\n\t\t\t * If we're on a mobile device, we don't want to enable dragging for our field type buttons.\n\t\t\t */\n\t\t\tif ( ! nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tjQuery( this.el ).find( 'div.nf-field-type-draggable' ).draggable( {\n\t\t\t\t\topacity: 0.9,\n\t\t\t\t\ttolerance: 'pointer',\n\t\t\t\t\tconnectToSortable: '.nf-field-type-droppable',\n\t\t\t\t\trefreshPositions: true,\n\t\t\t\t\tgrid: [ 5, 5 ],\n\t\t\t\t\tappendTo: '#nf-builder',\n\n\t\t\t\t\thelper: function( e ) {\n\t\t\t\t\t\tvar width = jQuery( e.target ).parent().width();\n\t\t\t\t\t\tvar height = jQuery( e.target ).parent().height();\n\t\t\t\t\t\tvar element = jQuery( e.target ).parent().clone();\n\t\t\t\t\t\tvar left = width / 4;\n\t\t\t\t\t\tvar top = height / 2;\n\t\t\t\t\t\tjQuery( this ).draggable( 'option', 'cursorAt', { top: top, left: left } );\n\t\t\t\t\t\tjQuery( element ).zIndex( 1000 );\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t},\n\n\t\t\t\t\tstart: function( e, ui ) {\n\t\t\t\t\t\tthat.dragging = true;\n\t\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'startDrag:type', this, ui );\n\t\t\t\t\t},\n\n\t\t\t\t\tstop: function( e, ui ) {\n\t\t\t\t\t\tthat.dragging = false;\n\t\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'stopDrag:type', this, ui );\n\t\t\t\t\t},\n\n\t\t\t\t\tdrag: function(e, ui) {\n\t\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'drag:type', this, ui, e );\t\n\t\t\t\t\t}\n\n\t\t\t\t} ).disableSelection();\n\n\t\t\t\tjQuery( this.el ).find( '.nf-item' ).focus( function() {\n\t\t\t    \tjQuery( this ).addClass( 'active' );\n\t\t\t    } ).blur( function() {\n\t\t\t    \tjQuery( this ).removeClass( 'active' );\n\t\t\t    } );\n\t\t\t}\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .nf-item': 'clickFieldType',\n\t\t\t'keydown .nf-item': 'maybeClickFieldType',\n\t\t\t'mousedown .nf-item': 'mousedownFieldType'\n\t\t},\n\n\t\tclickFieldType: function( e ) {\n\t\t\tif ( ! this.dragging ) {\n\t\t\t\tnfRadio.channel( 'drawer' ).trigger( 'click:fieldType', e );\n\t\t\t}\n\t\t},\n\n\t\tmousedownFieldType: function( e ) {\n\t\t\tjQuery( e.target).addClass( 'clicked' );\n\t\t\tsetTimeout( function() {\n\t\t\t\tjQuery( e.target ).removeClass( 'clicked' );\n\t\t\t}, 1500 );\n\t\t},\n\n\t\tmaybeClickFieldType: function( e ) {\n\t\t\tif ( 13 == e.keyCode ) {\n\t\t\t\tthis.clickFieldType( e );\n\t\t\t\tnfRadio.channel( 'drawer' ).request( 'clear:filter' );\n\t\t\t}\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\trenderFieldTypes: function() {\n\t\t\t        var html = document.createElement( 'span' );\n\t\t\t        var that = this;\n\t\t\t        _.each( this.fieldTypes, function( id ) {\n\t\t\t            var type = nfRadio.channel( 'fields' ).request( 'get:type', id );\n\t\t\t            var nicename = type.get( 'nicename' );\n\t\t\t            var icon = type.get( 'icon' );\n\t\t\t            var renderType = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-drawer-field-type-button' );\n\t\t\t            var templateHTML = renderType( { id: id, nicename: nicename, icon: icon, type: type, savedField: that.savedField } );\n                        var htmlFragments = document.createRange().createContextualFragment( templateHTML );\n                        html.appendChild( htmlFragments );\n\t\t\t        } );\n\t\t\t        return html.innerHTML;\n\t\t\t\t},\n\n\t\t\t\tsavedField: function() {\n\t\t\t\t\tif( this.type.get( 'savedField' ) ) {\n\t\t\t\t\t\treturn 'nf-saved';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tgetTypeSection: function() {\n\t\t\treturn this.el;\n\t\t}\n\t});\n\n\treturn view;\n} );\n\n","define( 'views/fields/drawer/typeSectionCollection',['views/fields/drawer/typeSection'], function( fieldTypeSectionView ) {\n\tvar view = Marionette.CollectionView.extend( {\n\t\ttagName: 'div',\n\t\tchildView: fieldTypeSectionView,\n\n\t\tonShow: function() {\n\t\t\tjQuery( this.el ).find( '.nf-settings' ).unwrap();\n\t\t\tnfRadio.channel( 'fields' ).request( 'clear:editActive' );\n\t\t}\n\t} );\n\n\treturn view;\n} );\n","define( 'views/fields/drawer/addField',['views/fields/drawer/stagingCollection', 'models/fields/stagingCollection', 'views/fields/drawer/typeSectionCollection'], function( drawerStagingView, StagingCollection, fieldTypeSectionCollectionView ) {\n\n\tvar view = Marionette.LayoutView.extend( {\n\t\ttemplate: '#tmpl-nf-drawer-content-add-field',\n\n\t\tregions: {\n\t\t\tstaging: '#nf-drawer-staging .nf-reservoir',\n\t\t\tprimary: '#nf-drawer-primary',\n\t\t\tsecondary: '#nf-drawer-secondary'\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'filter:fieldTypes', this.filterFieldTypes );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'clear:filter', this.removeFieldTypeFilter );\n\n\t\t\tthis.savedCollection = nfRadio.channel( 'fields' ).request( 'get:savedFields' );\n\t\t\tthis.primaryCollection = this.savedCollection;\n\n\t\t\tthis.fieldTypeSectionCollection = nfRadio.channel( 'fields' ).request( 'get:typeSections' );\n\t\t\tthis.secondaryCollection = this.fieldTypeSectionCollection;\n\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tvar stagingCollection = nfRadio.channel( 'fields' ).request( 'get:staging' );\n\t\t\tthis.staging.show( new drawerStagingView( { collection: stagingCollection } ) );\n\n\t\t\tthis.primary.show( new fieldTypeSectionCollectionView( { collection: this.primaryCollection } ) );\n\t\t\tthis.secondary.show( new fieldTypeSectionCollectionView( { collection: this.secondaryCollection } ) );\n\t\t},\n\n\t\tgetEl: function() {\n\t\t\treturn jQuery( this.el ).parent();\n\t\t},\n\n\t\tfilterFieldTypes: function( filteredSectionCollection ) {\n\t\t\tthis.primary.reset();\n\t\t\tthis.secondary.reset();\n\t\t\tthis.filteredSectionCollection = filteredSectionCollection;\n\t\t\tthis.primary.show( new fieldTypeSectionCollectionView( { collection: this.filteredSectionCollection } ) );\n\t\t},\n\n\t\tremoveFieldTypeFilter: function () {\n\t\t\tthis.primary.show( new fieldTypeSectionCollectionView( { collection: this.savedCollection } ) );\n\t\t\tthis.secondary.show( new fieldTypeSectionCollectionView( { collection: this.fieldTypeSectionCollection } ) );\n\t\t}\n\n\t} );\n\n\treturn view;\n} );\n","define( 'views/app/drawer/itemSettingCollection',[], function() {\n\tvar view = Marionette.CollectionView.extend( {\n\t\ttagName: 'div',\n\n\t\tinitialize: function( data ) {\n\t\t\tthis.childViewOptions = { dataModel: data.dataModel };\n\t\t},\n\n\t\tgetChildView: function( model ) {\n\t\t\treturn nfRadio.channel( 'app' ).request( 'get:settingChildView', model );\n\t\t}\n\t} );\n\n\treturn view;\n} );\n","define( 'views/app/drawer/itemSettingGroup',['views/app/drawer/itemSettingCollection'], function( itemSettingCollectionView ) {\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-content-edit-field-setting-group',\n\t\t\n\t\tregions: {\n\t\t\tsettings: '.nf-field-settings'\n\t\t},\n\n\t\tinitialize: function( data ) {\n\t\t\tthis.model.on( 'change', this.render, this );\n\t\t\tthis.dataModel = data.dataModel;\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change', this.render );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tif ( this.model.get( 'display' ) ) {\n\t\t\t\tthis.settings.show( new itemSettingCollectionView( { collection: this.model.get( 'settings' ), dataModel: this.dataModel } ) );\n\t\t\t} else {\n\t\t\t\tthis.settings.empty();\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'render:settingGroup', this );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .toggle': 'clickToggleGroup'\n\t\t},\n\n\t\tclickToggleGroup: function( e ) {\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'click:toggleSettingGroup', e, this.model );\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\trenderLabel: function() {\n\t\t\t\t\tif ( '' != this.label ) {\n\t\t\t\t\t\tvar groupLabel = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-drawer-content-edit-setting-group-label' );\n\t\t\t\t\t\treturn groupLabel( this );\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\trenderArrowDir: function() {\n\t\t\t\t\tif ( this.display ) {\n\t\t\t\t\t\treturn 'down';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn 'right';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n","define( 'views/app/drawer/itemSettingGroupCollection',['views/app/drawer/itemSettingGroup'], function( itemSettingGroupView ) {\n\tvar view = Marionette.CollectionView.extend( {\n\t\ttagName: 'div',\n\t\tchildView: itemSettingGroupView,\n\n\t\tinitialize: function( data ) {\n\t\t\tthis.childViewOptions = { dataModel: data.dataModel };\n\t\t}\n\t} );\n\n\treturn view;\n} );\n","define( 'views/app/drawer/editSettings',['views/app/drawer/itemSettingGroupCollection'], function( itemSettingGroupCollectionView ) {\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-content-edit-settings',\n\n\t\tregions: {\n\t\t\tsettingTitle: '.nf-setting-title',\n\t\t\tsettingGroups: '.nf-setting-groups'\n\t\t},\n\n\t\tinitialize: function( data ) {\n\t\t\tthis.dataModel = data.model;\n\t\t\tthis.groupCollection = data.groupCollection;\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tvar titleView = currentDomain.get( 'getSettingsTitleView' ).call( currentDomain, { model: this.model } );\n\n\t\t\tthis.settingTitle.show( titleView );\n\t\t\tthis.settingGroups.show( new itemSettingGroupCollectionView( { collection: this.groupCollection, dataModel: this.dataModel } ) );\n\t\t},\n\n\t\ttemplateHelpers: function () {\n\t    \treturn {\n\t    \t\tmaybeRenderTitle: function() {\n\t    \t\t\tif ( 'undefined' !== typeof this.type ) {\n\t    \t\t\t\tvar title = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-drawer-content-edit-settings-title' );\n\t    \t\t\t\treturn title( this );\n\t    \t\t\t} else {\n\t    \t\t\t\treturn '';\n\t    \t\t\t}\n\t    \t\t},\n\n\t    \t\trenderTypeNicename: function() {\n\t    \t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\t\t\tvar domainID = currentDomain.get( 'id' );\n\t    \t\t\tvar type = nfRadio.channel( domainID ).request( 'get:type', this.type );\n\t    \t\t\treturn type.get( 'nicename' );\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\t});\n\n\treturn view;\n} );\n","/**\n * Edit Settings drawer header.\n *\n * Includes our 'Done' button.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/headerEditSettings',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-header-edit-settings',\n\n\t\tinitialize: function() {\n\t\t\tif ( this.model ) {\n\t\t\t\t// Listen for our drawer being disabled.\n\t\t\t\tthis.model.on( 'change:drawerDisabled', this.render, this );\t\t\t\t\n\t\t\t}\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tif ( this.model ) {\n\t\t\t\tthis.model.off( 'change:drawerDisabled', this.render );\n\t\t\t}\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\trenderDisabled: function() {\n\t\t\t\t\t// Get our current domain.\n\t\t\t\t\tif ( this.drawerDisabled ) {\n\t\t\t\t\t\treturn 'disabled';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Button to add an action to the form.\n *\n * TODO: make dynamic\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/actions/drawer/typeButton',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-action-type-button',\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t\t\n\t\t\tjQuery( this.el ).disableSelection();\n\t\t\t\n\t\t\tif ( 'installed' == this.model.get( 'section') ) {\n\t\t\t\tvar that = this;\n\t\t\t\tjQuery( this.el ).draggable( {\n\t\t\t\t\topacity: 0.9,\n\t\t\t\t\ttolerance: 'intersect',\n\t\t\t\t\tscroll: false,\n\t\t\t\t\thelper: 'clone',\n\n\t\t\t\t\tstart: function( e, ui ) {\n\t\t\t\t\t\tthat.dragging = true;\n\t\t\t\t\t\tnfRadio.channel( 'drawer-addAction' ).trigger( 'startDrag:type', this, ui );\n\t\t\t\t\t},\n\n\t\t\t\t\tstop: function( e, ui ) {\n\t\t\t\t\t\tthat.dragging = false;\n\t\t\t\t\t\tnfRadio.channel( 'drawer-addAction' ).trigger( 'stopDrag:type', this, ui );\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t}\n\t\t\t\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .nf-item': 'clickAddAction'\n\t\t},\n\n\t\tclickAddAction: function( e ) {\n\t\t\tif ( ! this.dragging ) {\n\t\t\t\tif ( 'installed' == this.model.get( 'section' ) ) { // Is this an installed action?\n\t\t\t\t\tnfRadio.channel( 'actions' ).trigger( 'click:addAction', this.model );\n\t\t\t\t} else { // This isn't an installed action\n\t\t\t\t\twindow.open( this.model.get( 'link' ), '_blank' );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tvar classes = 'nf-item';\n\t\t\t\t\tif ( '' != jQuery.trim( this.image ) ) {\n\t\t\t\t\t\tclasses += ' nf-has-img';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( 'installed' == this.section ) {\n\t\t\t\t\t\tclasses += ' nf-action-type';\n\t\t\t\t\t}\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\n\t\t\t\trenderStyle: function() {\n\t\t\t\t\tif ( '' != jQuery.trim( this.image ) ) {\n\n\t\t\t\t\t\t// This is being used in a template, so carefully consider the order of double/single quotes.\n\t\t\t\t\t\treturn \"background-image: url('\" + jQuery.trim( this.image ) + \"')\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n\n","define( 'views/actions/drawer/typeCollection',['views/actions/drawer/typeButton'], function( actionTypeButtonView ) {\n\tvar view = Marionette.CompositeView.extend( {\n\t\ttemplate: '#tmpl-nf-drawer-action-type-section',\n\t\tchildView: actionTypeButtonView,\n\n\t\ttemplateHelpers: function() {\n\t\t\tvar that = this;\n\t\t\treturn {\n\t\t\t\trenderNicename: function() {\n\t\t\t\t\treturn that.collection.nicename;\n\t\t\t\t},\n\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\treturn that.collection.slug;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tattachHtml: function( collectionView, childView ) {\n\t\t\tjQuery( collectionView.el ).find( '.action-types' ).append( childView.el );\n\t\t}\n\t} );\n\n\treturn view;\n} );\n","/**\n * Add action drawer.\n *\n * TODO: make dynamic\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/actions/drawer/addAction',['views/actions/drawer/typeCollection'], function( actionTypeCollectionView ) {\n\n\tvar view = Marionette.LayoutView.extend( {\n\t\ttemplate: '#tmpl-nf-drawer-content-add-action',\n\n\t\tregions: {\n\t\t\tprimary: '#nf-drawer-primary',\n\t\t\tsecondary: '#nf-drawer-secondary'\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'filter:actionTypes', this.filteractionTypes );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'clear:filter', this.removeactionTypeFilter );\n\t\t\n\t\t\tthis.installedActions = nfRadio.channel( 'actions' ).request( 'get:installedActions' );\n\t\t\tthis.primaryCollection = this.installedActions;\n\n\t\t\tthis.availableActions = nfRadio.channel( 'actions' ).request( 'get:availableActions' );\n\t\t\tthis.secondaryCollection = this.availableActions;\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tthis.primary.show( new actionTypeCollectionView( { collection: this.primaryCollection } ) );\n\t\t\tthis.secondary.show( new actionTypeCollectionView( { collection: this.secondaryCollection } ) );\n\t\t},\n\n\t\tgetEl: function() {\n\t\t\treturn jQuery( this.el ).parent();\n\t\t},\n\n\t\tfilteractionTypes: function( filteredInstalled, filteredAvailable ) {\n\t\t\tthis.primary.reset();\n\t\t\tthis.secondary.reset();\n\t\t\tthis.primary.show( new actionTypeCollectionView( { collection: filteredInstalled } ) );\n\t\t\tthis.secondary.show( new actionTypeCollectionView( { collection: filteredAvailable } ) );\n\t\t\t\n\t\t},\n\n\t\tremoveactionTypeFilter: function () {\n\t\t\tthis.primary.show( new actionTypeCollectionView( { collection: this.installedActions } ) );\n\t\t\tthis.secondary.show( new actionTypeCollectionView( { collection: this.availableActions } ) );\n\t\t}\n\n\t} );\n\n\treturn view;\n} );\n","/**\n * Individual change item.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/contentViewChangesItem',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-content-view-changes-item',\n\n\t\tinitialize: function() {\n\t\t\tthis.model.on( 'change:disabled', this.render, this );\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change:disabled', this.render );\n\t\t},\n\n\t\t/**\n\t\t * When we render this element, remove the extra wrapping <div> that backbone creates.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .undoSingle': 'undoSingle'\n\t\t},\n\n\t\tundoSingle: function( e ) {\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'click:undoSingle', this.model );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Changes collection view.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/contentViewChanges',['views/app/drawer/contentViewChangesItem'], function( viewChangesItem ) {\n\tvar view = Marionette.CollectionView.extend( {\n\t\ttagName: 'table',\n        className: 'nf-changes',\n\t\tchildView: viewChangesItem\n\t} );\n\n\treturn view;\n} );\n\n","/**\n * Handles clicks on the 'view changes' button in the header.\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/headerViewChanges',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-header-view-changes',\n\n\t\tevents: {\n\t\t\t'click .undoChanges': 'clickUndoChanges'\n\t\t},\n\n\t\tclickUndoChanges: function( e ) {\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'click:undoChanges' );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Error view used for settings.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/settingError',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-edit-setting-error'\n\t});\n\n\treturn view;\n} );\n","define( 'views/app/drawer/itemSetting',['views/app/drawer/mergeTagsContent', 'views/app/drawer/settingError'], function( mergeTagsContentView, settingErrorView ) {\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-edit-setting-wrap',\n\n\t\tregions: {\n\t\t\terror: '.nf-setting-error'\n\t\t},\n\n\t\tinitialize: function( data ) {\n\t\t\tthis.dataModel = data.dataModel;\n\t\t\t/*\n\t\t\t * Send out a request on the setting-type-{type} channel asking if we should render on dataModel change.\n\t\t\t * Defaults to false.\n\t\t\t * This lets specific settings, like RTEs, say that they don't want to be re-rendered when their data model changes.\n\t\t\t */\n\t\t\tvar renderOnChange = ( 'undefined' == typeof nfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).request( 'renderOnChange' ) ) ? false : nfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).request( 'renderOnChange' );\n\t\t\t\n\t\t\tif ( renderOnChange ) {\n\t\t\t\tthis.dataModel.on( 'change:' + this.model.get( 'name' ), this.render, this );\n\t\t\t}\n\n\t\t\tthis.model.on( 'change:error', this.renderError, this );\n\t\t\tthis.model.on( 'change:warning', this.renderWarning, this );\n\n\t\t\tvar deps = this.model.get( 'deps' );\n\t\t\tif ( deps ) {\n\t\t\t\tfor ( var name in deps ) {\n\t\t\t\t    if ( deps.hasOwnProperty( name ) ) {\n\t\t\t\t    \tthis.dataModel.on( 'change:' + name, this.render, this );\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t}\n\n            /**\n\t\t\t * For settings that require a remote refresh\n\t\t\t *   add an \"update\"/refresh icon to the label.\n             */\n            var remote = this.model.get( 'remote' );\n\t\t\tif( remote ) {\n                if( 'undefined' != typeof remote.refresh || remote.refresh ) {\n\t\t\t\t\tvar labelText, updateIcon, updateLink, labelWrapper;\n\n                    labelText = document.createTextNode( this.model.get('label') );\n\n                    updateIcon = document.createElement( 'span' );\n                    updateIcon.classList.add( 'dashicons', 'dashicons-update' );\n\n                    updateLink = document.createElement( 'a' );\n                    updateLink.classList.add( 'extra' );\n                    updateLink.appendChild( updateIcon );\n\n                    // Wrap the label text and icon/link in a parent element.\n                    labelWrapper = document.createElement( 'span' );\n                    labelWrapper.appendChild( labelText );\n                    labelWrapper.appendChild( updateLink );\n\n                    // The model expects a string value.\n                    this.model.set('label', labelWrapper.innerHTML );\n                }\n\n\t\t\t\tnfRadio.channel( 'setting' ).trigger( 'remote', this.model, this.dataModel, this );\n\t\t\t\tthis.model.on( 'rerender', this.render, this );\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * When our drawer opens, send out a radio message on our setting type channel.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'opened', this.drawerOpened );\n\n\t\t\t/*\n\t\t\t * When our drawer closes, send out a radio message on our setting type channel.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'closed', this.drawerClosed );\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.dataModel.off( 'change:' + this.model.get( 'name' ), this.render );\n\t\t\tthis.model.off( 'change:error', this.renderError );\n\n\t\t\tvar deps = this.model.get( 'deps' );\n\t\t\tif ( deps ) {\n\t\t\t\tfor (var name in deps) {\n\t\t\t\t    if ( deps.hasOwnProperty( name ) ) {\n\t\t\t\t    \tthis.dataModel.off( 'change:' + name, this.render );\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif( this.model.get( 'remote' ) ) {\n\t\t\t\tthis.model.off( 'rerender', this.render, this );\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Send out a radio message.\n\t\t\t */\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'destroy:setting', this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'destroy:setting', this.model, this.dataModel, this );\n\t\t\n\t\t\t/*\n\t\t\t * Unescape any HTML being saved if we are a textbox.\n\t\t\t */\n\t\t\tif ( 'textbox' == this.model.get( 'type' ) ) {\n\t\t\t\tvar setting = this.model.get( 'name' );\n\t\t\t\tvar value = this.dataModel.get( setting );\n\t\t\t\tthis.dataModel.set( setting, _.unescape( value ), { silent: true } );\n\t\t\t}\n\n\t\t},\n\n\t\tonBeforeRender: function() {\n\t\t\t/*\n\t\t\t * We want to escape any HTML being output if we are a textbox.\n\t\t\t */\n\t\t\tif ( 'textbox' == this.model.get( 'type' ) ) {\n\t\t\t\tvar setting = this.model.get( 'name' );\n\t\t\t\tvar value = this.dataModel.get( setting );\n\t\t\t\tthis.dataModel.set( setting, _.escape( value ), { silent: true } );\n\t\t\t}\n\t\t\t\n\t\t\tnfRadio.channel( 'app' ).trigger( 'before:renderSetting', this.model, this.dataModel );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'before:renderSetting', this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'before:renderSetting', this.model, this.dataModel, this );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.mergeTagsContentView = false;\n\t\t\tvar that = this;\n\n\t\t\t/*\n\t\t\t * Send out a radio message.\n\t\t\t */\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'render:setting', this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'render:setting', this.model, this.dataModel, this );\n\n\t\t\tjQuery( this.el ).find( '.nf-help' ).each(function() {\n\t\t\t\tvar content = jQuery(this).next('.nf-help-text');\n\t\t\t\tjQuery( this ).jBox( 'Tooltip', {\n\t\t\t\t\tcontent: content,\n\t\t\t\t\tmaxWidth: 200,\n\t\t\t\t\ttheme: 'TooltipBorder',\n\t\t\t\t\ttrigger: 'click',\n\t\t\t\t\tcloseOnClick: true\n\t\t\t\t})\n\t\t    });\n\t\t\t\n\t\t    if ( this.model.get( 'use_merge_tags' ) ) {\n\t\t    \tnfRadio.channel( 'mergeTags' ).request( 'init', this );\n\t\t    }\n\n\t\t\t/*\n\t\t\t * Apply Setting Field Masks\n\t\t\t */\n\t\t\tvar mask = this.model.get( 'mask' );\n\n\t\t\tif( typeof mask != \"undefined\" ){\n\n\t\t\t\tvar input = jQuery( this.$el ).find( 'input' );\n\n\t\t\t\tswitch( mask.type ){\n\t\t\t\t\tcase 'numeric':\n\t\t\t\t\t\tinput.autoNumeric({\n\t\t\t\t\t\t\taSep: thousandsSeparator,\n\t\t\t\t\t\t\taDec: decimalPoint\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'currency':\n\n\t\t\t\t\t\tvar currency = nfRadio.channel( 'settings' ).request( 'get:setting', 'currency' );\n\t\t\t\t\t\tvar currencySymbol = nfAdmin.currencySymbols[ currency ] || '';\n\n\t\t\t\t\t\tinput.autoNumeric({\n\t\t\t\t\t\t\taSign:  jQuery('<div />').html(currencySymbol).text(),\n\t\t\t\t\t\t\taSep: thousandsSeparator,\n\t\t\t\t\t\t\taDec: decimalPoint\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'custom':\n\t\t\t\t\t\tif( mask.format ) input.mask( mask.format )\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// TODO: Error Logging.\n\t\t\t\t\t\tconsole.log( 'Notice: Mask type of \"' + mask.type + '\" is not supported.' );\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.renderError();\n\t\t},\n\n\t\tonShow: function() {\t\t\t\n\t\t\t/*\n\t\t\t * Send out a radio message.\n\t\t\t */\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'show:setting', this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'show:setting', this.model, this.dataModel, this );\n\t\t},\n\n\t\tonAttach: function() {\t\t\t\n\t\t\t/*\n\t\t\t * Send out a radio message.\n\t\t\t */\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'attach:setting', this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'attach:setting', this.model, this.dataModel, this );\n\t\t},\n\n\t\trenderError: function() {\n\t\t\tif ( this.model.get( 'error' ) ) {\n\t\t\t\tjQuery( this.el ).find( '.nf-setting' ).addClass( 'nf-error' );\n\t\t\t\tthis.error.show( new settingErrorView( { model: this.model } ) );\n\t\t\t} else {\n\t\t\t\tjQuery( this.el ).find( '.nf-setting' ).removeClass( 'nf-error' );\n\t\t\t\tthis.error.empty();\n\t\t\t}\n\t\t},\n\n        renderWarning: function() {\n            if ( this.model.get( 'warning' ) ) {\n                jQuery( this.el ).find( '.nf-setting' ).addClass( 'nf-warning' );\n                this.error.show( new settingErrorView( { model: this.model } ) );\n            } else {\n                jQuery( this.el ).find( '.nf-setting' ).removeClass( 'nf-warning' );\n                this.error.empty();\n            }\n        },\n\n\t\ttemplateHelpers: function () {\n\t\t\tvar that = this;\n\t    \treturn {\n\n\t    \t\trenderVisible: function() {\n\t\t\t\t\tif ( this.deps ) {\n\t\t\t\t\t\tfor (var name in this.deps) {\n\t\t\t\t\t\t    if ( this.deps.hasOwnProperty( name ) ) {\n\t\t\t\t\t\t        if ( that.dataModel.get( name ) != this.deps[ name ] ) {\n\t\t\t\t\t\t        \treturn 'style=\"display:none;\"';\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t    \t\t\treturn '';\n\t    \t\t},\n\n\t    \t\trenderSetting: function(){\n\t    \t\t\tif ( 'undefined' != typeof that.dataModel.get( this.name ) ) {\n\t    \t\t\t\tthis.value = that.dataModel.get( this.name );\n\t    \t\t\t} else if ( 'undefined' == typeof this.value ) {\n\t    \t\t\t\tthis.value = '';\n\t    \t\t\t}\n\t    \t\t\tvar setting = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-edit-setting-' + this.type );\n\t\t\t\t\treturn setting( this );\n\t\t\t\t},\n\n\t\t\t\trenderLabelClasses: function() {\n\t\t\t\t\tvar classes = '';\n\t\t\t\t\tif ( this.use_merge_tags ) {\n\t\t\t\t\t\tclasses += ' has-merge-tags';\n\t\t\t\t\t}\n\t\t\t\t\tif ( 'rte' == this.type ) {\n\t\t\t\t\t\tclasses += ' rte';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tvar classes = 'nf-setting ';\n\t\t\t\t\tif ( 'undefined' != typeof this.width ) {\n\t\t\t\t\t\tclasses += 'nf-' + this.width;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclasses += ' nf-one-half';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.error ) {\n\t\t\t\t\t\tclasses += ' nf-error';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\n\t\t\t\trenderTooltip: function() {\n\t\t\t\t\tif ( ! this.help ) return '';\n\t\t\t\t\tvar helpText, helpTextContainer, helpIcon, helpIconLink, helpTextWrapper;\n\n\t\t\t\t\thelpText = document.createTextNode( this.help );\n\t\t\t\t\thelpTextContainer = document.createElement( 'div' );\n\t\t\t\t\thelpTextContainer.classList.add( 'nf-help-text' );\n\t\t\t\t\thelpTextContainer.appendChild( helpText );\n\n\t\t\t\t\thelpIcon = document.createElement( 'span' );\n\t\t\t\t\thelpIcon.classList.add( 'dashicons', 'dashicons-admin-comments' );\n                    helpIconLink = document.createElement( 'a' );\n                    helpIconLink.classList.add( 'nf-help' );\n                    helpIconLink.setAttribute( 'href', '#' );\n                    helpIconLink.setAttribute( 'tabindex', '-1' );\n                    helpIconLink.appendChild( helpIcon );\n\n                    helpTextWrapper = document.createElement( 'span' );\n                    helpTextWrapper.appendChild( helpIconLink );\n                    helpTextWrapper.appendChild( helpTextContainer );\n\n                    // The template expects a string value.\n\t\t\t\t\treturn helpTextWrapper.innerHTML;\n\t\t\t\t},\n\n\t\t\t\trenderMergeTags: function() {\n\t\t\t\t\tif ( this.use_merge_tags && ! this.hide_merge_tags ) {\n\t\t\t\t\t\treturn '<span class=\"dashicons dashicons-list-view merge-tags\"></span>';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tevents: {\n\t\t\t'change .setting': 'changeSetting',\n\t\t\t'keyup .setting': 'keyUpSetting',\n\t\t\t'click .setting': 'clickSetting',\n\t\t\t'click .extra': 'clickExtra'\n\t\t},\n\n\t\tchangeSetting: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'change:setting', e, this.model, this.dataModel );\n\t\t},\n\n\t\tkeyUpSetting: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'keyup:setting', e, this.model, this.dataModel );\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'keyup:setting', e, this.model, this.dataModel );\n\t\t},\n\n\t\tclickSetting: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:setting', e, this.model, this.dataModel );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'click:setting', e, this.model, this.dataModel, this );\n\t\t},\n\n\t\tclickExtra: function( e ) {\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'click:extra', e, this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'name' ) ).trigger( 'click:extra', e, this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-name-' + this.model.get( 'name' ) ).trigger( 'click:extra', e, this.model, this.dataModel, this );\n\t\t},\n\n\t\tdrawerOpened: function() {\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'drawer:opened', this.model, this.dataModel, this );\n\t\t},\n\n\t\tdrawerClosed: function() {\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'drawer:closed', this.model, this.dataModel, this );\n\t\t}\n\t});\n\n\treturn view;\n} );\n\n","/**\n * Changes collection view.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/contentNewForm',['views/app/drawer/itemSetting'], function( itemSettingView) {\n\tvar view = Marionette.LayoutView.extend( {\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-content-new-form',\n\n\t\tregions: {\n\t\t\tformName: '.new-form-name',\n\t\t\tformSubmit: '.new-form-submit'\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tvar titleSettingModel = nfRadio.channel( 'settings' ).request( 'get:settingModel', 'title' );\n\t\t\tvar addSubmitSettingModel = nfRadio.channel( 'settings' ).request( 'get:settingModel', 'add_submit' );\n\t\t\tvar dataModel = nfRadio.channel( 'settings' ).request( 'get:settings' );\n\t\t\tthis.formName.show( new itemSettingView( { model: titleSettingModel, dataModel: dataModel } ) );\n\t\t\t/*\n\t\t\t * If we don't have any submit buttons on the form, prompt the user to add one on publish.\n\t\t\t */\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\tvar submitButtons = fieldCollection.findWhere( { type: 'submit' } );\n\t\t\tif ( 'undefined' == typeof submitButtons ) {\n\t\t\t\tthis.formSubmit.show( new itemSettingView( { model: addSubmitSettingModel, dataModel: dataModel } ) );\n\t\t\t} else {\n\t\t\t\tdataModel.set( 'add_submit', 0 );\n\t\t\t}\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .publish': 'clickPublish'\n\t\t},\n\n\t\tclickPublish: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:confirmPublish', e );\n\t\t}\n\t} );\n\n\treturn view;\n} );\n\n","/**\n * Handles clicks on the 'view changes' button in the header.\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/headerNewForm',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-header-new-form'\n\t});\n\n\treturn view;\n} );\n","/**\n * Config file for our app drawers.\n *\n * this.collection represents all of our registered drawers.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/drawerConfig',[\n\t'models/app/drawerCollection',\n\t'views/fields/drawer/addField',\n\t'views/app/drawer/editSettings',\n\t'views/app/drawer/headerEditSettings',\n\t'views/actions/drawer/addAction',\n\t'views/app/drawer/contentViewChanges',\n\t'views/app/drawer/headerViewChanges',\n\t'views/app/drawer/contentNewForm',\n\t'views/app/drawer/headerNewForm'\n\t], function(\n\t\tdrawerCollection,\n\t\taddFieldView,\n\t\teditSettingsView,\n\t\teditSettingsHeaderView,\n\t\taddActionView,\n\t\tviewChangesView,\n\t\tviewChangesHeaderView,\n\t\tnewFormView,\n\t\tnewFormHeaderView,\n\t\tmobileItemControlsView\n\t) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\n\t\t\tthis.collection = new drawerCollection( [\n\t\t\t\t{\n\t\t\t\t\tid: 'addField',\n\n\t\t\t\t\tgetContentView: function( data ) {\n\t\t\t\t\t\treturn new addFieldView( data );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 'addAction',\n\n\t\t\t\t\tgetContentView: function( data ) {\n\t\t\t\t\t\treturn new addActionView( data );\n\t\t\t\t\t}\n\t\t\t\t},\t\t\t\t\n\t\t\t\t{\n\t\t\t\t\tid: 'editSettings',\n\n\t\t\t\t\t/*\n\t\t\t\t\t * TODO: Add filtering when editing settings. For now, removing them from settings.\n\t\t\t\t\t */\n\t\t\t\t\tgetHeaderView: function( data ) {\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * Get a custom setting header view if one is set.\n\t\t\t\t\t\t * TODO: Currently, this only works for advanced settings.\n\t\t\t\t\t\t * This could be used to replace the need for a single config file.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tif ( 'undefined' != typeof data.typeModel ) {\n\t\t\t\t\t\t\tvar view = nfRadio.channel( data.typeModel.get( 'id' ) ).request( 'get:drawerHeaderView' ) || editSettingsHeaderView;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar view = editSettingsHeaderView;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn new view( data );\n\t\t\t\t\t},\n\n\t\t\t\t\tgetContentView: function( data ) {\n\t\t\t\t\t\treturn new editSettingsView( data );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 'viewChanges',\n\n\t\t\t\t\t// getHeaderView() is defined by default, but we need to override it for the viewChanges drawer.\n\t\t\t\t\tgetHeaderView: function( data ) {\n\t\t\t\t\t\treturn new viewChangesHeaderView( data );\n\t\t\t\t\t},\n\n\t\t\t\t\tgetContentView: function( data ) {\n\t\t\t\t\t\treturn new viewChangesView( data );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 'newForm',\n\n\t\t\t\t\t// getHeaderView() is defined by default, but we need to override it for the newForm drawer.\n\t\t\t\t\tgetHeaderView: function( data ) {\n\t\t\t\t\t\treturn new newFormHeaderView( data );\n\t\t\t\t\t},\n\n\t\t\t\t\tgetContentView: function( data ) {\n\t\t\t\t\t\treturn new newFormView( data );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t] );\n\n\t\t\t// Listen for requests for our drawer collection.\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:drawerCollection', this.getDrawerCollection, this );\n\t\t\t// Listen for requests for specific drawer models.\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:drawer', this.getDrawer, this );\n\t\t},\n\n\t\tgetDrawerCollection: function() {\n\t\t\treturn this.collection;\n\t\t},\n\n\t\tgetDrawer: function( id ) {\n\t\t\treturn this.collection.get( id );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Default settings title view.\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/defaultSettingsTitle',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-content-edit-settings-title-default',\n\n\t\ttemplateHelpers: function () {\n\t    \treturn {\n\t    \t\trenderTypeNicename: function() {\n\t    \t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\t\t\tvar domainID = currentDomain.get( 'id' );\n\t    \t\t\tvar type = nfRadio.channel( domainID ).request( 'get:type', this.type );\n\t    \t\t\tif ( 'undefined' != typeof type ) {\n\t    \t\t\t\treturn type.get( 'nicename' );\n\t    \t\t\t} else {\n\t    \t\t\t\treturn '';\n\t    \t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t});\n\n\treturn view;\n} );\n","/**\n * Empty view.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/empty',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-empty'\n\t});\n\n\treturn view;\n} );\n","/**\n * Model for our individual domains.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/domainModel',[ 'views/app/drawer/defaultSettingsTitle', 'views/app/empty' ], function( DefaultSettingsTitleView, EmptyView ) {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tdashicons: '',\n\t\t\tclasses: '',\n\t\t\tactive: false,\n\t\t\turl: '',\n\t\t\thotkeys: false,\n\t\t\tdisabled: false,\n\n\t\t\tgetSettingsTitleView: function( data ) {\n\t\t\t\treturn new DefaultSettingsTitleView( data );\n\t\t\t},\n\n\t\t\tgetDefaultSettingsTitleView: function( data ) {\n\t\t\t\treturn new DefaultSettingsTitleView( data );\n\t\t\t},\n\n\t\t\tgetGutterLeftView: function( data ) {\n\t\t\t\t/*\n\t\t\t\t * Return empty view\n\t\t\t\t */\n\t\t\t\treturn new EmptyView();\n\t\t\t},\n\n\t\t\tgetGutterRightView: function( data ) {\n\t\t\t\t/* \n\t\t\t\t * Return empty view\n\t\t\t\t */\n\t\t\t\treturn new EmptyView();\n\t\t\t}\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Holds all of our domain models.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/domainCollection',['models/app/domainModel'], function( domainModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: domainModel\n\t} );\n\treturn collection;\n} );\n","define( 'views/fields/subHeader',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-sub-header-fields'\n\t});\n\n\treturn view;\n} );\n","define( 'views/fields/mainContentFieldCollection',[], function() {\n\tvar view = Marionette.CollectionView.extend( {\n\t\ttagName: 'div',\n\t\treorderOnSort: true,\n\n\t\tgetChildView: function() {\n\t\t\treturn nfRadio.channel( 'views' ).request( 'get:fieldItem' );\n\t\t},\n\n\t\tgetEmptyView: function() {\n\t\t\treturn nfRadio.channel( 'views' ).request( 'get:mainContentEmpty' );\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:sortableEl', this.getSortableEl, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'init:sortable', this.initSortable, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'destroy:sortable', this.destroySortable, this );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tif ( this.collection.models.length > 0 ) {\n\t\t\t\tjQuery( this.el ).addClass( 'nf-field-type-droppable' ).addClass( 'nf-fields-sortable' );\n\t\t\t\tvar that = this;\n\t\t\t\t/* TODO: There's a bug with some Android phones and chrome. The fix below hasn't been implement.\n\n\t\t\t\t * Instantiate our sortable field list, but only if we aren't on a mobile device.\n\t\t\t\t *\n\t\t\t\t * On Android, our sortable list isn't scrollable if it's instantiated at render.\n\t\t\t\t * Instead, for mobile, we need to instantiate our sortable when the user tapholds and then\n\t\t\t\t * destroy it when the drag stops.\n\t\t\t\t */\n\t\t\t\t// if ( ! nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\t\tthis.initSortable();\n\t\t\t\t// }\n\t\t\t}\n\t\t\tnfRadio.channel( 'app' ).trigger( 'render:fieldsSortable', this );\n\t\t},\n\n\t\tgetSortableEl: function() {\n\t\t\treturn this.el;\n\t\t},\n\n\t\tinitSortable: function() {\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tvar tolerance = 'pointer';\n\t\t\t} else {\n\t\t\t\tvar tolerance = 'intersect';\n\t\t\t}\n\n\t\t\tjQuery( this.el ).sortable( {\n\t\t\t\t//containment: '#nf-main',\n\t\t\t\thelper: 'clone',\n\t\t\t\tcancel: '.nf-item-controls',\n\t\t\t\tplaceholder: 'nf-fields-sortable-placeholder',\n\t\t\t\topacity: 0.95,\n\t\t\t\tgrid: [ 5, 5 ],\n\t\t\t\t// scroll: false,\n\t\t\t\tappendTo: '#nf-main',\n\t\t\t\tscrollSensitivity: 10,\n\n\t\t\t\treceive: function( e, ui ) {\n\t\t\t\t\tif ( ui.item.dropping ) return;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'receive:fieldsSortable', ui );\n\t\t\t\t},\n\n\t\t\t\tover: function( e, ui ) {\n\t\t\t\t\tif ( ui.item.dropping ) return;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'over:fieldsSortable', ui );\n\t\t\t\t},\n\n\t\t\t\tout: function( e, ui ) {\n\t\t\t\t\tif ( ui.item.dropping ) return;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'out:fieldsSortable', ui );\n\t\t\t\t},\n\n\t\t\t\tstart: function( e, ui ) {\n\t\t\t\t\tif ( ui.item.dropping ) return;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'start:fieldsSortable', ui );\n\t\t\t\t},\n\n\t\t\t\tupdate: function( e, ui ) {\n\t\t\t\t\tif ( ui.item.dropping ) return;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:fieldsSortable', ui, this );\n\t\t\t\t},\n\n\t\t\t\tstop: function( e, ui ) {\n\t\t\t\t\tif ( ui.item.dropping ) return;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'stop:fieldsSortable', ui );\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\n\t\tdestroySortable: function() {\n\t\t\tjQuery( this.el ).sortable( 'destroy' );\n\t\t},\n\n\t\tonAddChild: function( childView ) {\n\t\t\tif ( nfRadio.channel( 'fields' ).request( 'get:adding' ) ) {\n\t\t\t\tchildView.$el.hide().show( 'clip' );\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'set:adding', false );\n\t\t\t}\n\t\t}\n\t\t\n\t} );\n\n\treturn view;\n} );\n\n","define( 'views/fields/drawer/addSavedField',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-add-saved-field',\n\n\t\tinitialize: function() {\n\t\t\tthis.model.on( 'change:addSavedLoading', this.renderAddButton, this );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.renderAddButton();\n\t\t},\n\n\t\trenderAddButton: function() {\n\t\t\tif ( this.model.get( 'addSavedLoading' ) ) {\n\t\t\t\tvar button = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-add-saved-field-loading' );\n\t\t\t} else {\n\t\t\t\tvar button = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-add-saved-field-button' );\n\t\t\t}\n\t\t\tjQuery( this.el ).find( '.add-button' ).html( button( this ) );\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change:addSavedLoading', this.render );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .nf-button': 'clickAddSavedField'\n\t\t},\n\n\t\tclickAddSavedField: function( e ) {\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'click:addSavedField', e, this.model );\n\t\t}\n\t});\n\n\treturn view;\n} );\n\n","/**\n * Fields settings title view.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/fields/drawer/settingsTitle',['views/fields/drawer/addSavedField'], function( addSavedFieldView ) {\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-content-edit-settings-title-fields',\n\n\t\tinitialize: function() {\n\t\t\tthis.model.on( 'change:saved', this.render, this );\n\t\t\tthis.model.on( 'change:label', this.renderjBoxContent, this );\n\t\t},\n\n\t\tregions: {\n\t\t\taddSaved: '.nf-add-saved-field'\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change:saved', this.render );\n\t\t\tthis.addSavedjBox.destroy();\n\t\t\tthis.model.unset( 'jBox', { silent: true } );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.renderjBoxContent();\n\t\t\tvar that = this;\n\t\t\tthis.addSavedjBox = new jBox( 'Tooltip', {\n\t\t\t\ttrigger: 'click',\n\t\t\t\ttitle: 'Add to Saved Fields',\n\t\t\t\tposition: {\n\t\t\t\t\tx:'left',\n\t\t\t\t\ty:'center'\n\t\t\t\t},\n\t\t\t\toutside:'x',\n\t\t\t\tcloseOnClick: 'body',\n\n\t\t\t\tonCreated: function() {\n\t\t\t\t\tthis.setContent( jQuery( that.el ).find( '.nf-add-saved-field' ) );\n\t\t\t\t}\n\t\t\t} );\n\t\t\tthis.addSavedjBox.attach( jQuery( this.el ).find( '.dashicons') );\n\t\t\tthis.model.set( 'jBox', this.addSavedjBox, { silent: true } );\n\t\t},\n\n\t\trenderjBoxContent: function() {\n\t\t\tif ( this.addSaved ) {\n\t\t\t\tthis.addSaved.show( new addSavedFieldView( { model: this.model } ) );\n\t\t\t}\n\t\t},\n\n\t\ttemplateHelpers: function () {\n\t    \treturn {\n\t    \t\trenderTypeNicename: function() {\n\t    \t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\t\t\tvar domainID = currentDomain.get( 'id' );\n\t    \t\t\tvar type = nfRadio.channel( domainID ).request( 'get:type', this.type );\n\t    \t\t\tvar displayName = type.get( 'nicename' );\n\n\t    \t\t\tif ( this.saved ) {\n\t    \t\t\t\tvar realType = nfRadio.channel( domainID ).request( 'get:type', type.get( 'type' ) );\n\t    \t\t\t\tdisplayName += ' - ' + realType.get( 'nicename' );\n\t    \t\t\t}\n\t    \t\t\treturn displayName;\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\trenderSavedStar: function() {\n\t\t\t\t\tif ( this.saved ) {\n\t\t\t\t\t\tvar star = 'filled';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar star = 'empty';\n\t\t\t\t\t}\n\t\t\t\t\treturn '<span class=\"dashicons dashicons-star-' + star + '\"></span>'\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Add main header.\n *\n * TODO: make dynamic\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/actions/mainHeader',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-main-header-actions',\n\n\t\tinitialize: function() {\n\t\t\tvar actionCollection = nfRadio.channel( 'actions' ).request( 'get:collection' );\n\t\t\tthis.listenTo( actionCollection, 'add', this.render );\n\t\t\tthis.listenTo( actionCollection, 'remove', this.render );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tvar actionCollection = nfRadio.channel( 'actions' ).request( 'get:collection' );\n\t\t\tif ( actionCollection.models.length == 0 ) {\n\t\t\t\tjQuery( this.el ).hide();\n\t\t\t} else {\n\t\t\t\tjQuery( this.el ).show();\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Actions subheader view.\n *\n * TODO: make dynamic\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/actions/subHeader',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-sub-header-actions'\n\t});\n\n\treturn view;\n} );\n","/**\n * Renders an application menu item from a domain model.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/itemControls',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-item-controls',\n\n\t\tinitialize: function() {\n\t\t\t// Listen for domain changes and re-render when we detect one.\n\t\t\t// this.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.render );\n\t\t},\n\n\t\t/**\n\t\t * When we render this view, remove the extra <div> tag created by backbone.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tonRender: function() {\n\t\t\t// this.$el = this.$el.children();\n\t\t\t// this.$el.unwrap();\n\t\t\t// this.setElement( this.$el );\n\t\t\t// \n\t\t\tthis.currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t},\n\n\t\tevents: {\n\t\t\t'mouseover .nf-item-control': 'mouseoverItemControl',\n\t\t\t'click .nf-edit-settings': 'clickEdit',\n\t\t\t'singletap .nf-item-control': 'singleTapEdit',\n\t\t\t'click .nf-item-delete': 'clickDelete',\n\t\t\t'click .nf-item-duplicate': 'clickDuplicateField'\n\t\t},\n\n\t\tclickEdit: function( e ) {\n\t\t\tif ( ! nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', e, this.model );\n\t\t\t}\n\t\t},\n\n\t\tsingleTapEdit: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', e, this.model );\n\t\t},\n\n\t\tclickDelete: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:delete', e, this.model );\n\t\t},\n\n\t\tclickDuplicateField: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:duplicate', e, this.model );\n\t\t},\n\n\t\tmouseoverItemControl: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'mouseover:itemControl', e, this.model );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Single action table row\n *\n * TODO: make dynamic\n *\n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/actions/actionItem',['views/app/itemControls'], function( itemControlsView ) {\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'tr',\n\t\ttemplate: '#tmpl-nf-action-item',\n\n\t\tregions: {\n\t\t\titemControls: '.nf-item-controls'\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.template = nfRadio.channel( 'actions' ).request( 'get:actionItemTemplate' ) || this.template;\n\t\t\tthis.model.on( 'change:label', this.render, this );\n\t\t\tthis.model.on( 'change:editActive', this.render, this );\n\t\t\tthis.model.on( 'change:active', this.maybeDeactivate, this );\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change:label', this.render );\n\t\t\tthis.model.off( 'change:editActive', this.render );\n\t\t\tthis.model.off( 'change:active', this.maybeDeactivate );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tif ( this.model.get( 'editActive' ) ) {\n\t\t\t\tjQuery( this.el ).addClass( 'active' );\n\t\t\t} else {\n\t\t\t\tjQuery( this.el ).removeClass( 'active' );\n\t\t\t}\n\n\t\t\tthis.maybeDeactivate();\n\n\t\t\tthis.itemControls.show( new itemControlsView( { model: this.model } ) );\n\t\t},\n\n\t\tmaybeDeactivate: function() {\n\t\t\tif ( 0 == this.model.get( 'active' ) ) {\n\t\t\t\tjQuery( this.el ).addClass( 'deactivated' );\n\t\t\t} else {\n\t\t\t\tjQuery( this.el ).removeClass( 'deactivated' );\n\t\t\t}\n\t\t},\n\n\t\tevents: {\n\t\t\t'change input': 'changeToggle',\n\t\t\t'click': 'maybeClickEdit'\n\t\t},\n\n\t\tmaybeClickEdit: function( e ) {\n\t\t\tif ( 'TR' == jQuery( e.target ).parent().prop( 'tagName' ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', e, this.model );\n\t\t\t}\n\t\t},\n\n\t\tchangeToggle: function( e ) {\n\t\t\tvar setting = jQuery( e.target ).data( 'setting' );\n\t\t\tvar settingModel = nfRadio.channel( 'actions' ).request( 'get:settingModel', setting );\n\t\t\tconsole.log( settingModel );\n\t\t\tconsole.log( this.model );\n\t\t\tnfRadio.channel( 'app' ).request( 'change:setting', e, settingModel, this.model );\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\trenderToggle: function( settingName ) {\n\t\t\t\t\tthis.settingName = settingName || 'active';\n\t\t\t\t\tvar actionLabel = this.label;\n\t\t\t\t\tthis.label = '';\n\t\t\t\t\tthis.value = this[ this.settingName ];\n\t\t\t\t\tthis.name = this.id + '-' + this.settingName;\n\t\t\t\t\tvar html = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-edit-setting-toggle' );\n\t\t\t\t\thtml = html( this );\n\t\t\t\t\tthis.label = actionLabel;\n\t\t\t\t\treturn html;\n\t\t\t\t},\n\n\t\t\t\trenderTypeNicename: function() {\n\t\t\t\t\tvar type = nfRadio.channel( 'actions' ).request( 'get:type', this.type );\n\t\t\t\t\tif ( 'undefined' == typeof type ) return;\n\n\t\t\t\t\treturn type.get( 'nicename' );\n\t\t\t\t},\n\n                /**\n\t\t\t\t * [Deprecated] Tooltips are not currently implemented in the context of the action list.\n\t\t\t\t *   However, the template uses a nested template which requires the helper method.\n                 * @returns {string}\n                 */\n\t\t\t\trenderTooltip: function() {\n\t\t\t\t\treturn '';\n\t\t\t\t},\n\n\t\t\t\trenderMergeTags: function() {\n\t\t\t\t\tif ( this.use_merge_tags ) {\n\t\t\t\t\t\treturn '<span class=\"dashicons dashicons-list-view merge-tags\"></span>';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n\n","define( 'views/actions/mainContentEmpty',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-main-content-actions-empty',\n\n\t\tonBeforeDestroy: function() {\n\t\t\tjQuery( this.el ).parent().parent().removeClass( 'nf-actions-empty' );\n\t\t\t// jQuery( this.el ).parent().removeClass( 'nf-fields-empty-droppable' ).droppable( 'destroy' );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tjQuery( this.el ).parent().parent().addClass( 'nf-actions-empty' );\n\t\t\t// if ( jQuery( this.el ).parent().hasClass( 'ui-sortable' ) ) {\n\t\t\t// \tjQuery( this.el ).parent().sortable( 'destroy' );\n\t\t\t// }\n\t\t\t// jQuery( this.el ).parent().addClass( 'nf-fields-empty-droppable' );\n\t\t\t// jQuery( this.el ).parent().droppable( {\n\t\t\t// \taccept: function( draggable ) {\n\t\t\t// \t\tif ( jQuery( draggable ).hasClass( 'nf-stage' ) || jQuery( draggable ).hasClass( 'nf-field-type-button' ) ) {\n\t\t\t// \t\t\treturn true;\n\t\t\t// \t\t}\n\t\t\t// \t},\n\t\t\t// \thoverClass: 'nf-droppable-hover',\n\t\t\t// \ttolerance: 'pointer',\n\t\t\t// \tover: function( e, ui ) {\n\t\t\t// \t\tui.item = ui.draggable;\n\t\t\t// \t\tnfRadio.channel( 'app' ).request( 'over:fieldsSortable', ui );\n\t\t\t// \t},\n\t\t\t// \tout: function( e, ui ) {\n\t\t\t// \t\tui.item = ui.draggable;\n\t\t\t// \t\tnfRadio.channel( 'app' ).request( 'out:fieldsSortable', ui );\n\t\t\t// \t},\n\t\t\t// \tdrop: function( e, ui ) {\n\t\t\t// \t\tui.item = ui.draggable;\n\t\t\t// \t\tnfRadio.channel( 'app' ).request( 'receive:fieldsSortable', ui );\n\t\t\t// \t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t// \t\tfieldCollection.trigger( 'reset', fieldCollection );\n\t\t\t// \t},\n\t\t\t// } );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Main content view for our actions.\n *\n * TODO: make dynamic\n *\n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/actions/mainContent',['views/actions/actionItem', 'views/actions/mainContentEmpty'], function( actionView, emptyView ) {\n\tvar view = Marionette.CompositeView.extend({\n\t\ttemplate: '#tmpl-nf-action-table',\n\t\tchildView: actionView,\n\t\temptyView: emptyView,\n\n\t\tinitialize: function() {\n\t\t\tthis.template = nfRadio.channel( 'actions' ).request( 'get:mainContentTemplate' ) || this.template;\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tjQuery( this.el ).droppable( {\n\t\t\t\taccept: '.nf-action-type-draggable',\n\t\t\t\tactiveClass: 'nf-droppable-active',\n\t\t\t\thoverClass: 'nf-droppable-hover',\n\t\t\t\tdrop: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'drop:actionType', e, ui );\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\n\t\tattachHtml: function( collectionView, childView ) {\n\t\t\tif ( 'undefined' == typeof nfRadio.channel( 'actions' ).request( 'get:type', childView.model.get( 'type' ) ) ) return;\n\n\t\t\tjQuery( collectionView.el ).find( 'tbody' ).append( childView.el );\n\t\t},\n\t});\n\n\treturn view;\n} );\n\n","define( 'views/advanced/mainHeader',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-main-header-settings'\n\t});\n\n\treturn view;\n} );\n","define( 'views/advanced/subHeader',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-sub-header-settings'\n\t});\n\n\treturn view;\n} );\n","define( 'views/advanced/settingItem',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-form-setting-type',\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change:editActive', this.updateActiveClass );\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.model.on( 'change:editActive', this.updateActiveClass, this );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click': 'clickEdit'\n\t\t},\n\n\t\tclickEdit: function( e ) {\n\t\t\tnfRadio.channel( 'settings' ).trigger( 'click:edit', e, this.model );\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tvar classes = 'nf-setting-wrap ' + this.id;\n\t    \t\t\tif ( this.editActive ) {\n\t    \t\t\t\tclasses += ' active';\n\t    \t\t\t}\n\t    \t\t\treturn classes;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tupdateActiveClass: function() {\n\t\t\tif ( this.model.get( 'editActive' ) ) {\n\t\t\t\tjQuery( this.el ).find( '.nf-setting-wrap' ).addClass( 'active' );\n\t\t\t} else {\n\t\t\t\tjQuery( this.el ).find( '.nf-setting-wrap' ).removeClass( 'active' );\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n","define( 'views/advanced/mainContent',['views/advanced/settingItem'], function( settingItem ) {\n\tvar view = Marionette.CollectionView.extend({\n\t\tchildView: settingItem\n\t\t\n\t});\n\n\treturn view;\n} );\n","/**\n * Model that represents our form fields.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/fields/fieldModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tobjectType: 'Field',\n\t\t\tobjectDomain: 'fields',\n\t\t\teditActive: false,\n\t\t\torder: 999\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tif ( 'undefined' == typeof this.get( 'type' ) ) return;\n\n\t\t\t// Listen for model attribute changes\n\t\t\tthis.on( 'change', this.changeSetting, this );\n\n\t\t\t// Get our parent field type.\n\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', this.get( 'type' ) );\n\t\t\tvar parentType = fieldType.get( 'parentType' );\n\n\t\t\t// Loop through our field type \"settingDefaults\" and add any default settings.\n\t\t\t_.each( fieldType.get( 'settingDefaults' ), function( val, key ) {\n\t\t\t\tif ( 'undefined' == typeof this.get( key ) ) {\n\t\t\t\t\tthis.set( key, val, { silent: true } );\n\t\t\t\t}\n\t\t\t}, this );\n\n\t\t\t/*\n\t\t\t * If our field type is a saved field, set our field type to the actual field type\n\t\t\t */\n\t\t\tif ( 'saved' == fieldType.get( 'section' ) ) {\n\t\t\t\tthis.set( 'type', fieldType.get( 'type' ) );\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Trigger an init event on three channels:\n\t\t\t * \n\t\t\t * fields\n\t\t\t * fields-parentType\n\t\t\t * field-type\n\t\t\t *\n\t\t\t * This lets specific field types modify model attributes before anything uses them.\n\t\t\t */ \n\t\t\tnfRadio.channel( 'fields' ).trigger( 'init:fieldModel', this );\n\t\t\tnfRadio.channel( 'fields-' + parentType ).trigger( 'init:fieldModel', this );\n\t\t\tnfRadio.channel( 'fields-' + this.get( 'type' ) ).trigger( 'init:fieldModel', this );\n\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'fire:updateFieldKey', this.updateFieldKey );\n\t\t},\n\n\t\t/**\n\t\t * Fires an event on the fieldSetting-{name} channel saying we've updated a setting.\n\t\t * When we change the model attributes, fire an event saying we've changed something.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tchangeSetting: function( model, options ) {\n\t\t\tnfRadio.channel( 'fieldSetting-' + _.keys( model.changedAttributes() )[0] ).trigger( 'update:setting', this, options.settingModel ) ;\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'update:setting', this, options.settingModel );\n\t\t\tnfRadio.channel( 'app' ).trigger( 'update:setting', this, options.settingModel );\n\t\t},\n\n\t\tupdateFieldKey: function( keyModel, settingModel ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'replace:fieldKey', this, keyModel, settingModel );\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collection that holds our field models.\n * This is the actual field data created by the user.\n *\n * We listen to the add and remove events so that we can push the new id to either the new fields or removed fields property.\n *\n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/fields/fieldCollection',['models/fields/fieldModel'], function( fieldModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: fieldModel,\n\t\tcomparator: function( model ){\n\t\t\treturn parseInt( model.get( 'order' ) );\n\t\t},\n\t\ttmpNum: 1,\n\n\t\tinitialize: function() {\n\t\t\tthis.on( 'add', this.addField, this );\n\t\t\tthis.on( 'remove', this.removeField, this );\n\n\t\t\tthis.listenTo( this, 'add:field', this.addNewField );\n\t\t\tthis.listenTo( this, 'append:field', this.appendNewField );\n\t\t\tthis.listenTo( this, 'remove:field', this.removeFieldResponse );\n\t\t\tthis.newIDs = [];\n\t\t},\n\n\t\t/**\n\t\t * When we add a field, push the id onto our new fields property.\n\t\t * This lets us tell the server that this is a new field to be added rather than a field to be updated.\n\t\t *\n\t\t * @since 3.0\n\t\t * @param void\n\t\t */\n\t\taddField: function( model ) {\n\t\t\tthis.newIDs.push( model.get( 'id' ) );\n\t\t},\n\n\t\t/**\n\t\t * When we remove a field, push the id onto our removed fields property.\n\t\t *\n\t\t * @since 3.0\n\t\t * @param void\n\t\t */\n\t\tremoveField: function( model ) {\n\t\t\tthis.removedIDs = this.removedIDs || {};\n\t\t\tthis.removedIDs[ model.get( 'id' ) ] = model.get( 'id' );\n\t\t},\n\n\t\taddNewField: function( model ) {\n\t\t\tthis.add( model );\n\t\t},\n\n\t\tappendNewField: function( model ) {\n\t\t\tif ( 0 == this.length ) {\n\t\t\t\tvar order = 0;\n\t\t\t} else {\n\t\t\t\tvar order = this.at( this.length -1 ).get( 'order' ) + 1;\n\t\t\t}\n\n\t\t\tmodel.set( 'order', order, { silent: true } );\n\t\t\tthis.add( model );\n\t\t},\n\n\t\tremoveFieldResponse: function( model ) {\n\t\t\tthis.remove( model );\n\t\t},\n\n\t\tfieldExists: function( fieldModel ) {\n\t\t\treturn -1 != this.indexOf( fieldModel );\n\t\t}\n\t} );\n\treturn collection;\n} );\n\n","/**\n * Config file for our app domains.\n * \n * this.collection represents all of our app domain (fields, actions, settings) information.\n *\n * This doesn't store the current domain, but rather all the data about each.\n * \n * This data includes:\n * hotkeys\n * header view\n * subheader view\n * content view\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/domainConfig',[\n\t// Require our domain collection\n\t'models/app/domainCollection',\n\t// Require our fields domain files\n\t'views/fields/subHeader',\n\t'views/fields/mainContentFieldCollection',\n\t'views/fields/drawer/settingsTitle',\n\t// Require our actions domain files\n\t'views/actions/mainHeader', \n\t'views/actions/subHeader',\n\t'views/actions/mainContent',\n\t// Require our settings domain files\n\t'views/advanced/mainHeader',\n\t'views/advanced/subHeader',\n\t'views/advanced/mainContent',\n\t// Empty View\n\t'views/app/empty',\n\t// FieldCollection: used by the default formContentData filter\n\t'models/fields/fieldCollection'\n\t], \n\tfunction( \n\t\tappDomainCollection,\n\t\tfieldsSubHeaderView,\n\t\tFieldsMainContentFieldCollectionView,\n\t\tfieldsSettingsTitleView,\n\t\tactionsMainHeaderView,\n\t\tactionsSubHeaderView,\n\t\tactionsMainContentView,\n\t\tsettingsMainHeaderView,\n\t\tsettingsSubHeaderView,\n\t\tsettingsMainContentView,\n\t\tEmptyView,\n\t\tFieldCollection\n\t) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * Add our default formContentView filter.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContent' ).request( 'add:viewFilter', this.defaultFormContentView, 10, this );\n\t\t\t\n\t\t\t/*\n\t\t\t * Add our default formContentData filter.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContent' ).request( 'add:loadFilter', this.defaultFormContentLoad, 10, this );\n\n\t\t\t/*\n\t\t\t * Add our default formContentGutterView filters.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContentGutters' ).request( 'add:leftFilter', this.defaultFormContentGutterView, 10, this );\n\t\t\tnfRadio.channel( 'formContentGutters' ).request( 'add:rightFilter', this.defaultFormContentGutterView, 10, this );\n\n\t\t\t// Define our app domains\n\t\t\tthis.collection = new appDomainCollection( [\n\t\t\t\t{\n\t\t\t\t\tid: 'fields',\n\t\t\t\t\tnicename: nfi18n.domainFormFields,\n\t\t\t\t\thotkeys: {\n\t\t\t\t\t\t'Esc'\t\t\t\t: 'close:drawer',\n\t\t\t\t\t\t'Ctrl+Shift+n'\t\t: 'add:newField',\n\t\t\t\t\t\t'Ctrl+Shift+a'\t\t: 'changeDomain:actions',\n\t\t\t\t\t\t'Ctrl+Shift+s'\t\t: 'changeDomain:settings',\n\t\t\t\t\t\t'Alt+Ctrl+t'\t\t: 'open:mergeTags',\n\t\t\t\t\t\t'up'\t\t\t\t: 'up:mergeTags',\n\t\t\t\t\t\t'down'\t\t\t\t: 'down:mergeTags',\n\t\t\t\t\t\t'Shift+return'\t\t: 'return:mergeTags'\n\t\t\t\t\t},\n\t\t\t\t\tmobileDashicon: 'dashicons-menu',\n\n\t\t\t\t\tgetSubHeaderView: function() {\n\t\t\t\t\t\treturn new fieldsSubHeaderView();\n\t\t\t\t\t},\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Get the formContent view that should be used in our builder.\n\t\t\t\t\t * Uses two filters:\n\t\t\t\t\t * 1) One for our formContentData\n\t\t\t\t\t * 2) One for our formContentView\n\t\t\t\t\t *\n\t\t\t\t\t * If we don't have any view filters, we use the default formContentView.\n\t\t\t\t\t * \n\t\t\t\t\t * @since  3.0\n\t\t\t\t\t * @return formContentView backbone view.\n\t\t\t\t\t */\n\t\t\t\t\tgetMainContentView: function( collection ) {\n\t\t\t\t\t\tvar formContentData = nfRadio.channel( 'settings' ).request( 'get:setting', 'formContentData' );\n\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * As of version 3.0, 'fieldContentsData' has deprecated in favour of 'formContentData'.\n\t\t\t\t\t\t * If we don't have this setting, then we check for this deprecated value.\n\t\t\t\t\t\t * \n\t\t\t\t\t\t * Set our fieldContentsData to our form setting 'fieldContentsData'\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * TODO: Remove this backwards compatibility eventually.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tif ( ! formContentData ) {\n\t\t\t\t\t\t\tformContentData = nfRadio.channel( 'settings' ).request( 'get:setting', 'fieldContentsData' );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * If we don't have a filter for our formContentData, default to fieldCollection.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tvar formContentLoadFilters = nfRadio.channel( 'formContent' ).request( 'get:loadFilters' );\n\t\t\t\t\t\t\n\t\t\t\t\t\t/* \n\t\t\t\t\t\t* Get our first filter, this will be the one with the highest priority.\n\t\t\t\t\t\t*/\n\t\t\t\t\t\tvar sortedArray = _.without( formContentLoadFilters, undefined );\n\t\t\t\t\t\tvar callback = _.first( sortedArray );\n\t\t\t\t\t\tformContentData = callback( formContentData, nfRadio.channel( 'app' ).request( 'get:formModel' ), true );\n\t\t\t\t\t\t\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * Check our fieldContentViewsFilter to see if we have any defined.\n\t\t\t\t\t\t * If we do, overwrite our default with the view returned from the filter.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tvar formContentViewFilters = nfRadio.channel( 'formContent' ).request( 'get:viewFilters' );\n\t\t\t\t\t\t\n\t\t\t\t\t\t/* \n\t\t\t\t\t\t* Get our first filter, this will be the one with the highest priority.\n\t\t\t\t\t\t*/\n\t\t\t\t\t\tvar sortedArray = _.without( formContentViewFilters, undefined );\n\t\t\t\t\t\tvar callback = _.first( sortedArray );\n\t\t\t\t\t\tformContentView = callback();\n\n\t\t\t\t\t\tnfRadio.channel( 'settings' ).request( 'update:setting', 'formContentData', formContentData, true );\n\t\t\t\t\t\treturn new formContentView( { collection: formContentData } );\n\t\t\t\t\t},\n\n\t\t\t\t\tgetSettingsTitleView: function( data ) {\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * If we are dealing with a field model, return the fields settings view, otherwise, return the default.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tif ( 'fields' == data.model.get( 'objectDomain' ) ) {\n\t\t\t\t\t\t\treturn new fieldsSettingsTitleView( data );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn this.get( 'getDefaultSettingsTitleView' ).call( this, data );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t},\n\n\t\t\t\t\tgetGutterLeftView: function( data ) {\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * Check our fieldContentViewsFilter to see if we have any defined.\n\t\t\t\t\t\t * If we do, overwrite our default with the view returned from the filter.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tvar gutterFilters = nfRadio.channel( 'formContentGutters' ).request( 'get:leftFilters' );\n\n\t\t\t\t\t\t/* \n\t\t\t\t\t\t* Get our first filter, this will be the one with the highest priority.\n\t\t\t\t\t\t*/\n\t\t\t\t\t\tvar sortedArray = _.without( gutterFilters, undefined );\n\t\t\t\t\t\tvar callback = _.first( sortedArray );\n\t\t\t\t\t\tgutterView = callback();\n\n\t\t\t\t\t\treturn new gutterView(); \n\t\t\t\t\t},\n\n\t\t\t\t\tgetGutterRightView: function() {\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * Check our fieldContentViewsFilter to see if we have any defined.\n\t\t\t\t\t\t * If we do, overwrite our default with the view returned from the filter.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tvar gutterFilters = nfRadio.channel( 'formContentGutters' ).request( 'get:rightFilters' );\n\t\t\t\t\t\t\n\t\t\t\t\t\t/* \n\t\t\t\t\t\t* Get our first filter, this will be the one with the highest priority.\n\t\t\t\t\t\t*/\n\t\t\t\t\t\tvar sortedArray = _.without( gutterFilters, undefined );\n\t\t\t\t\t\tvar callback = _.first( sortedArray );\n\t\t\t\t\t\tgutterView = callback();\n\n\t\t\t\t\t\treturn new gutterView(); \n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 'actions',\n\t\t\t\t\tnicename: nfi18n.domainActions,\n\t\t\t\t\thotkeys: {\n\t\t\t\t\t\t'Esc'\t\t\t\t: 'close:drawer',\n\t\t\t\t\t\t'Ctrl+Shift+n'\t\t: 'add:newAction',\n\t\t\t\t\t\t'Ctrl+Shift+f'\t\t: 'changeDomain:fields',\n\t\t\t\t\t\t'Ctrl+Shift+s'\t\t: 'changeDomain:settings',\n\t\t\t\t\t\t'Alt+Ctrl+t'\t\t: 'open:mergeTags',\n\t\t\t\t\t\t'up'\t\t\t\t: 'up:mergeTags',\n\t\t\t\t\t\t'down'\t\t\t\t: 'down:mergeTags',\n\t\t\t\t\t\t'Shift+return'\t\t: 'return:mergeTags'\n\t\t\t\t\t},\n\t\t\t\t\tmobileDashicon: 'dashicons-external',\n\n\t\t\t\t\tgetSubHeaderView: function() {\n\t\t\t\t\t\treturn new actionsSubHeaderView();\n\t\t\t\t\t},\n\t\t\t\t\t\n\t\t\t\t\tgetMainContentView: function() {\n\t\t\t\t\t\tvar collection = nfRadio.channel( 'actions' ).request( 'get:collection' );\n\t\t\t\t\t\treturn new actionsMainContentView( { collection: collection } );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 'settings',\n\t\t\t\t\tnicename: nfi18n.domainAdvanced,\n\t\t\t\t\thotkeys: {\n\t\t\t\t\t\t'Esc'\t\t\t\t: 'close:drawer',\n\t\t\t\t\t\t'Ctrl+Shift+f'\t\t: 'changeDomain:fields',\n\t\t\t\t\t\t'Ctrl+Shift+a'\t\t: 'changeDomain:actions',\n\t\t\t\t\t\t'Alt+Ctrl+t'\t\t: 'open:mergeTags',\n\t\t\t\t\t\t'up'\t\t\t\t: 'up:mergeTags',\n\t\t\t\t\t\t'down'\t\t\t\t: 'down:mergeTags',\n\t\t\t\t\t\t'Shift+return'\t\t: 'return:mergeTags'\n\t\t\t\t\t},\n\t\t\t\t\tmobileDashicon: 'dashicons-admin-generic',\n\n\t\t\t\t\tgetSubHeaderView: function() {\n\t\t\t\t\t\treturn new settingsSubHeaderView();\n\t\t\t\t\t},\n\t\t\t\t\t\n\t\t\t\t\tgetMainContentView: function() {\n\t\t\t\t\t\tvar collection = nfRadio.channel( 'settings' ).request( 'get:typeCollection' );\n\t\t\t\t\t\treturn new settingsMainContentView( { collection: collection } );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 'preview',\n\t\t\t\t\tnicename: 'Preview Form',\n\t\t\t\t\tclasses: 'preview',\n\t\t\t\t\tdashicons: 'dashicons-visibility',\n\t\t\t\t\tmobileDashicon: 'dashicons-visibility',\n\t\t\t\t\turl: nfAdmin.previewurl\n\t\t\t\t}\n\t\t\t] );\n\n\t\t\t/*\n\t\t\t * Send out a radio message with our domain config collection.\n\t\t\t */\n\t\t\tnfRadio.channel( 'app' ).trigger( 'init:domainCollection', this.collection );\n\n\t\t\t/*\n\t\t\t * Respond to requests to get the app domain collection.\n\t\t\t */\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:domainCollection', this.getDomainCollection, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:domainModel', this.getDomainModel, this );\n\t\t},\n\n\t\tgetDomainCollection: function() {\n\t\t\treturn this.collection;\n\t\t},\n\n\t\tgetDomainModel: function( id ) {\n\t\t\treturn this.collection.get( id );\n\t\t},\n\n\t\tdefaultFormContentView: function( formContentData ) {\n\t\t\treturn FieldsMainContentFieldCollectionView;\n\t\t},\n\n\t\tdefaultFormContentLoad: function( formContentData ) {\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t/*\n\t\t\t * If we only have one load filter, we can just return the field collection.\n\t\t\t */\n\t\t\tvar formContentLoadFilters = nfRadio.channel( 'formContent' ).request( 'get:loadFilters' );\n\t\t\tvar sortedArray = _.without( formContentLoadFilters, undefined );\n\n\t\t\tif ( 1 == sortedArray.length || 'undefined' == typeof formContentData || true === formContentData instanceof Backbone.Collection ) return fieldCollection;\n\n\t\t\t/*\n\t\t\t * If another filter is registered, we are calling this from somewhere else.\n\t\t\t */\n\n        \tvar fieldModels = _.map( formContentData, function( key ) {\n        \t\treturn fieldCollection.findWhere( { key: key } );\n        \t}, this );\n\n        \treturn new FieldCollection( fieldModels );\n\t\t},\n\n\t\tdefaultFormContentGutterView: function( formContentData ) {\n\t\t\treturn EmptyView;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Model for our app data.\n * Listens for changes to the 'clean' attribute and triggers a radio message when the state changes.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/appModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tloading: false\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\t// Listen to changes to our 'clean' attribute.\n\t\t\tthis.on( 'change:clean', this.changeStatus, this );\n\t\t},\n\n\t\tchangeStatus: function() {\n\t\t\t// Send out a radio message when the 'clean' attribute changes.\n\t\t\tnfRadio.channel( 'app' ).trigger( 'change:clean', this.get( 'clean' ) );\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Creates and stores a model that represents app-wide data. i.e. current domain, current drawer, clean, etc.\n *\n * clean is a boolean that represents whether or not changes have been made.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/data',['models/app/appModel'], function( appModel ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Get the collection that represents all the parts of our application.\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\t// Setup our initial model.\n\t\t\tthis.model = new appModel( {\n\t\t\t\tcurrentDrawer: false,\n\t\t\t\tcurrentDomain: appDomainCollection.get( 'fields' ),\n\t\t\t\tclean: true\n\t\t\t} );\n\n\t\t\t/*\n\t\t\t * Set the mobile setting used to track whether or not we're on a mobile device.\n\t\t\t */\n\t\t\tvar mobile = ( 1 == nfAdmin.mobile ) ? true : false;\n\t\t\tthis.model.set( 'mobile', mobile );\n\n\t\t\t/*\n\t\t\t * Respond to requests to see if we are on mobile.\n\t\t\t */\n\t\t\tnfRadio.channel( 'app' ).reply( 'is:mobile', this.isMobile, this );\n\n\t\t\t/*\n\t\t\t * Respond to app channel requests for information about the state of our app.\n\t\t\t */\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:data', this.getData, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:setting', this.getSetting, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:currentDomain', this.getCurrentDomain, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:currentDrawer', this.getCurrentDrawer, this );\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'get:current', this.getCurrentDrawer, this );\n\n\t\t\t/*\n\t\t\t * Respond to app channel requests to update app settings.\n\t\t\t */\t\t\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:currentDomain', this.updateCurrentDomain, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:currentDrawer', this.updateCurrentDrawer, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:setting', this.updateSetting, this );\n\n\t\t},\n\n\t\tupdateCurrentDomain: function( model ) {\n\t\t\tthis.updateSetting( 'currentDomain', model );\n\t\t},\n\n\t\tupdateSetting: function( setting, value ) {\n\t\t\tthis.model.set( setting, value );\n\t\t\treturn true;\n\t\t},\n\n\t\tgetSetting: function( setting ) {\n\t\t\treturn this.model.get( setting );\n\t\t},\n\n\t\tgetData: function() {\n\t\t\treturn this.model;\n\t\t},\n\n\t\tgetCurrentDomain: function() {\n\t\t\treturn this.model.get( 'currentDomain' );\n\t\t},\n\n\t\tupdateCurrentDrawer: function( drawerID ) {\n\t\t\tthis.updateSetting( 'currentDrawer', drawerID );\n\t\t\treturn true;\n\t\t},\n\n\t\tgetCurrentDrawer: function() {\n\t\t\tvar currentDrawerID = this.model.get( 'currentDrawer' );\n\t\t\treturn nfRadio.channel( 'app' ).request( 'get:drawer', currentDrawerID );\n\t\t},\n\n\t\tisMobile: function() {\n\t\t\treturn this.model.get( 'mobile' );\n\t\t}\n\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens for click events to expand/collapse setting groups.\n * \n * @package Ninja Forms builder\n * @subpackage Fields - New Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/drawerToggleSettingGroup',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for click events on our settings group.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'click:toggleSettingGroup', this.toggleSettingGroup );\n\t\t},\n\n\t\t/**\n\t\t * Set the 'display' attribute of our group model to true or false to toggle.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t\t\te     \tevent\n\t\t * @param  backbone.model \tmodel \tgroup setting model\n\t\t * @return void\n\t\t */\n\t\ttoggleSettingGroup: function( e, model ) {\n\t\t\tif ( model.get( 'display' ) ) {\n\t\t\t\t/*\n\t\t\t\t * Make sure that none of our settings have errors\n\t\t\t\t */\n\t\t\t\tvar errors = false;\n\t\t\t\t_.each( model.get( 'settings' ).models, function( setting ) {\n\t\t\t\t\tif ( setting.get( 'error' ) ) {\n\t\t\t\t\t\terrors = true;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\tif ( ! errors ) {\n\t\t\t\t\tmodel.set( 'display', false );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmodel.set( 'display', true );\n\t\t\t}\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Updates our database with our form data.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/updateDB',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for the closing of the drawer and update when it's closed.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'closed', this.updateDB );\n\t\t\t// Respond to requests to update the database.\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:db', this.updateDB, this );\n\t\t\t/*\n\t\t\t * Register our default formContent save filter.\n\t\t\t * This converts our collection into an array of keys.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContent' ).request( 'add:saveFilter', this.defaultSaveFilter, 10, this );\n\t\t},\n\n\t\t/**\n\t\t * Update our database.\n\t\t * If action isn't specified, assume we're updating the preview.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  string \taction preview or publish\n\t\t * @return void\n\t\t */\n\t\tupdateDB: function( action ) {\n\t\t\t// If our app is clean, dont' update.\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Default action to preview.\n\t\t\taction = action || 'preview';\n\n\t\t\t// Setup our ajax actions based on the action we're performing\n\t\t\tif ( 'preview' == action ) {\n\t\t\t\tvar jsAction = 'nf_preview_update';\n\t\t\t} else if ( 'publish' == action ) {\n\t\t\t\tvar jsAction = 'nf_save_form';\n\t\t\t}\n\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\n\t\t\t/*\n\t\t\t * There are pieces of data that are only needed for the builder and not for the front-end.\n\t\t\t * We need to unset those.\n\t\t\t * TODO: Make this more dynamic/filterable.\n\t\t\t */\n\t\t\t_.each( formModel.get( 'fields' ).models, function( fieldModel, index ) {\n\t\t\t\tfieldModel.unset( 'jBox', { silent: true } );\n\t\t\t} );\n\n\t\t\t/*\n\t\t\t * The main content of our form is called the formContent.\n\t\t\t * In this next section, we check to see if any add-ons want to modify that contents before we save.\n\t\t\t * If there aren't any filters found, we default to the field collection.\n\t\t\t * \n\t\t\t */\n\t\t\t\n\t\t\tvar formContentData = nfRadio.channel( 'settings' ).request( 'get:setting', 'formContentData' );\n\t\t\t/*\n\t\t\t * As of version 3.0, 'fieldContentsData' has deprecated in favour of 'formContentData'.\n\t\t\t * If we don't have this setting, then we check for this deprecated value.\n\t\t\t * \n\t\t\t * Set our fieldContentsData to our form setting 'fieldContentsData'\n\t\t\t *\n\t\t\t * TODO: Remove this backwards compatibility eventually.\n\t\t\t */\n\t\t\tif ( ! formContentData ) {\n\t\t\t\tformContentData = nfRadio.channel( 'settings' ).request( 'get:setting', 'fieldContentsData' );\n\t\t\t}\n\n\t\t\tvar formContentSaveDataFilters = nfRadio.channel( 'formContent' ).request( 'get:saveFilters' );\n\t\t\t\t\t\t\n\t\t\t/* \n\t\t\t* Get our first filter, this will be the one with the highest priority.\n\t\t\t*/\n\t\t\tvar sortedArray = _.without( formContentSaveDataFilters, undefined );\n\t\t\tvar callback = _.first( sortedArray );\n\t\t\t/*\n\t\t\t * Set our formContentData to the callback specified in the filter, passing our current formContentData.\n\t\t\t */\n\t\t\tformContentData = callback( formContentData );\n\t\t\t\n\t\t\tif ( 'publish' == action && formModel.get( 'show_publish_options' ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'newForm' );\n\t\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\n\t\t\t\tjQuery( builderEl ).addClass( 'disable-main' );\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Get our form data\n\t\t\tvar formData = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\n\t\t\t// Turn our formData model into an object\n\t\t\tvar data = JSON.parse( JSON.stringify( formData ) );\n\t\t\tdata.settings.formContentData = formContentData;\n\t\t\t/**\n\t\t\t * Prepare fields for submission.\n\t\t\t */\n\t\t\t\n\t\t\t// Get the field IDs that we've deleted.\n\t\t\tvar removedIDs = formData.get( 'fields' ).removedIDs;\n\n\t\t\t/*\n\t\t\t * data.fields is an array of objects like:\n\t\t\t * field.label = blah\n\t\t\t * field.label_pos = blah\n\t\t\t * etc.\n\t\t\t *\n\t\t\t * And we need that format to be:\n\t\t\t * field.settings.label = blah\n\t\t\t * field.settings.label_pos = blah\n\t\t\t *\n\t\t\t * So, we loop through our fields and create a field.settings object.\n\t\t\t */\n\t\t\t_.each( data.fields, function( field ) {\n\t\t\t\tvar id = field.id;\n\t\t\t\t// We dont' want to update id or parent_id\n\t\t\t\tdelete field.id;\n\t\t\t\tdelete field.parent_id;\n\t\t\t\tvar settings = {};\n\t\t\t\t// Loop through all the attributes of our fields\n\t\t\t\tfor (var prop in field) {\n\t\t\t\t    if ( field.hasOwnProperty( prop ) ) {\n\t\t\t\t    \t// If our field property isn't null, then...\n                        if ( null !== field[ prop ] ) {\n                            // Set our settings.prop value.\n                            settings[prop] = field[prop];\n                        }\n                        // Delete the property from the field.\n                        delete field[ prop ];\n                    }\n\t\t\t\t}\n\n\t\t\t\tfor( var setting in settings ){\n\t\t\t\t\tif( null === settings[ setting ] ) {\n\t\t\t\t\t\tdelete settings[setting];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Update our field object.\n\t\t\t\tfield.settings = settings;\n\t\t\t\tfield.id = id;\n\t\t\t} );\n\n\t\t\t// Set our deleted_fields object so that we can know which fields were removed.\n\t\t\tdata.deleted_fields = removedIDs;\n\n\t\t\t/**\n\t\t\t * Prepare actions for submission.\n\t\t\t */\n\t\t\t\n\t\t\t// Get the action IDs that we've deleted.\n\t\t\tvar removedIDs = formData.get( 'actions' ).removedIDs;\n\n\t\t\t/*\n\t\t\t * data.actions is an array of objects like:\n\t\t\t * action.label = blah\n\t\t\t * action.label_pos = blah\n\t\t\t * etc.\n\t\t\t *\n\t\t\t * And we need that format to be:\n\t\t\t * action.settings.label = blah\n\t\t\t * action.settings.label_pos = blah\n\t\t\t *\n\t\t\t * So, we loop through our actions and create a field.settings object.\n\t\t\t */\n\t\t\t_.each( data.actions, function( action ) {\n\t\t\t\tvar id = action.id;\n\t\t\t\t// We dont' want to update id or parent_id\n\t\t\t\tdelete action.id;\n\t\t\t\tdelete action.parent_id;\n\t\t\t\tvar settings = {};\n\t\t\t\t// Loop through all the attributes of our actions\n\t\t\t\tfor (var prop in action) {\n\t\t\t\t    if ( action.hasOwnProperty( prop ) ) {\n\t\t\t\t    \t//Removing null values\n\t\t\t\t\t    if( null !== action[ prop ] ) {\n\t\t\t\t\t\t    // Set our settings.prop value.\n\t\t\t\t\t\t    settings[ prop ] = action[ prop ];\n\t\t\t\t\t    }\n\t\t\t\t        // Delete the property from the action.\n\t\t\t\t        delete action[ prop ];\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\t// Update our action object.\n\t\t\t\taction.settings = settings;\n\t\t\t\taction.id = id;\n\t\t\t} );\n\n\t\t\tfor ( var setting in data.settings ) {\n\t\t\t\tif ( null === data.settings[ setting ] ) {\n\t\t\t\t\tdelete data.settings[ setting ];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set our deleted_actions object so that we can know which actions were removed.\n\t\t\tdata.deleted_actions = removedIDs;\n\n\t\t\t// Turn our object into a JSON string.\n\t\t\tdata = JSON.stringify( data );\n\t\t\t// Run anything that needs to happen before we update.\n\t\t\tnfRadio.channel( 'app' ).trigger( 'before:updateDB', data );\n\n\t\t\tif ( 'publish' == action ) {\n\t\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'loading', true );\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'change:loading' );\t\n\n\t\t\t\t// If we're on mobile, show a notice that we're publishing\n\t\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\t\tnfRadio.channel( 'notices' ).request( 'add', 'publishing', 'Your Changes Are Being Published', { autoClose: false } );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Update\n\t\t\tjQuery.post( ajaxurl, { action: jsAction, form: data, security: nfAdmin.ajaxNonce }, function( response ) {\n\t\t\t\ttry {\n\t\t\t\t\tresponse = JSON.parse( response );\n\t\t\t\t\tresponse.action = action;\n\t\t\t\t\t// Run anything that needs to happen after we update.\n\t\t\t\t\tnfRadio.channel( 'app' ).trigger( 'response:updateDB', response );\n\t\t\t\t\tif ( ! nfRadio.channel( 'app' ).request( 'is:mobile' ) && 'preview' == action ) {\n\t\t\t\t\t\t// nfRadio.channel( 'notices' ).request( 'add', 'previewUpdate', 'Preview Updated'\t);\n\t\t\t\t\t}\n\t\t\t\t} catch( exception ) {\n\t\t\t\t\tconsole.log( 'Something went wrong!' );\n\t\t\t\t\tconsole.log( exception );\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} ).fail( function( xhr, status, error ) {\n\t\t\t\tconsole.log( action );\n\t\t\t\t// For previews, only log to the console.\n                if( 'preview' == action ) {\n                    console.log( error );\n                    return;\n                }\n                // @todo Convert alert to jBox Modal.\n\t\t\t\talert(xhr.status + ' ' + error + '\\r\\n' + 'An error on the server caused your form not to publish.\\r\\nPlease contact Ninja Forms Support with your PHP Error Logs.\\r\\nhttps://ninjaforms.com/contact');\n\t\t\t});\n\t\t},\n\n\t\tdefaultSaveFilter: function( formContentData ) {\n\t\t\treturn formContentData.pluck( 'key' );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Model that represents our form data.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/formModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tinitialize: function() {\n\t\t\tif ( ! jQuery.isNumeric( this.get( 'id' ) ) ) {\n\t\t\t\tthis.set( 'show_publish_options', true, { silent: true } );\n\t\t\t} else {\n\t\t\t\tthis.set( 'show_publish_options', false, { silent: true } );\n\t\t\t}\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Stores our form data and responds to requests for it.\n * Form data stores fields, actions, and settings.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/formData',['models/app/formModel'], function( formModel) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Instantiate Form Model\n\t\t\tthis.model = new formModel( { id: preloadedFormData.id } );\n\t\t\t// Set our field collection\n\t\t\tthis.model.set( 'fields', nfRadio.channel( 'fields' ).request( 'get:collection' ) );\n\t\t\t// Set our actions collection\n\t\t\tthis.model.set( 'actions', nfRadio.channel( 'actions' ).request( 'get:collection' ) );\n\t\t\t// Set our settings collection\n\t\t\tthis.model.set( 'settings', nfRadio.channel( 'settings' ).request( 'get:settings' ) );\n\t\t\t// Respond to requests for form data.\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:formModel', this.getFormModel, this );\n\t\t},\n\n\t\t/**\n\t\t * Return form data model.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return backbone.model\n\t\t */\n\t\tgetFormModel: function() {\n\t\t\treturn this.model;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles changing our preview link when we change the 'clean' state of our app.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/previewLink',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for events that would change our preview link\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'before:sendChanges', this.disablePreview, this );\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'response:sendChanges', this.enablePreview, this );\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:clean', this.changePreviewNicename, this );\n\t\t},\n\n\t\t/**\n\t\t * Disable our preview link before we send data to update our preview.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tdisablePreview: function() {\n\t\t\t// Get our preview domain\n\t\t\tvar appDomains = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\tvar preview = appDomains.get( 'preview' );\n\t\t\t// Set disabled to true. This will trigger the preview link view to redraw.\n\t\t\tpreview.set( 'disabled', true );\n\t\t},\n\n\t\t/**\n\t\t * Change the preview link text from \"Preview Form\" to \"Preview Changes\" or vice-versa\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  boolean \tclean app data state\n\t\t * @return void\n\t\t */\n\t\tchangePreviewNicename: function( clean ) {\n\t\t\t// Get our preview domain\n\t\t\tvar appDomains = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\tvar preview = appDomains.get( 'preview' );\n\n\t\t\t// If we have unsaved changes, set our text to 'changes' otherwise, set it to 'form'\n\t\t\tif ( ! clean ) {\n\t\t\t\tvar nicename = 'Preview Changes';\n\t\t\t} else {\n\t\t\t\tvar nicename = 'Preview Form';\n\t\t\t}\n\n\t\t\tpreview.set( 'nicename', nicename );\n\t\t},\n\n\t\t/**\n\t\t * Enable our preview button.\n\t\t * This is triggered when we get a response from our preview update.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tenablePreview: function() {\n\t\t\t// Get our preview domain\n\t\t\tvar appDomains = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\tvar preview = appDomains.get( 'preview' );\n\t\t\t// Set disabled to false. This will trigger the preview link view to redraw.\n\t\t\tpreview.set( 'disabled', false );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens to our app channel for requests to change the current domain.\n *\n * The app menu and the main submenu both contain clickable links that change the current domain.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/menuButtons',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:publish', this.publish );\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:viewChanges', this.viewChanges );\n\t\t},\n\n\t\tpublish: function() {\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db', 'publish' );\n\t\t},\n\n\t\tviewChanges: function() {\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'viewChanges', { collection: changeCollection } );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Model that represents our change data.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/changeModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tdisabled: false\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Holds all of our change models.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/changeCollection',['models/app/changeModel'], function( domainModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: domainModel,\n\n\t\tcomparator: function( model ) {\n\t\t\tvar id = parseInt( model.cid.replace( 'c', '' ) );\n\t\t\treturn -id;\n\t\t}\n\t} );\n\treturn collection;\n} );\n","/**\n * Track settings changes across our app.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/trackChanges',['models/app/changeCollection', 'models/app/changeModel'], function( changeCollection, ChangeModel ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.collection = new changeCollection();\n\t\t\t// Respond to any requests to add a change directly.\n\t\t\tnfRadio.channel( 'changes' ).reply( 'register:change', this.registerChange, this );\n\t\t\t// Respond to requests for the change collection\n\t\t\tnfRadio.channel( 'changes' ).reply( 'get:collection', this.getCollection, this );\n\t\t\t// Listen for changes in our clean state. If it goes to clean, clear our collection.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:clean', this.maybeResetCollection );\n\t\t},\n\n\t\tregisterChange: function( action, model, changes, label, data ) {\n\t\t\tvar data = typeof data !== 'undefined' ? data : {};\n\t\t\tif ( 'undefined' == typeof label.dashicon ) {\n\t\t\t\tlabel.dashicon = 'admin-generic';\n\t\t\t}\n\t\t\tvar changeModel = new ChangeModel({\n\t\t\t\taction: action,\n\t\t\t\tmodel: model,\n\t\t\t\tchanges: changes,\n\t\t\t\tlabel: label,\n\t\t\t\tdata: data\t\t\n\t\t\t} );\n\t\t\tthis.collection.add( changeModel );\n\t\t\treturn changeModel;\n\t\t},\n\n\t\tgetCollection: function() {\n\t\t\treturn this.collection;\n\t\t},\n\n\t\tmaybeResetCollection: function( clean ) {\n\t\t\tif ( clean ) {\n\t\t\t\tthis.collection.reset();\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","define( 'controllers/app/undoChanges',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'click:undoChanges', this.undoChanges, this );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'click:undoSingle', this.undoSingle, this );\n\t\t},\n\n\t\tundoChanges: function() {\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\tchangeCollection.sort();\n\t\t\tvar that = this;\n\t\t\t_.each( changeCollection.models, function( change ) {\n\t\t\t\tthat.undoSingle( change, true );\n\t\t\t} );\n\t\t\tchangeCollection.reset();\n\t\t\t// Update preview.\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\t\t\t\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', true );\n\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\n\t\t},\n\n\t\tundoSingle: function( change, undoAll ) {\n\t\t\tnfRadio.channel( 'changes' ).request( 'undo:' + change.get( 'action' ), change, undoAll );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens for our update:db response and replaces tmp ids with new ids if we were performing the publish action.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/publishResponse',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen to our app channel for the updateDB response.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'response:updateDB', this.publishResponse );\n\t\t},\n\n\t\tpublishResponse: function( response ) {\n\t\t\t// If we aren't performing a publish action, bail.\n\t\t\tif ( 'publish' !== response.action ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\t// Check to see if we have any new ids. \n\t\t\tif ( 'undefined' != typeof response.data.new_ids ) {\n\n\t\t\t\t// If we have any new fields, update their models with the new id.\n\t\t\t\tif ( 'undefined' != typeof response.data.new_ids.fields ) {\n\t\t\t\t\t_.each( response.data.new_ids.fields, function( newID, oldID ) {\n\t\t\t\t\t\tvar field = nfRadio.channel( 'fields' ).request( 'get:field', oldID );\n\t\t\t\t\t\tif ( field ) {\n\t\t\t\t\t\t\tfield.set( 'id', newID );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\t// If we have any new actions, update their models with the new id.\n\t\t\t\tif ( 'undefined' != typeof response.data.new_ids.actions ) {\n\t\t\t\t\t_.each( response.data.new_ids.actions, function( newID, oldID ) {\n\t\t\t\t\t\tvar action = nfRadio.channel( 'actions' ).request( 'get:action', oldID );\n\t\t\t\t\t\tif ( action ) {\n\t\t\t\t\t\t\taction.set( 'id', newID );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\t// If we have a new form id, update the model with the new id.\n\t\t\t\tif ( 'undefined' != typeof response.data.new_ids.forms ) {\n\t\t\t\t\t_.each( response.data.new_ids.forms, function( newID, oldID ) {\n\t\t\t\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\t\t\t\t\t\tformModel.set( 'id', newID );\n\t\t\t\t\t\thistory.replaceState( '', '', 'admin.php?page=ninja-forms&form_id=' + newID );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'loading', false );\n\t\t\tnfRadio.channel( 'app' ).trigger( 'change:loading' );\n\n\t\t\t// If we're on mobile, show a notice that we're publishing\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tnfRadio.channel( 'notices' ).request( 'close', 'publishing' );\n\t\t\t}\n\t\t\t// Add a notice that we've published.\n//\t\t\tnfRadio.channel( 'notices' ).request( 'add', 'published', 'Changes Published' );\n\t\t\tnfRadio.channel( 'app' ).trigger( 'app:published', response );\n\n\t\t\t// Mark our app as clean. This will disable the publish button and fire anything else that cares about the state.\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', true );\n\t\t}\n\t\t\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens to our app channel for requests to change the current domain.\n *\n * The app menu and the main submenu both contain clickable links that change the current domain.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/changeDomain',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for both menu and submenu clicks.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:menu', this.changeAppDomain );\n\t\t\t// Reply to specific requests to change the domain\n\t\t\tnfRadio.channel( 'app' ).reply( 'change:currentDomain', this.changeAppDomain, this );\n\n\t\t\t// Reply to requests to prevent our drawer from closing\n\t\t\tnfRadio.channel( 'app' ).reply( 'prevent:changeDomain', this.preventChange, this );\n\t\t\t// Reply to requests to enable drawer closing\n\t\t\tnfRadio.channel( 'app' ).reply( 'enable:changeDomain', this.enableChange, this );\n\n\t\t\t/*\n\t\t\t * Object that holds our array of 'prevent change' values.\n\t\t\t * We use an array so that registered requests can unregister and not affect each other.\n\t\t\t */\n\t\t\tthis.objPreventChange = {};\n\t\t},\n\n\t\tchangeAppDomain: function( e, model ) {\n\t\t\t/*\n\t\t\t * If we have disabled movement between domains, return false.\n\t\t\t */\n\t\t\tif ( this.maybePreventChange() ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * If we are passed a model, use that model.\n\t\t\t * Otherwise, get the domain from the event target data.\n\t\t\t */ \n\t\t\tif ( 'undefined' == typeof model ) {\n\t\t\t\tvar domainID = jQuery( e.target ).data( 'domain' );\n\t\t\t\tvar model = nfRadio.channel( 'app' ).request( 'get:domainModel', domainID );\n\t\t\t}\n\t\t\t// If a drawer is open, close it.\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'get:currentDrawer' ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\n\t\t\t}\n\t\t\t/*\n\t\t\t * If we aren't dealing with an external url (such as preview), update our app data\n\t\t\t * and trigger a radio message saying we've changed the domain.\n\t\t\t */ \n\t\t\tif ( 0 == model.get( 'url' ).length ) {\n\t\t\t\tvar mainEl = nfRadio.channel( 'app' ).request( 'get:mainEl' );\n\t\t\t\tnfRadio.channel( 'app' ).request( 'update:currentDomain', model );\n\t\t\t\tjQuery( mainEl ).scrollTop( 0 );\t\t\t\t\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'change:currentDomain', model );\n\t\t\t}\n\t\t},\n\n\t\t/**\n         * Check to see if anything has registered a key to prevent changing the domain.\n         * \n         * @since  3.0\n         * @return boolean\n         */\n        maybePreventChange: function() {\n        \tif ( 0 == Object.keys( this.objPreventChange ).length ) {\n        \t\treturn false;\n        \t} else {\n        \t\treturn true;\n        \t}\n        },\n\n        /**\n         * Register a key to prevent changing the domain.\n         * \n         * @since  3.0\n         * @param  string \tkey unique id for our 'prevent change domain' setting.\n         * @return void\n         */\n        preventChange: function( key ) {\n        \tthis.objPreventChange[ key ] = true;\n        },\n\n        /**\n         * Remove a previously registered key that is preventing our domain from changing.\n         * \n         * @since  3.0\n         * @param  string \tkey unique id for our 'prevent change domain' setting.\n         * @return void\n         */\n        enableChange: function( key ) {\n        \tdelete this.objPreventChange[ key ];\n        },\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Modify the user's browser history when they click on a domain\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/pushstate',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.changePushState );\n\t\t},\n\n\t\tchangePushState: function() {\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\thistory.pushState( null, null, window.location.href + '&domain=' + currentDomain.get( 'id' ) );\n\t\t\tvar reExp = /domain=\\\\d+/;\n\t\t\tvar url = window.location.toString();\n\t\t\tvar newUrl = url.replace( reExp, '' );\n\t\t\tconsole.log( newUrl );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles our hotkey execution. Needs to be cleaned up and made more programmatic.\n * \n * Our hotkeys are defined by the domain that we're currently viewing. In each domain's model, there is a hotkey object.\n * \n * Currently too much hotkey data is hard-coded here.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/hotkeys',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// When we change our domain, change the hotkeys to those within that object.\n\t\t\tthis.listenTo( nfRadio.channel( 'main' ), 'render:main', this.changeHotkeys );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'opened', this.changeHotkeys );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'render:settingGroup', this.changeHotkeys );\n\t\t\t// Currently, these are the functions that run when the new field or new action hotkey is pressed.\n\t\t\t// TODO: move these into a config module or into something more programmatic and scalable.\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'add:newField', this.addNewField );\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'add:newAction', this.addNewAction );\n\t\t\t// Same as above, these functions need to be moved into a more modular/programmatic solution.\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'changeDomain:fields', this.changeDomainFields );\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'changeDomain:actions', this.changeDomainActions );\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'changeDomain:settings', this.changeDomainSettings );\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'close:drawer', this.closeDrawer );\n\t\t},\n\n\t\tchangeHotkeys: function() {\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tjQuery( document ).off( '.nfDomainHotkeys' );\n\t\t\tjQuery( 'input' ).off( '.nfDomainHotkeys' );\n\t\t\tif ( currentDomain.get( 'hotkeys' ) ) {\n\t\t\t\tjQuery.each( currentDomain.get( 'hotkeys' ), function( hotkey, msg ) {\n\t\t\t\t\tjQuery( document ).on( 'keydown.nfDomainHotkeys', null, hotkey, function( e ) {\n\t\t\t\t\t\tnfRadio.channel( 'hotkeys' ).trigger( msg, e );\n\t\t\t\t\t} );\n\t\t\t\t\tjQuery( 'input' ).on( 'keydown.nfDomainHotkeys', null, hotkey, function( e ) {\n\t\t\t\t\t\tnfRadio.channel( 'hotkeys' ).trigger( msg, e );\n\t\t\t\t\t} );\n\t\t\t\t\tjQuery( 'textarea' ).on( 'keydown.nfDomainHotkeys', null, hotkey, function( e ) {\n\t\t\t\t\t\tnfRadio.channel( 'hotkeys' ).trigger( msg, e );\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\n\t\taddNewField: function() {\n\t\t\tif ( 'addField' != nfRadio.channel( 'app' ).request( 'get:currentDrawer' ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'addField' );\n\t\t\t} else {\n\t\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\n\t\t\t}\n\t\t\t\n\t\t},\n\n\t\taddNewAction: function() {\n\t\t\tif ( 'addAction' != nfRadio.channel( 'app' ).request( 'get:currentDrawer' ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'addAction' );\n\t\t\t} else {\n\t\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\n\t\t\t}\n\t\t},\n\n\t\tchangeDomainFields: function() {\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\tvar fieldsDomain = appDomainCollection.get( 'fields' );\n\t\t\tnfRadio.channel( 'app' ).request( 'change:currentDomain', {}, fieldsDomain );\n\t\t},\n\n\t\tchangeDomainActions: function() {\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\tvar actionsDomain = appDomainCollection.get( 'actions' );\n\t\t\tnfRadio.channel( 'app' ).request( 'change:currentDomain', {}, actionsDomain );\n\t\t},\n\n\t\tchangeDomainSettings: function() {\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\tvar settingsDomain = appDomainCollection.get( 'settings' );\n\t\t\tnfRadio.channel( 'app' ).request( 'change:currentDomain', {}, settingsDomain );\n\t\t},\n\n\t\tcloseDrawer: function() {\n\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Change the clean state of our app when settings are changed.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/cleanState',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * Set an array of field model attributes to ignore.\n\t\t\t * This list will be filtered just before we ignore anything.\n\t\t\t */ \n\t\t\tthis.ignoreAttributes = [\n\t\t\t\t'editActive'\n\t\t\t];\n\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'update:setting', this.setAppClean );\n\t\t},\n\n\t\tsetAppClean: function( model ) {\n\t\t\tfor( var attr in model.changedAttributes() ) {\n\t\t\t\tvar changedAttr = attr;\n\t\t\t\tvar after = model.changedAttributes()[ attr ];\n\t\t\t}\n\n\t\t\tvar ignoreAttributes = nfRadio.channel( 'undo-' + model.get( 'type' ) ).request( 'ignore:attributes', this.ignoreAttributes ) || this.ignoreAttributes;\n\t\t\t\n\t\t\tif ( -1 != this.ignoreAttributes.indexOf( attr ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * All of the core undo functions. Listens on the 'changes' channel for an undo request.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/coreUndo',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:changeSetting', this.undoChangeSetting, this );\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:addObject', this.undoAddObject, this );\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:removeObject', this.undoRemoveObject, this );\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:duplicateObject', this.undoDuplicateObject, this );\n\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:sortFields', this.undoSortFields, this );\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:addListOption', this.undoAddListOption, this );\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:removeListOption', this.undoRemoveListOption, this );\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:sortListOptions', this.undoSortListOptions, this );\n\t\t},\n\n\t\t/**\n\t\t * Undo settings that have been changed.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tchange \tmodel of our change\n\t\t * @param  boolean \t\t\tundoAll are we in the middle of an undo all action?\n\t\t * @return void\n\t\t */\n\t\tundoChangeSetting: function( change, undoAll ) {\n\t\t\tvar fieldModel = change.get( 'model' );\n\t\t\tvar changes = change.get( 'changes' );\n\t\t\tvar attr = changes.attr;\n\t\t\tvar before = changes.before;\n\t\t\tfieldModel.set( attr, before );\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\n\n\t\t/**\n\t\t * Undo adding a field or an action.\n\t\t * Loops through our change collection and removes any change models based upon the one we're removing.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tchange \tmodel of our change\n\t\t * @param  boolean \t\t\tundoAll are we in the middle of an undo all action?\n\t\t * @return void\n\t\t */\n\t\tundoAddObject: function( change, undoAll ) {\n\t\t\tvar objectModel = change.get( 'model' );\n\t\t\tvar collection = change.get( 'data' ).collection;\n\n\t\t\tif ( 'undefined' != typeof collection.newIDs ) {\n\t\t\t\tdelete collection.newIDs[ objectModel.get( 'id' ) ];\n\t\t\t}\n\t\t\t\t\t\t\n\t\t\tif ( ! undoAll ) {\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\t\tvar results = changeCollection.where( { model: objectModel } );\n\n\t\t\t\t_.each( results, function( model ) {\n\t\t\t\t\tif ( model !== change ) {\n\t\t\t\t\t\tchangeCollection.remove( model );\n\t\t\t\t\t}\n\t\t\t\t} );\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tcollection.remove( objectModel );\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\t\t\n\n\t\t/**\n\t\t * Undo adding a field or an action.\n\t\t * Loops through our change collection and removes any change models based upon the one we're removing.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tchange \tmodel of our change\n\t\t * @param  boolean \t\t\tundoAll are we in the middle of an undo all action?\n\t\t * @return void\n\t\t */\n\t\tundoDuplicateObject: function( change, undoAll ) {\n\t\t\tvar objectModel = change.get( 'model' );\n\t\t\tvar objectCollection = change.get( 'data' ).collection;\n\n\t\t\tif ( ! undoAll ) {\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\t\tvar results = changeCollection.where( { model: objectModel } );\n\n\t\t\t\t_.each( results, function( model ) {\n\t\t\t\t\tif ( model !== change ) {\n\t\t\t\t\t\tchangeCollection.remove( model );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tobjectCollection.remove( objectModel );\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\n\n\t\t/**\n\t\t * Undo removing a field or an action.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tchange \tmodel of our change\n\t\t * @param  boolean \t\t\tundoAll are we in the middle of an undo all action?\n\t\t * @return void\n\t\t */\n\t\tundoRemoveObject: function( change, undoAll ) {\n\t\t\tvar dataModel = change.get( 'model' );\n\t\t\tvar collection = change.get( 'data' ).collection;\n\n\t\t\tnfRadio.channel( dataModel.get( 'objectDomain' ) ).request( 'add', dataModel );\n\n\t\t\tdelete collection.removedIDs[ dataModel.get( 'id' ) ];\n\t\t\t\n\t\t\tif ( ! undoAll ) {\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\t\tvar results = changeCollection.where( { model: dataModel } );\n\n\t\t\t\t_.each( results, function( model ) {\n\t\t\t\t\tif ( model !== change ) {\n\t\t\t\t\t\tmodel.set( 'disabled', false );\n\t\t\t\t\t}\n\t\t\t\t} );\t\t\t\t\n\t\t\t}\n\n\t\t\t// Trigger a reset on our field collection so that our view re-renders\n\t\t\tcollection.trigger( 'reset', collection );\n\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\n\n\t\t/**\n\t\t * Undo field sorting.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tchange \tmodel of our change\n\t\t * @param  boolean \t\t\tundoAll are we in the middle of an undo all action?\n\t\t * @return void\n\t\t */\n\t\tundoSortFields: function( change, undoAll ) {\n\t\t\tvar data = change.get( 'data' );\n\t\t\tvar fields = data.fields;\n\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t_.each( fields, function( changeModel ) {\n\t\t\t\tvar before = changeModel.before;\n\t\t\t\tvar fieldModel = changeModel.model;\n\t\t\t\tfieldModel.set( 'order', before );\n\t\t\t\t// console.log( 'set ' + fieldModel.get( 'label' ) + ' to ' + before );\n\t\t\t} );\n\t\t\t// console.log( fieldCollection.where( { label: 'Name' } ) );\n\t\t\t// console.log( fieldCollection.where( { label: 'Email' } ) );\n\n\n\t\t\tfieldCollection.sort();\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\n\n\t\tundoAddListOption: function( change, undoAll ) {\n\t\t\tvar model = change.get( 'model' );\n\n\t\t\tif ( ! undoAll ) {\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\t\tvar results = changeCollection.where( { model: model } );\n\n\t\t\t\t_.each( results, function( changeModel ) {\n\t\t\t\t\tif ( changeModel !== change ) {\n\t\t\t\t\t\tchangeCollection.remove( changeModel );\n\t\t\t\t\t}\n\t\t\t\t} );\t\t\t\t\n\t\t\t}\n\n\t\t\tmodel.collection.remove( model );\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\n\n\t\tundoRemoveListOption: function( change, undoAll ) {\n\t\t\tvar model = change.get( 'model' );\n\t\t\tvar collection = change.get( 'data' ).collection;\n\t\t\tcollection.add( model );\n\n\t\t\tif ( ! undoAll ) {\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\t\tvar results = changeCollection.where( { model: model } );\n\n\t\t\t\t_.each( results, function( model ) {\n\t\t\t\t\tif ( model !== change ) {\n\t\t\t\t\t\tmodel.set( 'disabled', false );\n\t\t\t\t\t}\n\t\t\t\t} );\t\t\t\t\n\t\t\t}\n\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\n\n\t\tundoSortListOptions: function( change, undoAll ) {\n\t\t\tvar data = change.get( 'data' );\n\t\t\tvar collection = data.collection;\n\t\t\t\n\t\t\tvar objModels = data.objModels;\n\n\t\t\t_.each( objModels, function( changeModel ) {\n\t\t\t\tvar before = changeModel.before;\n\t\t\t\tvar optionModel = changeModel.model;\n\t\t\t\toptionModel.set( 'order', before );\n\t\t\t} );\t\t\t\t\n\n\n\t\t\tcollection.sort();\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\n\n\t\t/**\n\t\t * If our undo action was requested to 'remove' the change from the collection, remove it.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tchange \tmodel of our change\n\t\t * @param  boolean \t\t\tremove \tshould we remove this item from our change collection\n\t\t * @return void\n\t\t */\n\t\tmaybeRemoveChange: function( change, undoAll ) {\t\t\t\n\t\t\tvar undoAll = typeof undoAll !== 'undefined' ? undoAll : false;\n\t\t\tif ( ! undoAll ) {\n\t\t\t\t// Update preview.\n\t\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\t\tchangeCollection.remove( change );\n\t\t\t\tif ( 0 == changeCollection.length ) {\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', true );\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Returns a clone of a backbone model with all the attributes looped through so that collections contained within are propely cloned.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/cloneModelDeep',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'app' ).reply( 'clone:modelDeep', this.cloneModelDeep, this );\n\t\t},\n\n\t\tcloneModelDeep: function( model ) {\n\t\t\t// Temporary value used to store any new collections.\n\t\t\tvar replace = {};\n\t\t\t// Loop over every model attribute and if we find a collection, clone each model and instantiate a new collection.\n\t\t\t_.each( model.attributes, function( val, key ) {\n\t\t\t\tif( val instanceof Backbone.Collection ) { // Is this a backbone collection?\n\t\t\t\t\tvar clonedCollection = nfRadio.channel( 'app' ).request( 'clone:collectionDeep', val );\n\t\t\t\t\treplace[ key ] = clonedCollection;\n\t\t\t\t} else if ( val instanceof Backbone.Model ) { // Is this a backbone model?\n\t\t\t\t\treplace[ key ] = this.cloneModelDeep( val );\n\t\t\t\t}\n\t\t\t}, this );\n\n\t\t\t// Clone our original model\n\t\t\tvar newModel = model.clone();\n\t\t\t// Overwrite any collections we created above.\n\t\t\t_.each( replace, function( val, key ) {\n\t\t\t\tnewModel.set( key, val );\n\t\t\t} );\n\n\t\t\treturn newModel;\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Returns the appropriate child view for our settings drawer.\n *\n * This enables settings types to register custom childviews for their settings.\n * The option-repeater setting for the list field is an example.\n * \n * @package Ninja Forms builder\n * @subpackage App - Edit Settings Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/getSettingChildView',['views/app/drawer/itemSetting'], function( itemSettingView ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Respond to requests for field settings child views.\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:settingChildView', this.getSettingChildView, this );\n\t\t},\n\n\t\t/**\n\t\t * Return the appropriate child setting view.\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  backbone.model\tmodel \tField setting\n\t\t * @return backbone.view\n\t\t */\n\t\tgetSettingChildView: function( model ) {\n\t\t\t// Get our setting type.\n\t\t\tvar type = model.get( 'type' );\n\t\t\t// Request a setting childview from our setting type channel. (Setting type, not field type)\n\t\t\tvar settingChildView = nfRadio.channel( type ).request( 'get:settingChildView', model ) || itemSettingView;\n\t\t\t\n\t\t\treturn settingChildView\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Updates our model when the user changes a setting.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/changeSettingDefault',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Respond to requests to update settings.\n\t\t\tnfRadio.channel( 'app' ).reply( 'change:setting', this.changeSetting, this );\n\n\t\t\t// Listen on our app channel for the change setting event. Fired by the setting view.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:setting', this.changeSetting, this );\n\t\t},\n\n\t\t/**\n\t\t * When we change our setting, update the model.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \t\t\te                event\n\t\t * @param  backbone.model \tsettingModel model that holds our field type settings info\n\t\t * @param  backbone.model \tdataModel       model that holds our field settings\n\t\t * @return void\n\t\t */\n\t\tchangeSetting: function( e, settingModel, dataModel, value ) {\n\t\t\tvar name = settingModel.get( 'name' );\n\t\t\tvar before = dataModel.get( name );\n\t\t\tvar value = value || null;\n\t\t\tif ( ! value ) {\n\t\t\t\t// Sends out a request on the fields-type (fields-text, fields-checkbox, etc) channel to see if that field type needs to return a special value for saving.\n\t\t\t\tvalue = nfRadio.channel( settingModel.get( 'type' ) ).request( 'before:updateSetting', e, dataModel, name, settingModel );\n\t\t\t}\n\n\t\t\tif( 'undefined' == typeof value ){\n\t\t\t    value = jQuery( e.target ).val();\n            }\n\t\t\t\n\t\t\t// Update our field model with the new setting value.\n\t\t\tdataModel.set( name, value, { settingModel: settingModel } );\n\t\t\tnfRadio.channel( 'setting-' + name ).trigger( 'after:updateSetting', dataModel, settingModel );\n\t\t\t// Register our setting change with our change tracker\n\t\t\tvar after = value;\n\t\t\t\n\t\t\tvar changes = {\n\t\t\t\tattr: name,\n\t\t\t\tbefore: before,\n\t\t\t\tafter: after\n\t\t\t}\n\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tvar currentDomainID = currentDomain.get( 'id' );\n\n\t\t\tvar label = {\n\t\t\t\tobject: dataModel.get( 'objectType' ),\n\t\t\t\tlabel: dataModel.get( 'label' ),\n\t\t\t\tchange: 'Changed ' + settingModel.get( 'label' ) + ' from ' + before + ' to ' + after\n\t\t\t};\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'changeSetting', dataModel, changes, label );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","define( 'views/app/drawer/typeSettingFieldset',['views/app/drawer/itemSetting'], function( itemSettingView ) {\n\tvar view = Marionette.CompositeView.extend( {\n\t\ttemplate: '#tmpl-nf-edit-setting-wrap',\n\t\tchildView: itemSettingView,\n\n\t\tinitialize: function( data ) {\n\t\t\tthis.collection = this.model.get( 'settings' );\n\t\t\tthis.childViewOptions = { dataModel: data.dataModel };\n\t\t\tthis.dataModel = data.dataModel;\n\t\t\tvar deps = this.model.get( 'deps' );\n\t\t\tif ( deps ) {\n\t\t\t\tfor ( var name in deps ) {\n\t\t\t\t    if ( deps.hasOwnProperty( name ) ) {\n\t\t\t\t    \tthis.dataModel.on( 'change:' + name, this.render, this );\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.model.on( 'rerender', this.render, this );\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tvar deps = this.model.get( 'deps' );\n\t\t\tif ( deps ) {\n\t\t\t\tfor (var name in deps) {\n\t\t\t\t    if ( deps.hasOwnProperty( name ) ) {\n\t\t\t\t    \tthis.dataModel.off( 'change:' + name, this.render );\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tonBeforeRender: function() {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'before:renderSetting', this.model, this.dataModel );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'before:renderSetting', this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'before:renderSetting', this.model, this.dataModel, this );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\t/*\n\t\t\t * Send out a radio message.\n\t\t\t */\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'render:setting', this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'render:setting', this.model, this.dataModel, this );\n\t\t},\n\n\t\ttemplateHelpers: function () {\n\t\t\tvar that = this;\n\t    \treturn {\n\t    \t\trenderVisible: function() {\n\t\t\t\t\tif ( this.deps ) {\n\t\t\t\t\t\tfor (var name in this.deps) {\n\t\t\t\t\t\t    if ( this.deps.hasOwnProperty( name ) ) {\n\t\t\t\t\t\t        if ( that.dataModel.get( name ) !== this.deps[ name ] ) {\n\t\t\t\t\t\t        \treturn 'style=\"display:none;\"';\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t    \t\t\treturn '';\n\t    \t\t},\n\t    \t\trenderSetting: function(){\n\t    \t\t\tvar setting = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-edit-setting-' + this.type );\n\t\t\t\t\treturn setting( this );\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tvar classes = '';\n\t\t\t\t\tif ( 'undefined' != typeof this.width ) {\n\t\t\t\t\t\tclasses += this.width;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclasses += ' one-half';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.error ) {\n\t\t\t\t\t\tclasses += ' nf-error';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\n\t\t\t\trenderError: function() {\n\t\t\t\t\tif ( this.error ) {\n\t\t\t\t\t\treturn this.error;\n\t\t\t\t\t}\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tattachHtml: function( collectionView, childView ) {\n\t\t\tjQuery( collectionView.el ).find( '.nf-field-sub-settings' ).append( childView.el );\n\t\t}\n\t} );\n\n\treturn view;\n} );\n","/**\n * Model that represents our setting.\n *\n * When the model is created, we trigger the init event in two radio channels.\n *\n * This lets specific types of settings modify the model before anything uses it.\n *\n * Fieldset, for instance, uses this hook to instantiate its settings as a collection.\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/settingModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tsettings: false,\n\t\t\thide_merge_tags: false,\n\t\t\terror: false\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\t// Send out two messages saying that we've initialized a setting model.\n\t\t\tnfRadio.channel( 'app' ).trigger( 'init:settingModel', this );\n\t\t\tnfRadio.channel( this.get( 'type' ) ).trigger( 'init:settingModel', this );\n\t\t\tnfRadio.channel( 'setting-name-' + this.get( 'name' ) ).trigger( 'init:settingModel', this );\n\t\t\tthis.on( 'change:error', this.maybePreventUI, this );\n\n\t\t\t/*\n\t\t\t * If we have an objectType set on our collection, then we're creating a model for the generic settings collection.\n\t\t\t * If we're using merge tags in this setting\n\t\t\t */\n\t\t\tif( 'undefined' == typeof this.collection ) return;\n\n\t\t\tif ( this.get( 'use_merge_tags' ) && 'undefined' != typeof this.collection.options.objectType ) {\n\t\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'update:fieldKey', this.updateKey );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * When a field key is updated, send out a radio message requesting that this setting be checked for the old key.\n\t\t * We want to send the message on the objectType channel.\n\t\t * This means that if this setting is for fields, it will trigger on the fields channel, actions, etc.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Backbone.Model \tkeyModel data model representing the field for which the key just changed\n\t\t * @return void\n\t\t */\n\t\tupdateKey: function( keyModel ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'fire:updateFieldKey', keyModel, this );\n\t\t},\n\n\t\tmaybePreventUI: function() {\n\t\t\tif ( this.get( 'error' ) ) {\n\t\t\t\tnfRadio.channel( 'drawer' ).request( 'prevent:close', 'setting-' + this.get( 'name' ) + '-error' );\n\t\t\t\tnfRadio.channel( 'app' ).request( 'prevent:changeDomain', 'setting-' + this.get( 'name' ) + '-error' );\t\t\t\t\n\t\t\t} else {\n\t\t\t\tnfRadio.channel( 'drawer' ).request( 'enable:close', 'setting-' + this.get( 'name' ) + '-error' );\n\t\t\t\tnfRadio.channel( 'app' ).request( 'enable:changeDomain', 'setting-' + this.get( 'name' ) + '-error' );\n\t\t\t}\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collections of settings for each field type.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/settingCollection',['models/app/settingModel'], function( settingModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: settingModel,\n\n\t\tinitialize: function( models, options ) {\n\t\t\tthis.options = options || {};\n\t\t}\n\t} );\n\treturn collection;\n} );\n","/**\n * Handles actions related to field settings that use a fieldset\n * \n * @package Ninja Forms builder\n * @subpackage Fields - Edit Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/fieldset',['views/app/drawer/typeSettingFieldset','models/app/settingCollection'], function( fieldsetView, settingCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'fieldset' ).reply( 'get:settingChildView', this.getSettingChildView, this );\n\t\t\t// When a list type field is initialized, create an option collection.\n\t\t\tthis.listenTo( nfRadio.channel( 'fieldset' ), 'init:settingModel', this.createSettingsCollection );\n\t\t},\n\n\t\tgetSettingChildView: function( model ) {\n\t\t\treturn fieldsetView;\n\t\t},\n\n\t\t/**\n\t\t * Instantiate settings collection when a fieldset type is initialized.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tmodel \tfield model being initialized\n\t\t * @return void\n\t\t */\n\t\tcreateSettingsCollection: function( model ) {\n\t\t\tmodel.set( 'settings', new settingCollection( model.get( 'settings' ) ) );\n\t\t},\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles actions related to our toggle field.\n * When we change the toggle, the setting value will be 'on' or ''.\n * We need to change this to 1 or 0.\n * \n * @package Ninja Forms builder\n * @subpackage Fields - Edit Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/toggleSetting',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// We don't want the RTE setting to re-render when the value changes.\n\t\t\tnfRadio.channel( 'setting-type-toggle' ).reply( 'renderOnChange', function(){ return false } );\n\n\t\t\t// Respond to requests for field setting filtering.\n\t\t\tnfRadio.channel( 'toggle' ).reply( 'before:updateSetting', this.updateSetting, this );\n\t\t},\n\n\t\t/**\n\t\t * Return either 1 or 0, depending upon the toggle position.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \t\t\te                event\n\t\t * @param  backbone.model \tfieldModel       field model\n\t\t * @param  string \t\t\tname             setting name\n\t\t * @param  backbone.model \tsettingTypeModel field type model\n\t\t * @return int              1 or 0\n\t\t */\n\t\tupdateSetting: function( e, fieldModel, name, settingTypeModel ) {\n\t\t\tif ( jQuery( e.target ).attr( 'checked' ) ) {\n\t\t\t\tvar value = 1;\n\t\t\t} else {\n\t\t\t\tvar value = 0;\n\t\t\t}\n\n\t\t\treturn value;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens for clicks on our action item action buttons.\n * \n * @package Ninja Forms builder\n * @subpackage Fields - Main Sortable\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/itemControls',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for clicks to edit, delete, duplicate actions.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:edit', this.clickEdit );\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:delete', this.clickDelete );\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:duplicate', this.clickDuplicate );\n\n\t\t\t// Listen for our drawer close and remove our active edit state\n\t\t},\n\n\t\t/**\n\t\t * Open a drawer with our action model for editing settings.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t\t\te     \tevent\n\t\t * @param  backbone.model \tmodel \taction model\n\t\t * @return void\n\t\t */\n\t\tclickEdit: function( e, model ) {\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tvar currentDomainID = currentDomain.get( 'id' );\n\t\t\tvar type = nfRadio.channel( currentDomainID ).request( 'get:type' , model.get( 'type' ) );\n\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'editSettings', { model: model, groupCollection: type.get( 'settingGroups' ) } );\n\t\t},\n\n\t\t/**\n\t\t * Delete a action model from our collection\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t\t\te     \tevent\n\t\t * @param  backbone.model \tmodel \taction model\n\t\t * @return void\n\t\t */\n\t\tclickDelete: function( e, dataModel ) {\n\t\t\tvar newModel = nfRadio.channel( 'app' ).request( 'clone:modelDeep', dataModel );\n\n\t\t\t// Add our action deletion to our change log.\n\t\t\tvar label = {\n\t\t\t\tobject: dataModel.get( 'objectType' ),\n\t\t\t\tlabel: dataModel.get( 'label' ),\n\t\t\t\tchange: 'Removed',\n\t\t\t\tdashicon: 'dismiss'\n\t\t\t};\n\n\t\t\tvar data = {\n\t\t\t\tcollection: dataModel.collection\n\t\t\t};\n\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\tvar results = changeCollection.where( { model: dataModel } );\n\n\t\t\t_.each( results, function( changeModel ) {\n\t\t\t\tvar data = changeModel.get( 'data' );\n\t\t\t\tif ( 'undefined' != typeof data.fields ) {\n\t\t\t\t\t_.each( data.fields, function( field, index ) {\n\t\t\t\t\t\tif ( field.model == dataModel ) {\n\t\t\t\t\t\t\tdata.fields[ index ].model = newModel;\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\tchangeModel.set( 'data', data );\n\t\t\t\tchangeModel.set( 'model', newModel );\n\t\t\t\tchangeModel.set( 'disabled', true );\n\t\t\t} );\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'removeObject', newModel, null, label, data );\n\t\t\t\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tvar currentDomainID = currentDomain.get( 'id' );\n\t\t\tnfRadio.channel( currentDomainID ).request( 'delete', dataModel );\n\t\t},\n\n\t\t/**\n\t\t * Duplicate a action within our collection, adding the word \"copy\" to the label.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t\t\te     \tevent\n\t\t * @param  backbone.model \tmodel \taction model\n\t\t * @return void\n\t\t */\n\t\tclickDuplicate: function( e, model ) {\n\t\t\tvar newModel = nfRadio.channel( 'app' ).request( 'clone:modelDeep', model );\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tvar currentDomainID = currentDomain.get( 'id' );\n\n\t\t\t// Change our label.\n\t\t\tnewModel.set( 'label', newModel.get( 'label' ) + ' Copy' );\n\t\t\t// Update our ID to the new tmp id.\n\t\t\tvar tmpID = nfRadio.channel( currentDomainID ).request( 'get:tmpID' );\n\t\t\tnewModel.set( 'id', tmpID );\n\t\t\t// Add new model.\n\t\t\t// Params are: model, silent, renderTrigger, action\n\t\t\tnfRadio.channel( currentDomainID ).request( 'add', newModel, false, false, 'duplicate' );\n\t\t\t\n\t\t\t// Add our action addition to our change log.\n\t\t\tvar label = {\n\t\t\t\tobject: model.get( 'objectType' ),\n\t\t\t\tlabel: model.get( 'label' ),\n\t\t\t\tchange: 'Duplicated',\n\t\t\t\tdashicon: 'admin-page'\n\t\t\t};\n\n\t\t\tvar data = {\n\t\t\t\tcollection: nfRadio.channel( currentDomainID ).request( 'get:collection' )\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'duplicateObject', newModel, null, label, data );\n\t\t\t\n\t\t\tmodel.trigger( 'change:label', model );\n\n\t\t\t// Update preview.\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Config file for our merge tags.\n *\n * this.collection represents all of our registered merge tags.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/mergeTags',[\n\t'models/app/mergeTagCollection'\n\t], function(\n\tmergeTagCollection\n\t) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.tagSectionCollection = new mergeTagCollection();\n\t\t\tvar that = this;\n\t\t\t_.each( mergeTags, function( tagSection ) {\n\t\t\t\tif ( tagSection.tags ) {\n\t\t\t\t\tvar tags = new mergeTagCollection( tagSection.tags );\n\t\t\t\t} else {\n\t\t\t\t\tvar tags = '';\n\t\t\t\t}\n\n\t\t\t\tthat.tagSectionCollection.add( {\n\t\t\t\t\tid: tagSection.id,\n\t\t\t\t\tlabel: tagSection.label,\n\t\t\t\t\ttags: tags,\n\t\t\t\t\tdefault_group: tagSection.default_group\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\tvar fieldTags = this.tagSectionCollection.get( 'fields').get( 'tags' );\n\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t_.each( fieldCollection.models, function( field ) {\n\t\t\t\t// TODO: Make this dynamic\n\t\t\t\tif ( 'submit' !== field.get( 'type' ) ) {\n\t\t\t\t\tfieldTags.add( {\n\t\t\t\t\t\tid: field.get( 'id' ),\n\t\t\t\t\t\tlabel: field.get( 'label' ),\n\t\t\t\t\t\ttag: that.getFieldKeyFormat( field.get( 'key' ) )\n\t\t\t\t\t} );\t\t\t\t\t\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tvar calcTags = new mergeTagCollection();\n\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\t\t\tvar calcCollection = formModel.get( 'settings' ).get( 'calculations' );\n\t\t\t_.each( calcCollection.models, function( calcModel ) {\n\t\t\t\tcalcTags.add( {\n\t\t\t\t\tlabel: calcModel.get( 'name' ),\n\t\t\t\t\ttag: '{calc:' + calcModel.get( 'name' ) + '}'\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\tthis.tagSectionCollection.get( 'calcs' ).set( 'tags', calcTags );\n\n\t\t\tthis.currentElement = {};\n\t\t\tthis.settingModel = {};\n\t\t\tthis.open = false;\n\n\t\t\t// Unhook jBox Merge Tag stuff.\n\t\t\t// nfRadio.channel( 'mergeTags' ).reply( 'init', this.initMergeTags, this );\n\n\t\t\tthis.listenTo( nfRadio.channel( 'mergeTags' ), 'click:mergeTag', this.clickMergeTag );\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'add:field', this.addFieldTags );\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'delete:field', this.deleteFieldTags );\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater-calculations' ), 'update:option', this.updateCalcTags );\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater-calculations' ), 'remove:option', this.updateCalcTags );\n\n\t\t\t\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'update:currentElement', this.updateCurrentElement, this );\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'update:currentSetting', this.updateCurrentSetting, this );\n\n\t\t\t// Listen for requests for our mergeTag collection.\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'get:collection', this.getCollection, this );\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'get:mergeTag', this.getSectionModel, this );\n\n\t\t\t// When a field's ID is changed (ie from a tmpID), update the merge tag.\n            this.listenTo( nfRadio.channel( 'fieldSetting-id' ), 'update:setting', this.updateID );\n\n\t\t\t// When we edit a key, check for places that key might be used.\n\t\t\tthis.listenTo( nfRadio.channel( 'fieldSetting-key' ), 'update:setting', this.updateKey );\n\n\t\t\t// Reply to requests to check a data model for a field key when one is updated.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'replace:fieldKey', this.replaceFieldKey );\n\n\t\t\t// Reply to requests to check a data model for a field key when one is updated.\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:fieldKeyFormat', this.getFieldKeyFormat, this );\n\n\t\t\t/*\n\t\t\t * TODO: Hotkey support for adding tags.\n\t\t\t *\n\t\t\t\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'open:mergeTags', this.openMergeTags );\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'up:mergeTags', this.upMergeTags );\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'down:mergeTags', this.downMergeTags );\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'return:mergeTags', this.returnMergeTags );\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'update:open', this.updateOpen, this );\n\t\t\t*/\n\t\t},\n\n\t\t/**\n\t\t * Init merge tags within the passed view.\n\t\t * @since  3.0\n\t\t * @param  backbone.view view to be searched for merge tags.\n\t\t * @return void\n\t\t */\n\t\tinitMergeTags: function( view ) {\n\t\t\tvar mergeTagsView = nfRadio.channel( 'mergeTags' ).request( 'get:view' );\n\t\t\tvar that = this;\n\t\t\t/*\n\t\t\t * Apply merge tags jQuery plugin.\n\t\t\t *\n\t\t\t * Prevent jBox from being called multiple times on the same element\n\t\t\t */\n\t\t\tthis.jBoxes = {};\n\t\t\tvar that = this;\n\n\t\t\tjQuery( view.el ).find( '.merge-tags' ).each(function() {\n\t\t\t\tif ( 'undefined' == typeof jQuery( this ).data( 'jBox-id' ) ) {\n\t\t\t\t\tvar jBox = jQuery( this ).jBox( 'Tooltip', {\n\t\t\t\t\t\ttitle: 'Insert Merge Tag',\n\t\t\t\t\t\ttrigger: 'click',\n\t\t\t\t\t\tposition: {\n\t\t\t\t\t\t\tx: 'center',\n\t\t\t\t\t\t\ty: 'bottom'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcloseOnClick: 'body',\n\t\t\t\t\t\tcloseOnEsc: true,\n\t\t\t\t\t\ttheme: 'TooltipBorder',\n\t\t\t\t\t\tmaxHeight: 200,\n\n\t\t\t\t\t\tonOpen: function() {\n\t\t\t\t\t\t\tmergeTagsView.reRender( view.model );\n\t\t\t\t\t\t\tthis.setContent( jQuery( '.merge-tags-content' ) );\n\t\t\t\t\t\t\tvar currentElement = jQuery( this.target ).prev( '.setting' );\n\t\t\t\t\t\t\tif ( 0 == currentElement.length ) {\n\t\t\t\t\t\t\t\tcurrentElement = jQuery( view.el ).find( '.setting' );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthat.updateCurrentSetting( view.model );\n\t\t\t\t\t\t\tthat.updateCurrentElement( currentElement );\n\t\t\t\t\t\t\t// nfRadio.channel( 'drawer' ).request( 'prevent:close', 'merge-tags' );\n\t\t\t\t\t\t},\n\t\t\t\t\t\tonClose: function() {\n\t\t\t\t\t\t\t// nfRadio.channel( 'drawer' ).request( 'enable:close', 'merge-tags' );\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tjQuery( this ).data( 'jBox-id', jBox.id );\t\t\t\t\t\n\t\t\t\t}\n\t\t    });\n\t\t},\n\n\t\tclickMergeTag: function( e, tagModel ) {\n\t\t\t/*\n\t\t\t * TODO: Make this more dynamic.\n\t\t\t * Currently, the RTE is the only section that modifies how merge tags work,\n\t\t\t * but another type of setting might need to do this in the future.\n\t\t\t */\n\n\t\t\tif( 'undefined' != typeof this.settingModel.get( 'settingModel' ) && 'calculations' == this.settingModel.get( 'settingModel' ).get( 'name' ) ) {\n\n\t\t\t\tconsole.log( tagModel );\n\n\t\t\t\tvar currentValue = jQuery( this.currentElement ).val();\n\t\t\t\tvar currentPos = jQuery( this.currentElement ).caret();\n\t\t\t\tvar newPos = currentPos + tagModel.get( 'tag' ).length;\n\n\t\t\t\tvar tag = ( 'undefined' != typeof tagModel.get( 'calcTag' ) ) ? tagModel.get( 'calcTag' ) : tagModel.get( 'tag' );\n\n\t\t\t\tcurrentValue = currentValue.substr( 0, currentPos ) + tag + currentValue.substr( currentPos );\n\t\t\t\tjQuery( this.currentElement ).val( currentValue ).caret( newPos ).trigger( 'change' );\n\t\t\t} else if( 'rte' == this.settingModel.get( 'type' ) ) {\n\t\t\t\tjQuery( this.currentElement ).summernote( 'insertText', tagModel.get( 'tag' ) );\n\t\t\t} else {\n\t\t\t\tvar currentValue = jQuery( this.currentElement ).val();\n\t\t\t\tvar currentPos = jQuery( this.currentElement ).caret();\n\t\t\t\tvar newPos = currentPos + tagModel.get( 'tag' ).length;\n\t\t\t\tcurrentValue = currentValue.substr( 0, currentPos ) + tagModel.get( 'tag' ) + currentValue.substr( currentPos );\n\t\t\t\tjQuery( this.currentElement ).val( currentValue ).caret( newPos ).trigger( 'change' );\n\t\t\t}\n\t\t},\n\n\t\taddFieldTags: function( fieldModel ) {\n\t\t\t// TODO: Make this dynamic\n\t\t\tif ( 'submit' !== fieldModel.get( 'type' ) ) {\n\t\t\t\tthis.tagSectionCollection.get( 'fields' ).get( 'tags' ).add( {\n\t\t\t\t\tid: fieldModel.get( 'id' ),\n\t\t\t\t\tlabel: fieldModel.get( 'label' ),\n\t\t\t\t\ttag: this.getFieldKeyFormat( fieldModel.get( 'key' ) ),\n\t\t\t\t\tcalcTag: this.getFieldKeyFormatCalc( fieldModel.get( 'key' ) )\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\n\t\tdeleteFieldTags: function( fieldModel ) {\n\t\t\tvar fieldID = fieldModel.get( 'id' );\n\t\t\tvar tagModel = this.tagSectionCollection.get( 'fields' ).get( 'tags' ).get( fieldID );\n\t\t\tthis.tagSectionCollection.get( 'fields' ).get( 'tags' ).remove( tagModel );\n\t\t},\n\n\t\tupdateCalcTags: function( optionModel ) {\n\t\t\tvar calcTags = new mergeTagCollection();\n\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\t\t\tvar calcCollection = formModel.get( 'settings' ).get( 'calculations' );\n\n\t\t\t_.each( calcCollection.models, function( calc ) {\n\t\t\t\tcalcTags.add( {\n\t\t\t\t\tlabel: calc.get( 'name' ),\n\t\t\t\t\ttag: '{calc:' + calc.get( 'name' ) + '}'\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\tthis.tagSectionCollection.get( 'calcs' ).set( 'tags', calcTags );\n\t\t},\n\n\t\topenMergeTags: function( e ) {\n\t\t\tif ( 'TEXTAREA' == jQuery( e.target )[0].tagName || 'INPUT' == jQuery( e.target )[0].tagName ) {\n\t\t\t\tjQuery( e.target ).parent().find( '.merge-tags' ).click();\n\t\t\t}\n\t\t},\n\n\t\treturnMergeTags: function( e ) {\n\t\t\tif ( this.open ) {\n\t\t\t\te.preventDefault();\n\t\t\t\tvar currentModel = this.fields.where( { 'active': true } )[0];\n\t\t\t\tif ( currentModel ) {\n\t\t\t\t\tthis.clickMergeTag( e, currentModel );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tupMergeTags: function( e ) {\n\t\t\tif ( this.open ) {\n\t\t\t\te.preventDefault();\n\t\t\t\tthis.changeActiveTag( 'up' );\n\t\t\t}\n\t\t},\n\n\t\tdownMergeTags: function( e ) {\n\t\t\tif ( this.open ) {\n\t\t\t\te.preventDefault();\n\t\t\t\tthis.changeActiveTag( 'down' );\n\t\t\t}\n\t\t},\n\n\t\tchangeActiveTag: function( dir ) {\n\t\t\tif ( 'down' == dir ) {\n\t\t\t\tvar inc = 1;\n\t\t\t} else {\n\t\t\t\tvar inc = -1\n\t\t\t}\n\t\t\t// First, check to see if a field is currently active.\n\t\t\tif( 0 < this.fields.where( { 'active': true } ).length ) {\n\t\t\t\tvar currentModel = this.fields.where( { 'active': true } )[0];\n\t\t\t\tvar currentIndex = this.fields.indexOf( currentModel );\n\t\t\t\tcurrentModel.set( 'active', false );\n\n\t\t\t\tvar nextModel = this.fields.models[ currentIndex + inc ];\n\t\t\t\tif ( nextModel ) {\n\t\t\t\t\tnextModel.set( 'active', true );\n\t\t\t\t} else {\n\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else if ( 0 < this.fields.where( { 'active': true } ) ) { // There aren't any active fields. Check for active system tags.\n\t\t\t\tconsole.log( 'system' );\n\t\t\t} else if ( 0 < this.userInfo.where( { 'active': true } ) ) { // No active user info LIs.\n\t\t\t\tconsole.log( 'userinfo' );\n\t\t\t} else { // No active LIs. We haven't made any active yet, or we've gotten to the bottom of the list.\n\t\t\t\t// Make sure that we have fields\n\t\t\t\tif ( 0 < this.fields.models.length ) {\n\t\t\t\t\t// Set our first field to active.\n\t\t\t\t\tthis.fields.models[0].set( 'active', true );\n\t\t\t\t} else {\n\t\t\t\t\t// Set our first system model to active.\n\t\t\t\t\tthis.system.models[0].set( 'active', true );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tupdateCurrentElement: function( element ) {\n\t\t\tthis.currentElement = element;\n\t\t},\n\n\t\tupdateCurrentSetting: function( settingModel ) {\n\t\t\tthis.settingModel = settingModel;\n\t\t},\n\n\t\tgetCollection: function() {\n\t\t\treturn this.tagSectionCollection;\n\t\t},\n\n\t\tgetSectionModel: function( id ) {\n\t\t\treturn this.tagSectionCollection.get( id );\n\t\t},\n\n\t\tupdateOpen: function( open ) {\n\t\t\tthis.open = open;\n\t\t\t_.each( this.tagSectionCollection.get( 'fields' ).models, function( model ) {\n\t\t\t\tmodel.set( 'active', false );\n\t\t\t} );\n\t\t},\n\n\t\t// When a field is published, update the merge tag with the newly assigned ID (as opposed to the tmpID).\n        updateID: function( fieldModel ) {\n\n\t\t\t// Get the formatted merge tag for comparison.\n\t\t\tvar targetTag = this.getFieldKeyFormat( fieldModel.get( 'key' ) );\n\n\t\t\t// Search the field tags for the matching merge tag to be updated.\n\t\t\tvar oldTag = this.tagSectionCollection.get( 'fields' ).get( 'tags' ).find( function( fieldMergeTag ){\n                return targetTag == fieldMergeTag.get( 'tag' );\n            });\n\n\t\t\t// If no matching tag is found, return early.\n\t\t\tif( 'undefined' == typeof oldTag ) return;\n\n\t\t\t// Update the merge tag with the \"published\" field ID.\n\t\t\toldTag.set( 'id', fieldModel.get( 'id' ) );\n\t\t},\n\n\t\tupdateKey: function( fieldModel ) {\n\t\t\tvar newKey = fieldModel.get( 'key' );\n\t\t\tvar oldTag = this.tagSectionCollection.get( 'fields' ).get( 'tags' ).get( fieldModel.get( 'id' ) );\n\t\t\tif ( 'undefined' != typeof oldTag ) {\n\t\t\t\toldTag.set( 'tag', this.getFieldKeyFormat( newKey ) );\t\t\t\t\n\t\t\t}\n\n\t\t},\n\n\t\tgetFieldKeyFormat: function( key ) {\n\t\t\treturn '{field:' + key + '}';\n\t\t},\n\n\t\tgetFieldKeyFormatCalc: function( key ) {\n\t\t\treturn '{field:' + key + ':calc}';\n\t\t},\n\n\t\treplaceFieldKey: function( dataModel, keyModel, settingModel ) {\n            var oldKey = this.getFieldKeyFormat( keyModel._previousAttributes[ 'key' ] );\n\t\t\tvar newKey = this.getFieldKeyFormat( keyModel.get( 'key' ) );\n\t\t\tvar settingName = settingModel.get( 'name' );\n\t\t\tvar oldVal = dataModel.get( settingName );\n            if(settingName == 'calculations' && 'undefined' != typeof(dataModel.get('calculations'))) {\n                var calcModel = dataModel.get( 'calculations' );\n                calcModel.each( function( model ) {\n                    var oldCalcKey = oldKey.slice( 0, (oldKey.length - 1) ) + ':calc}';\n                    var newCalcKey = newKey.slice( 0, (newKey.length - 1 ) ) + ':calc}';\n                    oldVal = model.get( 'eq' );\n                    if ( 'string' == typeof( oldVal ) ) {\n                        var re = new RegExp( oldCalcKey, 'g' );\n                        var newVal = oldVal.replace( re, newCalcKey );\n                        re = new RegExp( oldKey, 'g' );\n                        // TODO: We won't need this second replace when we no longer\n                        // have to append :calc to merge tags.\n                        newVal = newVal.replace( re, newKey );\n                        model.set( 'eq', newVal );\n                    }\n                } );\n                return false;\n            }\n\t\t\tif ( 'string' == typeof oldVal ) {\n\t\t\t\tvar re = new RegExp( oldKey, 'g' );\n\t\t\t\tnewVal = oldVal.replace( re, newKey );\n\t\t\t\tdataModel.set( settingName, newVal );\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/mergeTagLookupCollection',['models/app/mergeTagModel'], function( mergeTagModel ) {\n    var collection = Backbone.Collection.extend( {\n        model: mergeTagModel\n    } );\n    return collection;\n} );\n","/**\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/mergeTag',[], function() {\n    var view = Marionette.ItemView.extend({\n        tagName: 'li',\n        template: '#tmpl-nf-merge-tag-box-tag',\n\n        events: {\n            \"click\": \"insertTag\"\n        },\n\n        insertTag: function() {\n            nfRadio.channel( 'mergeTags' ).request( 'insert:tag', this.model.get( 'tag' ) );\n        }\n    });\n\n    return view;\n} );\n","/**\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/mergeTagList',[ 'views/app/drawer/mergeTag' ], function( mergeTagView ) {\n    var view = Marionette.CollectionView.extend({\n        tagName: 'ul',\n        childView: mergeTagView,\n\n        initialize: function() {\n            nfRadio.channel( 'merge-tags' ).reply( 'update:taglist', this.sectionFilter, this );\n            nfRadio.channel( 'merge-tags' ).reply( 'filtersearch', this.searchFilter, this );\n        },\n\n        filter: function( child, index, collection ){\n            return 'fields' == child.get( 'section' );\n        },\n\n        sectionFilter: function( section ){\n            this.filter = function( child, index, collection ){\n                return section == child.get( 'section' );\n            }\n            this.render();\n            nfRadio.channel( 'merge-tags' ).trigger( 'after:filtersearch' );\n        },\n\n        searchFilter: function( term ){\n            this.filter = function( child, index, collection ){\n                var label = child.get( 'label' ).toLowerCase().indexOf( term.toLowerCase().replace( ':', '' ) ) >= 0;\n                var tag   = child.get( 'tag' ).toLowerCase().indexOf( term.toLowerCase() ) >= 0;\n                return label || tag;\n            }\n            this.render();\n            nfRadio.channel( 'merge-tags' ).trigger( 'after:filtersearch' );\n\n        }\n    });\n\n    return view;\n} );\n","/**\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/mergeTagGroup',[], function() {\n    var view = Marionette.ItemView.extend({\n        tagName: 'li',\n        template: '#tmpl-nf-merge-tag-box-section',\n        events: {\n            \"click\": \"onClick\"\n        },\n\n        initialize: function () {\n            this.listenTo( nfRadio.channel( 'merge-tags' ), 'after:filtersearch', this.removeActive );\n        },\n\n        onClick: function(){\n          this.updateTags();\n          this.setActive();\n        },\n\n        updateTags: function() {\n            nfRadio.channel( 'merge-tags' ).request( 'update:taglist', this.model.get( 'id' ) );\n        },\n\n        setActive: function(){\n            this.$el.addClass( 'active' );\n            this.$el.siblings().removeClass( 'active' );\n        },\n\n        removeActive: function(){\n            this.$el.removeClass( 'active' );\n        }\n    });\n\n    return view;\n} );\n","/**\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/mergeTagGroupList',[ 'views/app/drawer/mergeTagGroup' ], function( mergeTagGroupView ) {\n    var view = Marionette.CollectionView.extend({\n        tagName: 'ul',\n        childView: mergeTagGroupView,\n\n        initialize: function(){\n            this.listenTo( nfRadio.channel( 'merge-tags' ), 'open', this.render, this );\n        },\n\n        // TODO: Update filter when a new tag is added. ie Calculations.\n        filter: function( child, index, collection ){\n            return 0 < child.get( 'tags' ).length;\n        },\n    });\n\n    return view;\n} );\n","/**\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/mergeTagFilter',[], function() {\n    var view = Marionette.ItemView.extend({\n        template: '#tmpl-nf-merge-tag-box-filter',\n        events: {\n            \"keyup input\": \"updateFilter\",\n        },\n        updateFilter: function( event ) {\n\n            if( /* ENTER */ 13 == event.keyCode ){ // Copied from Keyup Callback.\n                // Get top listed merge tag.\n                var firstFilteredTag = jQuery( '#merge-tags-box .merge-tag-list ul li span' ).first().data( 'tag' );\n\n                nfRadio.channel( 'mergeTags' ).request( 'insert:tag', firstFilteredTag );\n\n                // COPIED FROM BELOW\n                jQuery( '#merge-tags-box' ).css( 'display', 'none' );\n                jQuery( '#merge-tags-box' ).removeClass();\n                jQuery( '.merge-tag-focus' ).removeClass( 'merge-tag-focus' );\n                jQuery( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\n                return;\n            }\n            var value = this.$el.find( 'input' ).val();\n            nfRadio.channel( 'merge-tags' ).request( 'filtersearch', value );\n        }\n    });\n\n    return view;\n} );\n","/**\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/mergeTagBox',[], function() {\n    var view = Marionette.LayoutView.extend({\n        el: '#merge-tags-box',\n        template: \"#tmpl-nf-merge-tag-box\",\n\n        regions: {\n            filter:   '.merge-tag-filter',\n            sections: '.merge-tag-sections',\n            tags:     '.merge-tag-list'\n        },\n    });\n\n    return view;\n} );\n","/**\n * @package Ninja Forms builder\n * @subpackage Merge Tag Box\n * @copyright (c) 2017 WP Ninjas\n * @since 3.1\n */\n\ndefine( 'controllers/app/mergeTagBox',[\n    'models/app/mergeTagModel',\n    'models/app/mergeTagLookupCollection',\n    'views/app/drawer/mergeTag',\n    'views/app/drawer/mergeTagList',\n    'views/app/drawer/mergeTagGroup',\n    'views/app/drawer/mergeTagGroupList',\n    'views/app/drawer/mergeTagFilter',\n    'views/app/drawer/mergeTagBox'\n], function(\n    MergeTagModel,\n    MergeTagLookupCollection,\n    MergeTagView,\n    MergeTagListView,\n    MergeTagGroupView,\n    MergeTagGroupListView,\n    MergeTagFilterView,\n    MergeTagBoxLayout\n) {\n    var controller = Marionette.Object.extend( {\n\n        caret: 0, // Track the caret position of the current setting's input.\n        old: '', // THe old merge tag that will be replaced.\n\n        initialize: function(){\n\n            this.listenTo( nfRadio.channel( 'drawer' ), 'render:settingGroup', function(){\n                jQuery( '.merge-tags' ).off( 'click' );\n                jQuery( '.merge-tags' ).on( 'click', this.mergeTagsButtonClick );\n            });\n\n            this.listenTo( nfRadio.channel( 'app' ), 'after:appStart', this.afterAppStart );\n            this.listenTo( nfRadio.channel( 'app' ), 'before:renderSetting', this.beforeRenderSetting );\n            this.listenTo( nfRadio.channel( 'drawer' ), 'before:close', this.beforeDrawerClose );\n\n            var that = this;\n            nfRadio.channel( 'mergeTags' ).reply( 'set:caret', function( position ){\n               that.caret = position;\n            });\n            nfRadio.channel( 'mergeTags' ).reply( 'get:caret', function(){\n                return that.caret;\n            });\n\n            var that = this;\n            nfRadio.channel( 'mergeTags' ).reply( 'set:old', function( value ){\n                that.old = value;\n            });\n            nfRadio.channel( 'mergeTags' ).reply( 'get:old', function(){\n                return that.old;\n            });\n\n            nfRadio.channel( 'mergeTags' ).reply( 'insert:tag', this.insertTag.bind( this ) );\n\n            /** OPTION REPEATER */\n            this.listenTo( nfRadio.channel( 'option-repeater' ), 'add:option', function( model ){\n                var selector = '#' + model.cid + ' .has-merge-tags input.setting';\n                jQuery( selector ).on( 'focus', function( event ){\n                   that.focusCallback( event, selector, 'option-repeater' );\n                });\n                jQuery( selector ).on( 'keyup', function( event ){\n                    that.keyupCallback( event, selector, 'option-repeater' );\n                });\n                jQuery( selector ).siblings( '.nf-list-options .merge-tags' ).off( 'click' );\n                jQuery( selector ).siblings( '.nf-list-options .merge-tags' ).on( 'click', this.mergeTagsButtonClick );\n            } );\n            this.listenTo( nfRadio.channel( 'drawer' ), 'opened', function(){\n                jQuery( '.nf-list-options .merge-tags' ).off( 'click' );\n                jQuery( '.nf-list-options .merge-tags' ).on( 'click', this.mergeTagsButtonClick );\n            } );\n\n            /* CALCULATIONS */\n            this.listenTo( nfRadio.channel( 'setting-calculations-option' ), 'render:setting', this.renderSetting );\n            // this.listenTo( nfRadio.channel( 'setting-calculations-option' ), 'render:setting', function( settingModel, dataModel, view ){\n            //     view.$el.find( '.merge-tags' ).on( 'click', this.mergeTagsButtonClick );\n            // } );\n            this.listenTo( nfRadio.channel( 'drawer' ), 'opened', function(){\n                jQuery( '.nf-list-options.calculations .merge-tags' ).off( 'click' );\n                jQuery( '.nf-list-options.calculations .merge-tags' ).on( 'click', this.mergeTagsButtonClick );\n            } );\n\n            /* SUMMERNOTE */\n            this.listenTo( nfRadio.channel( 'summernote' ), 'focus', function( e, selector ) {\n                that.focusCallback( false, selector, 'rte' );\n            } );\n            this.listenTo( nfRadio.channel( 'summernote' ), 'keydown', function( e, selector ){\n                jQuery( selector ).closest( '.nf-setting' ).find( '.setting' ).summernote( 'saveRange' );\n            } );\n            this.listenTo( nfRadio.channel( 'summernote' ), 'keyup', function( e, selector ){\n                that.keyupCallback( e, selector, 'rte' );\n            } );\n            this.listenTo( nfRadio.channel( 'drawer' ), 'opened', function(){\n                jQuery( '.note-editor .merge-tags' ).off( 'click' );\n                jQuery( '.note-editor .merge-tags' ).on( 'click', this.mergeTagsButtonClick );\n            } );\n\n            jQuery( document ).on( 'keyup', function( event ){\n                if( 27 == event.keyCode ){\n                    nfRadio.channel( 'mergeTags' ).request( 'insert:tag', '' );\n                    // Copied from KeyupCallback.\n                    jQuery( '#merge-tags-box' ).css( 'display', 'none' );\n                    nfRadio.channel( 'drawer' ).request( 'enable:close' );\n                    jQuery( '#merge-tags-box' ).removeClass();\n                    jQuery( '.merge-tag-focus' ).blur();\n                    jQuery( '.merge-tag-focus' ).removeClass( 'merge-tag-focus' );\n                    jQuery( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\n                }\n            });\n\n            /**\n             * Listen to the Field Changes (add, delete, update) and update the Merge Tags.\n             */\n            this.listenTo( Backbone.Radio.channel( 'fields' ), 'add:field',    this.afterAppStart );\n            this.listenTo( Backbone.Radio.channel( 'fields' ), 'delete:field', this.afterAppStart );\n            this.listenTo( Backbone.Radio.channel( 'fieldSetting-key' ), 'update:setting', this.afterAppStart );\n\n            /** ... and Calc updates. */\n            this.listenTo( Backbone.Radio.channel( 'calcs' ), 'update:calc', this.afterAppStart );\n\n            this.listenTo( Backbone.Radio.channel( 'app' ), 'change:currentDomain', this.afterAppStart );\n        },\n\n        afterAppStart: function() {\n\n            var currentDomain = Backbone.Radio.channel( 'app' ).request( 'get:currentDomain' );\n\n            var mergeTagCollection = nfRadio.channel( 'mergeTags' ).request( 'get:collection' );\n            var mergeTags = [];\n            mergeTagCollection.each( function( section ){\n\n                section.get( 'tags' ).each( function( tag ){\n\n                    if( 'fields' == currentDomain.get( 'id' ) && '{submission:sequence}' == tag.get( 'tag' ) ) return;\n\n                    mergeTags.push({\n                        label: tag.get( 'label' ),\n                        tag:   tag.get( 'tag' ),\n                        section: section.get( 'id' )\n                    });\n                });\n            });\n            var layout = new MergeTagBoxLayout();\n            layout.render();\n            var tagCollection = new MergeTagLookupCollection( mergeTags );\n            var mergeTagListView = new MergeTagListView({\n                collection: tagCollection\n            });\n            var mergeTagGroupListView = new MergeTagGroupListView({\n                collection: mergeTagCollection\n            });\n\n            layout.getRegion('tags').show(mergeTagListView);\n            layout.getRegion('sections').show(mergeTagGroupListView);\n            layout.getRegion('filter').show(new MergeTagFilterView);\n        },\n\n        beforeRenderSetting: function( settingModel, dataModel ){\n            if( 'undefined' == typeof settingModel.get( 'use_merge_tags' ) ) return;\n            if( ! settingModel.get( 'use_merge_tags' ) ) return;\n            var name = settingModel.get( 'name' );\n            this.listenTo( nfRadio.channel( 'setting-' + name ), 'render:setting', this.renderSetting );\n        },\n\n        renderSetting: function( settingModel, dataModel, view ){\n\n            view.$el.find( '.merge-tags' ).off( 'click' );\n            view.$el.find( '.merge-tags' ).on( 'click', this.mergeTagsButtonClick );\n\n            if( 0 == jQuery( '#merge-tags-box' ).length ) this.afterAppStart();\n\n            // Track Scrolling.\n            jQuery( '#nf-drawer' ).on( 'scroll', function(){\n               // COPIED AND MODIFIED FROM FOCUS\n                if( 0 == jQuery( '.merge-tag-focus' ).length ) return;\n\n                var rteEditor = jQuery( '.merge-tag-focus' ).closest( '.nf-setting' ).find( '.note-editor' );\n                if( 0 != rteEditor.length ){\n                    var posY = rteEditor.offset().top - jQuery(window).scrollTop();\n                    var height = rteEditor.outerHeight();\n                } else {\n                    var posY = jQuery('.merge-tag-focus').offset().top - jQuery(window).scrollTop();\n                    var height = jQuery('.merge-tag-focus').outerHeight();\n                }\n\n\t            // Find out if merge tag box will go below bottom of the page.\n\t            var tagBoxY = posY + height;\n\t            var windowHeight = window.innerHeight;\n\t            var tagBoxHeight = jQuery( '#merge-tags-box' ).outerHeight();\n\n\t            // If merge tag box will render below the bottom of the page,\n\t            // change it to render above the field\n\n\t            if ( ( tagBoxY + tagBoxHeight ) > windowHeight ) {\n\t\t            tagBoxY = posY - tagBoxHeight;\n\t            }\n\n                jQuery( '#merge-tags-box' ).css( 'top', tagBoxY );\n\n                var boxHeight = jQuery( '#merge-tags-box' ).outerHeight();\n                jQuery( '#nf-drawer' ).css( 'padding-bottom', boxHeight + 'px' );\n\n                var repeaterRow = jQuery( '.merge-tag-focus' ).closest( '.nf-list-options-tbody' );\n                if( 0 != repeaterRow.length ){\n                    var left = repeaterRow.offset().left - jQuery(window).scrollLeft();\n                    jQuery( '#merge-tags-box' ).css( 'left', left );\n                } else {\n                    var posX = jQuery( '.merge-tag-focus' ).closest( '.nf-settings' ).offset().left - jQuery(window).scrollLeft();\n                    jQuery( '#merge-tags-box' ).css( 'left', posX );\n                    jQuery( '#merge-tags-box' ).css( 'width', jQuery( '.merge-tag-focus' ).closest( '.nf-settings' ).width() );\n                }\n            });\n\n            // On input focus, move the Merge Tag Box into position.\n            jQuery( view.el ).find( '.setting' ).on( 'focus', this.focusCallback );\n\n            // TODO: Maybe move to view events.\n            // On input keyup, maybe show Merge Tag Box.\n            jQuery( view.el ).find( '.setting' ).on( 'keyup', this.keyupCallback );\n        },\n\n        // TODO: Maybe move to view class.\n        beforeDrawerClose: function(){\n            jQuery( '#merge-tags-box' ).css( 'display', 'none' );\n            nfRadio.channel( 'drawer' ).request( 'enable:close' );\n            // jQuery( 'body' ).append( jQuery( '#merge-tags-box' ) );\n        },\n\n        insertTag: function( tag ) {\n\n            var $input = jQuery( '.merge-tag-focus' );\n\n            if( 0 != $input.closest( '.nf-setting' ).first().find( '.note-editable' ).length ){\n                $input = $input.closest( '.nf-setting' ).first().find( '.note-editable' );\n            }\n\n            if( 1 < $input.length ){ $input = $input.first(); }\n\n            if( $input.hasClass( 'note-editable' ) ){\n                var str = $input.closest( '.nf-setting' ).find( '.setting' ).summernote( 'code' );\n            } else {\n                var str = $input.val();\n            }\n\n            var find = nfRadio.channel( 'mergeTags' ).request( 'get:old' );\n            var replace = tag;\n            var caretPos = nfRadio.channel( 'mergeTags' ).request( 'get:caret' );\n\n            var patt = /{([a-zA-Z0-9]|:|_||-})*/g;\n\n            // Loop through matches to find insert/replace index range.\n            // Reference: http://codepen.io/kjohnson/pen/36c3a782644dfff40fe3c1f05f8739d9?editors=0012\n            while (match = patt.exec(str)) {\n                if (find != match[0]) continue; // This isn't the match you are looking for...\n                var string = str.slice(0, match.index) + replace + str.slice(patt.lastIndex); // Fancy replace for the specifc match, using the index/position.\n\n                if( $input.hasClass( 'note-editable' ) ){\n                    $input.closest( '.nf-setting' ).find( '.setting' ).summernote( 'code', string );\n\n                    // Reposition the caret. http://stackoverflow.com/a/6249440 TODO: Determine the appropriate childNode.\n                    var el = $input;\n                    var childNode = null; // Default to first childNode.\n                    _.each( el[0].childNodes, function( node, index ){\n                        if( childNode ) return;\n                        if( ! node.nodeValue && ! node.innerHTML ) return;\n                        if( node.nodeValue ) {\n                            var value = node.nodeValue;\n                        } else if( node.innerHTML ){\n                            var value = node.innerHTML;\n                        }\n\n                        if( -1 == value.indexOf(replace) ) return; // Replace not found in this node.\n\n                        value = value.replace( /&nbsp;/g, ' ' );\n                        var position = value.indexOf(replace) + find.length;\n\n                        /*\n                         * If no caretPos, determine based on the node. ie Merge Tag Button context.\n                         * Note: We can't just check for '{', because they could just be inserting the first tag.\n                         */\n                        if( -1 == caretPos ){\n                            caretPos = value.indexOf( replace ) + 1;\n                        }\n\n                        if (caretPos == position) childNode = el[0].childNodes[index];\n                    });\n                    if( ! childNode ) childNode = el[0].childNodes[0];\n                    var offset = caretPos - find.length + replace.length;\n                    var range = document.createRange();\n                    var sel = window.getSelection();\n                    if( 0 != childNode.childNodes.length ) {\n                        try{\n                           range.setStart(childNode.childNodes[0], offset); \n                        } catch( err ) {\n                            console.log( childNode );\n                            console.log( 'error' );\n                        }\n                        \n                    } else {\n                        try {\n                            range.setStart(childNode, offset);\n                        } catch( err ) {\n                            console.log( 'error' );\n                        }\n                        \n                    }\n                    range.collapse(true);\n                    sel.removeAllRanges();\n                    sel.addRange(range);\n\n\n                } else {\n                    $input.val(string); // Update input value with parsed string.\n                    $input.change(); // Trigger a change event after inserting the merge tag so that it saves to the model.\n                    $input.caret(caretPos - find.length + replace.length); // Update Carept Position.\n                }\n\n            }\n\n            jQuery( '#merge-tags-box' ).css( 'display', 'none' );\n            nfRadio.channel( 'drawer' ).request( 'enable:close' );\n            $input.removeClass( 'merge-tag-focus' );\n            $input.closest( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\n        },\n\n        mergeTagsButtonClick: function( e ){\n\n            var $this = jQuery( this );\n\n            if( $this.siblings().hasClass( 'merge-tag-focus' ) ){\n                nfRadio.channel( 'mergeTags' ).request( 'insert:tag', '' );\n                jQuery( '#merge-tags-box' ).css( 'display', 'none' );\n                nfRadio.channel( 'drawer' ).request( 'enable:close' );\n                jQuery( '.merge-tag-focus' ).removeClass( 'merge-tag-focus' );\n                jQuery( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\n                return;\n            }\n\n            if( 0 !== $this.closest( '.nf-setting, .nf-table-row' ).find( '.note-tools' ).length ){\n                var $inputSetting = $this.closest( '.note-editor' ).siblings( '.setting' ).first();\n                $this.closest( '.nf-setting' ).find( '.setting' ).summernote( 'insertText', '{' );\n                // Since we haven't determined the caretPos, set to -1 as a flag to determine later.\n                nfRadio.channel('mergeTags').request( 'set:caret', -1 );\n            } else {\n                var $inputSetting = $this.siblings( '.setting' ).first();\n                var text = $inputSetting.val() || '';\n                $inputSetting.val( text + '{' ).change();\n                nfRadio.channel('mergeTags').request('set:caret', text.length + 1 );\n            }\n\n            if( $this.parent().hasClass( 'note-tools' ) ){\n                // $this.closest( '.nf-setting' ).find( '.setting' ).summernote( 'insertText', '{' );\n            }\n\n            nfRadio.channel('mergeTags').request('set:old', '{' );\n\n            $inputSetting.addClass( 'merge-tag-focus' );\n\n            // Disable browser autocomplete.\n            var autocomplete = $this.attr( 'autocomplete' );\n            $this.attr( 'autocomplete', 'off' );\n            $this.data( 'autocomplete', autocomplete );\n\n            var $overlayElement = $this.closest( '.nf-setting, .nf-table-row' );\n            if( 0 != $overlayElement.find( '.note-editor' ).length ){\n                $overlayElement.find('.note-editor' ).addClass('merge-tag-focus-overlay');\n            } else {\n                $overlayElement.addClass('merge-tag-focus-overlay');\n            }\n\n            jQuery( '#merge-tags-box' ).css( 'display', 'block' );\n            nfRadio.channel( 'drawer' ).request( 'prevent:close' );\n\n            jQuery( '.merge-tag-focus-overlay' ).off( 'click' );\n            jQuery( '.merge-tag-focus-overlay' ).on( 'click', function( e ) {\n                if ( jQuery( e.target ).hasClass( 'note-editor' ) ) {\n                    nfRadio.channel( 'mergeTags' ).request( 'insert:tag', '' );\n                    jQuery( '#merge-tags-box' ).css( 'display', 'none' );\n                    nfRadio.channel( 'drawer' ).request( 'enable:close' );\n                    jQuery( '#merge-tags-box' ).removeClass();\n                    jQuery( '.merge-tag-focus' ).removeClass( 'merge-tag-focus' );\n                    jQuery( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\n                }\n            } );\n\n            setTimeout(function(){\n                jQuery( '#merge-tags-box' ).find( '.merge-tag-filter' ).find( 'input' ).focus();\n            }, 500 );\n        },\n\n        focusCallback: function( e, target, type ){\n\n            var type = type || 'setting';\n            var $this = ( 'undefined' == typeof target ) ? jQuery( this ) : jQuery( target );\n\n            jQuery( '.merge-tag-focus' ).each(function(index, el){\n                if( this == el ) return;\n                el.removeClass( 'merge-tag-focus' );\n            });\n\n            if( 'rte' == type ) {\n                var posY = $this.closest( '.nf-setting' ).find( '.note-editor' ).offset().top - jQuery(window).scrollTop();\n                var height = $this.closest( '.nf-setting' ).find( '.note-editor' ).outerHeight();\n            } else {\n                var posY = $this.offset().top - jQuery(window).scrollTop();\n                var height = $this.outerHeight();\n            }\n\n            // Find out if merge tag box will go below bottom of the page.\n\t        var tagBoxY = posY + height;\n\t        var windowHeight = window.innerHeight;\n\t        var tagBoxHeight = jQuery( '#merge-tags-box' ).outerHeight();\n\n\t        // If merge tag box will render below the bottom of the page,\n            // change it to render above the field\n\n\t        if ( ( tagBoxY + tagBoxHeight ) > windowHeight ) {\n\t\t        tagBoxY = posY - tagBoxHeight;\n\t        }\n\n            jQuery( '#merge-tags-box' ).css( 'top', tagBoxY );\n\n            var repeaterRow = $this.closest( '.nf-list-options-tbody' );\n            if( 0 != repeaterRow.length ) {\n                var left = repeaterRow.offset().left - jQuery(window).scrollLeft();\n                jQuery( '#merge-tags-box' ).css( 'left', left );\n            } else if( 'rte' == type ) {\n                var posX = $this.closest( '.nf-setting' ).find( '.note-editor' ).offset().left - jQuery(window).scrollLeft();\n                jQuery( '#merge-tags-box' ).css( 'left', posX );\n                jQuery( '#merge-tags-box' ).css( 'width', $this.closest( '.nf-setting' ).find( '.note-editor' ).width() );\n            }\n            else\n            {\n                var posX = jQuery( this ).closest( '.nf-settings' ).offset().left - jQuery(window).scrollLeft();\n                jQuery( '#merge-tags-box' ).css( 'left', posX );\n                jQuery( '#merge-tags-box' ).css( 'width', $this.closest( '.nf-settings' ).width() );\n            }\n\n            var dataID = jQuery( this ).data( 'id' );\n            if( dataID && 'eq' != dataID ) return;\n\n            // var offset = jQuery( view.el ).find( '.setting' ).parent().outerHeight();\n            // jQuery( view.el ).find( '.setting' ).parent().append( jQuery( '#merge-tags-box' ) );\n            // jQuery( '#merge-tags-box' ).css( 'top', offset );\n        },\n\n        keyupCallback: function( event, target, type ){\n\n            var type = type || 'setting';\n\n            if( /* ENTER */ 13 == event.keyCode ){\n\n                // Get top listed merge tag.\n                var firstFilteredTag = jQuery( '#merge-tags-box .merge-tag-list ul li span' ).first().data( 'tag' );\n\n                nfRadio.channel( 'mergeTags' ).request( 'insert:tag', firstFilteredTag );\n\n                // COPIED FROM BELOW\n                jQuery( '#merge-tags-box' ).css( 'display', 'none' );\n                nfRadio.channel( 'drawer' ).request( 'enable:close' );\n                jQuery( '#merge-tags-box' ).removeClass();\n                jQuery( '.merge-tag-focus' ).removeClass( 'merge-tag-focus' );\n                jQuery( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\n\n                return;\n            }\n\n            // Get the value.\n            // var value = jQuery( summernote ).summernote( 'code' );\n            // Update the value.\n            // jQuery( summernote ).closest( '.nf-setting' ).find( '.note-editable' ).html( value );\n\n            if( 'undefined' != typeof target ) {\n                var $this = jQuery(target);\n            } else {\n                var $this = jQuery( this );\n            }\n\n            // TODO: Disable Browser Autocomplete\n            // $this.attr()\n\n\n            var dataID = jQuery( this ).data( 'id' );\n            if( dataID && 'eq' != dataID ) return;\n\n            // Store the current caret position.\n            if( 'rte' == type ){\n                var range = $this.summernote('createRange');\n                if( range ) {\n                    var caretPos = range.so; // or .eo?\n                } else {\n                    var caretPos = 0;\n                }\n                $this.closest( '.nf-setting' ).find( '.setting' ).summernote( 'saveRange' );\n            } else {\n                var caretPos = $this.caret();\n            }\n            nfRadio.channel( 'mergeTags' ).request( 'set:caret', caretPos );\n\n            // Find merge tags.\n            if( 'rte' == type ) {\n                var mergetags = $this.summernote( 'code' ).match(new RegExp(/{([a-zA-Z0-9]|:|_|-|})*/g));\n            } else {\n                var mergetags = $this.val().match(new RegExp(/{([a-zA-Z0-9]|:|_|-|})*/g));\n            }\n\n            // Filter out closed merge tags.\n            mergetags = _.filter(mergetags, function(mergetag) {\n                return -1 == mergetag.indexOf( '}' ); // Filter out \"closed\" merge tags.\n            });\n\n            // If an open merge tag is found, show the Merge Tag Box, else hide.\n            if( 0 !== mergetags.length ) {\n\n                nfRadio.channel( 'mergeTags' ).request( 'set:old', mergetags[0] );\n\n                jQuery('#merge-tags-box').css( 'display', 'block' );\n                nfRadio.channel( 'drawer' ).request( 'prevent:close' );\n                $this.addClass('merge-tag-focus');\n\n                var boxHeight = jQuery( '#merge-tags-box' ).outerHeight();\n                jQuery( '#nf-drawer' ).css( 'padding-bottom', boxHeight + 'px' );\n\n                // Disable browser autocomplete.\n                var autocomplete = $this.attr( 'autocomplete' );\n                $this.attr( 'autocomplete', 'off' );\n                $this.data( 'autocomplete', autocomplete );\n\n                var $overlayElement = $this.closest( '.nf-setting, .nf-table-row' );\n                if( 0 != $overlayElement.find( '.note-editor' ).length ){\n                    $overlayElement.find('.note-editor' ).addClass('merge-tag-focus-overlay');\n                } else {\n                    $overlayElement.addClass('merge-tag-focus-overlay');\n                }\n\n                $overlayElement.off( 'click' );\n                $overlayElement.on( 'click', function( event ){\n                    var elementClasses = jQuery( event.target ).attr( 'class' ) || [];\n                    if( -1 !== elementClasses.indexOf( 'merge-tag-focus-overlay' ) ){\n                        nfRadio.channel( 'mergeTags' ).request( 'insert:tag', '' );\n                        jQuery( '#merge-tags-box' ).css( 'display', 'none' );\n                        nfRadio.channel( 'drawer' ).request( 'enable:close' );\n                        jQuery( '#merge-tags-box' ).removeClass();\n                        jQuery( '.merge-tag-focus' ).removeClass( 'merge-tag-focus' );\n                        jQuery( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\n                    }\n                });\n\n                var value = mergetags[0].replace( '{', '' );\n                nfRadio.channel( 'merge-tags' ).request( 'filtersearch', value );\n            } else {\n                jQuery( '#merge-tags-box' ).css( 'display', 'none' );\n                nfRadio.channel( 'drawer' ).request( 'enable:close' );\n                jQuery( '#merge-tags-box' ).removeClass();\n                jQuery( '.merge-tag-focus' ).removeClass( 'merge-tag-focus' );\n                jQuery( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\n            }\n        }\n\n    } );\n\n    return controller;\n} );\n\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * If we're about to render a setting model that's a select and has 'fields' as the 'fill' setting, add all our field models to its options.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/itemSettingFill',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for messages that are fired before a setting view is rendered.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'before:renderSetting', this.beforeRenderSetting );\n\t\t},\n\n\t\tbeforeRenderSetting: function( settingModel, dataModel ) {\n\t\t\tif ( 'fields' == settingModel.get( 'fill' ) ) {\n\t\t\t\t\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Modify the user's browser history when they click on a domain\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/confirmPublish',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:confirmPublish', this.confirmPublish );\n\t\t},\n\n\t\tconfirmPublish: function() {\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\t\t\t// Check to see if we need to add a submit button.\n\t\t\tif ( 1 == formModel.get( 'settings' ).get( 'add_submit' ) ) {\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'add', { type: 'submit', label: 'Submit', order: 9999 } );\n\t\t\t}\n\t\t\tformModel.set( 'show_publish_options', false );\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db', 'publish' );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles actions related to settings that utilise the Rich Text Editor\n *\n * @package Ninja Forms builder\n * @subpackage App - Settings Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/rte',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// We don't want the RTE setting to re-render when the value changes.\n\t\t\tnfRadio.channel( 'setting-type-rte' ).reply( 'renderOnChange', function(){ return false } );\n\n\t\t\tthis.listenTo( nfRadio.channel( 'rte' ), 'init:settingModel', this.initSettingModel );\n\n\t\t\t// When an RTE setting is shown, re-render RTE.\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-type-rte' ), 'render:setting', this.renderSetting );\n\n\t\t\t// When an RTE setting view is destroyed, remove our RTE.\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-type-rte' ), 'destroy:setting', this.destroySetting );\n\n\t\t\t// When an element within the RTE is clicked, check to see if we should insert a link.\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-type-rte' ), 'click:extra', this.clickExtra );\n\n\t\t\t// Instantiates the variable that holds the media library frame.\n\t\t\tthis.meta_image_frame;\n\n\t\t\tjQuery.summernote.options.icons = {\n\t\t        'align': 'dashicons dashicons-editor-alignleft',\n\t\t        'alignCenter': 'dashicons dashicons-editor-aligncenter',\n\t\t        'alignJustify': 'dashicons dashicons-editor-justify',\n\t\t        'alignLeft': 'dashicons dashicons-editor-alignleft',\n\t\t        'alignRight': 'dashicons dashicons-editor-alignright',\n\t\t        'indent': 'dashicons dashicons-editor-indent',\n\t\t        'outdent': 'dashicons dashicons-editor-outdent',\n\t\t        // 'arrowsAlt': 'dashicons fa-arrows-alt',\n\t\t        'bold': 'dashicons dashicons-editor-bold',\n\t\t        'caret': 'dashicons dashicons-arrow-down',\n\t\t        // 'circle': 'dashicons fa-circle',\n\t\t        'close': 'dashicons dashicons-dismiss',\n\t\t        'code': 'dashicons dashicons-editor-code',\n\t\t        'eraser': 'dashicons dashicons-editor-removeformatting',\n\t\t        // 'font': 'dashicons fa-font',\n\t\t        // 'frame': 'dashicons fa-frame',\n\t\t        'italic': 'dashicons dashicons-editor-italic',\n\t\t        'link': 'dashicons dashicons-admin-links',\n\t\t        'unlink': 'dashicons dashicons-editor-unlink',\n\t\t        'magic': 'dashicons dashicons-editor-paragraph',\n\t\t        // 'menuCheck': 'dashicons fa-check',\n\t\t        'minus': 'dashicons dashicons-minus',\n\t\t        'orderedlist': 'dashicons dashicons-editor-ol',\n\t\t        // 'pencil': 'dashicons fa-pencil',\n\t\t        // 'picture': 'dashicons fa-picture-o',\n\t\t        // 'question': 'dashicons fa-question',\n\t\t        'redo': 'dashicons dashicons-redo',\n\t\t        'square': 'dashicons fa-square',\n\t\t        // 'strikethrough': 'dashicons fa-strikethrough',\n\t\t        // 'subscript': 'dashicons fa-subscript',\n\t\t        // 'superscript': 'dashicons fa-superscript',\n\t\t        'table': 'dashicons dashicons-editor-table',\n\t\t        // 'textHeight': 'dashicons fa-text-height',\n\t\t        // 'trash': 'dashicons fa-trash',\n\t\t        'underline': 'dashicons dashicons-editor-underline',\n\t\t        'undo': 'dashicons dashicons-undo',\n\t\t        'unorderedlist': 'dashicons dashicons-editor-ul',\n\t\t        // 'video': 'dashicons fa-youtube-play'\n\t\t      }\n\n\t\t      this.currentContext = {};\n\t\t},\n\n\t\tinitSettingModel: function( settingModel ) {\n\t\t\tsettingModel.set( 'hide_merge_tags', true );\n\t\t},\n\n\t\tinitRTE: function( settingModel, dataModel, settingView ) {\n\t\t\t/*\n\t\t\t * Custom Button for links\n\t\t\t */\n\t\t\tvar that = this;\n\t\t\t// var linkButton = this.linkButton();\n\t\t\tvar linkButton = function( context ) {\n\t\t\t\treturn that.linkButton( context );\n\t\t\t}\n\t\t\tvar mediaButton = function( context ) {\n\t\t\t\treturn that.mediaButton( context );\n\t\t\t}\n\t\t\tvar mergeTags = this.mergeTags();\n\n\t\t\tvar toolbar = [\n\t\t\t\t[ 'paragraphStyle', ['style'] ],\n\t\t\t\t[ 'fontStyle', [ 'bold', 'italic', 'underline','clear' ] ],\n\t\t\t\t[ 'lists', [ 'ul', 'ol' ] ],\n\t\t\t    [ 'paragraph', [ 'paragraph' ] ],\n\t\t\t    [ 'customGroup', [ 'linkButton', 'unlink' ] ],\n\t\t\t    [ 'table', [ 'table' ] ],\n\t\t\t    [ 'actions', [ 'undo', 'redo' ] ],\n\t\t\t    [ 'tools', [ 'mediaButton', 'mergeTags', 'codeview' ] ]\n\t\t\t];\n\n\t\t\tjQuery( settingView.el ).find( 'div.setting' ).summernote( {\n\t\t\t\ttoolbar: toolbar,\n\t\t\t\tbuttons: {\n\t\t\t\t\tlinkButton: linkButton,\n\t\t\t\t\tmergeTags: mergeTags,\n\t\t\t\t\tmediaButton: mediaButton\n\t\t\t\t},\n\t\t\t\theight: 150,   //set editable area's height\n\t\t\t\tcodemirror: { // codemirror options\n\t\t\t\t    theme: 'monokai',\n\t\t\t\t    lineNumbers: true,\n\t\t\t\t    callbacks: {\n\t\t\t\t    \tonBlur: function( editor ) {\n\t\t\t\t    \t\tvar value = editor.getValue();\n\t\t\t\t    \t\tthat.updateDataModel( settingModel, dataModel, value );\n\t\t\t\t    \t}\n\t\t\t\t    }\n\t\t\t\t},\n\t\t\t\tprettifyHtml: true,\n\t\t\t\tcallbacks: {\n\t\t\t\t\tonBlur: function( e, context ) {\n\t\t\t\t\t\tvar value = jQuery( this ).summernote( 'code' );\n\t\t\t\t\t\tthat.updateDataModel( settingModel, dataModel, value );\n                        nfRadio.channel( 'summernote' ).trigger( 'blur', settingModel, dataModel, value );\n\t\t\t\t\t},\n                    onFocus: function( e, context ) {\n                        nfRadio.channel( 'summernote' ).trigger( 'focus', e, this, context );\n                    },\n                    onKeydown: function( e, context ) {\n                        nfRadio.channel( 'summernote' ).trigger( 'keydown', e, this, context );\n                    },\n                    onKeyup: function( e, context ) {\n                        nfRadio.channel( 'summernote' ).trigger( 'keyup', e, this, context );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\n\t\tupdateDataModel: function( settingModel, dataModel, value ) {\n\t\t\tvar name = settingModel.get( 'name' );\n\t\t\tvar before = dataModel.get( name );\n\t\t\tvar after = value;\n\n\t\t\tvar changes = {\n\t\t\t\tattr: name,\n\t\t\t\tbefore: before,\n\t\t\t\tafter: after\n\t\t\t}\n\n\t\t\tvar label = {\n\t\t\t\tobject: dataModel.get( 'objectType' ),\n\t\t\t\tlabel: dataModel.get( 'label' ),\n\t\t\t\tchange: 'Changed ' + settingModel.get( 'label' ) + ' from ' + before + ' to ' + after\n\t\t\t};\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'changeSetting', dataModel, changes, label );\n\n\t\t\tdataModel.set( settingModel.get( 'name' ), after );\n\t\t},\n\n\t\trenderSetting: function( settingModel, dataModel, settingView ) {\n\t\t\tthis.initRTE( settingModel, dataModel,settingView );\n\t\t\tvar linkMenu = jQuery( settingView.el ).find( '.link-button' ).next( '.dropdown-menu' ).find( 'button' );\n\t\t\tlinkMenu.replaceWith(function () {\n\t\t\t    return jQuery( '<div/>', {\n\t\t\t        class: jQuery( linkMenu ).attr( 'class' ),\n\t\t\t        html: this.innerHTML\n\t\t\t    } );\n\t\t\t} );\n\t\t},\n\n\t\tdestroySetting: function( settingModel, dataModel, settingView ) {\n\t\t\tthis.removeRTE( settingModel, dataModel, settingView );\n\t\t},\n\n\t\tremoveRTE: function( settingModel, dataModel, settingView ) {\n\t\t\tjQuery( settingView.el ).find( 'div.setting' ).summernote( 'destroy' );\n\t\t},\n\n\t\tdrawerOpened: function( settingModel, dataModel, settingView ) {\n\t\t\tthis.initRTE( settingModel, dataModel, settingView );\n\t\t},\n\n\t\tlinkButton: function( context ) {\n\t\t\tvar that = this;\n\t\t\tvar ui = jQuery.summernote.ui;\n\t\t\tvar linkButton = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-rte-link-button' );\n\t\t\tvar linkDropdown = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-rte-link-dropdown' );\n\t\t\treturn ui.buttonGroup([\n\t\t\t\tui.button({\n\t            className: 'dropdown-toggle link-button',\n\t            contents: linkButton({}),\n\t            tooltip: 'Insert Link',\n\t            click: function( e ) {\n\t            \tthat.clickLinkButton( e, context );\n\t            },\n\t            data: {\n\t              toggle: 'dropdown'\n\t            }\n\t          }),\n\t\t\t\tui.dropdown([\n\t            ui.buttonGroup({\n\t              children: [\n\t                ui.button({\n\t                  contents: linkDropdown({}),\n\t                  tooltip: ''\n\t                }),\n\t              ]\n\t            })\n\t          ])\n\t\t\t]).render();\n\t\t},\n\n\t\tmergeTags: function( context ) {\n\t\t\tvar ui = jQuery.summernote.ui;\n\t\t\tvar mergeTagsButton = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-rte-merge-tags-button' );\n\t\t\treturn ui.button({\n\t\t\t\tclassName: 'dropdown-toggle merge-tags',\n\t\t\t\tcontents: mergeTagsButton({}),\n\t\t\t\ttooltip: 'Merge Tags'\n\t\t\t}).render();\n\t\t},\n\n\t\tmediaButton: function( context ) {\n\t\t\tvar that = this;\n\t\t\tvar ui = jQuery.summernote.ui;\n\t\t\tvar mediaButton = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-rte-media-button' );\n\t\t\treturn ui.button({\n\t            className: 'dropdown-toggle',\n\t            contents: mediaButton({}),\n\t            tooltip: 'Insert Media',\n\t            click: function( e ) {\n\t            \tthat.openMediaManager( e, context );\n\t            }\n\t          }).render();\n\t\t},\n\n\t\topenMediaManager: function( e, context ) {\n\t\t\tcontext.invoke( 'editor.createRange' );\n\t\t\tcontext.invoke( 'editor.saveRange' );\n\t\t\tthis.currentContext = context;\n\t\t\t\n\t\t\t// If the frame already exists, re-open it.\n\t\t\tif ( this.meta_image_frame ) {\n\t\t\t\tthis.meta_image_frame.open();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Sets up the media library frame\n\t\t\tthis.meta_image_frame = wp.media.frames.meta_image_frame = wp.media({\n\t\t\t\ttitle: 'Select a file',\n\t\t\t\tbutton: { text:  'insert' }\n\t\t\t});\n\n\t\t\tvar that = this;\n\n\t\t\t// Runs when an image is selected.\n\t\t\tthis.meta_image_frame.on('select', function(){\n\n\t\t\t\t// Grabs the attachment selection and creates a JSON representation of the model.\n\t\t\t\tvar media_attachment = that.meta_image_frame.state().get('selection').first().toJSON();\n\t\t\t\tthat.insertMedia( media_attachment, context );\n\t\t\t});\n\n\t\t\t// Opens the media library frame.\n\t\t\tthis.meta_image_frame.open();\n\t\t},\n\n\t\tclickLinkButton: function ( e, context ) {\n\t\t\tvar range = context.invoke( 'editor.createRange' );\n\t\t\tcontext.invoke( 'editor.saveRange' );\n\t\t\tvar text = range.toString()\n\t\t\tthis.currentContext = context;\n\n\t\t\tjQuery( e.target ).closest( '.note-customGroup > .note-btn-group' ).on ('hide.bs.dropdown', function ( e ) {\n\t\t\t\treturn false;\n\t\t\t});\n\n\t\t\tjQuery( e.target ).closest( '.note-customGroup > .note-btn-group' ).on ('shown.bs.dropdown', function ( e ) {\n\t\t\t\tjQuery( e.target ).parent().parent().find( '.link-text' ).val( text );\n\t\t\t\tjQuery( e.target ).parent().parent().find( '.link-url' ).focus();\n\t\t\t});\n\t\t},\n\n\t\tclickExtra: function( e, settingModel, dataModel, settingView ) {\n\t\t\tvar textEl = jQuery( e.target ).parent().find( '.link-text' );\n\t\t\tvar urlEl = jQuery( e.target ).parent().find( '.link-url' );\n\t\t\tvar isNewWindowEl = jQuery( e.target ).parent().find( '.link-new-window' );\n\t\t\tthis.currentContext.invoke( 'editor.restoreRange' );\n\t\t\tif ( jQuery( e.target ).hasClass( 'insert-link' ) ) {\n\t\t\t\tvar text = textEl.val();\n\t\t\t\tvar url = urlEl.val();\n\t\t\t\tvar isNewWindow = ( isNewWindowEl.prop( 'checked' ) ) ? true: false;\n\t\t\t\tif ( 0 != text.length && 0 != url.length ) {\n\t\t\t\t\tthis.currentContext.invoke( 'editor.createLink', { text:text, url: url, isNewWindow: isNewWindow } );\n\t\t\t\t}\n\t\t\t}\n\t\t\ttextEl.val( '' );\n\t\t\turlEl.val( '' );\n\t\t\tisNewWindowEl.prop( 'checked', false );\n\t\t\tjQuery( e.target ).closest( 'div.note-btn-group.open' ).removeClass( 'open' );\n\t\t},\n\n\t\tinsertMedia: function( media, context ) {\n\t\t\tthis.currentContext.invoke( 'editor.restoreRange' );\n\t\t\tif ( 'image' == media.type ) {\n\t\t\t\tthis.currentContext.invoke( 'editor.insertImage', media.url );\n\t\t\t} else {\n\t\t\t\tthis.currentContext.invoke( 'editor.createLink', {\n\t\t\t\t\ttext: media.title || media.filename,\n\t\t\t\t\turl: media.url\n\t\t\t\t} );\n\t\t\t}\n\n\t\t}\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/settingFieldSelect',[], function() {\n    var controller = Marionette.Object.extend( {\n\n        initialize: function() {\n\n            // Bind field key listener to field-select setting type.\n            this.listenTo( nfRadio.channel( 'field-select' ), 'init:settingModel', this.trackKeyChanges );\n\n            // The first time settingModel and the dataModel meet.\n            this.listenTo( nfRadio.channel( 'setting-type-field-select' ), 'before:renderSetting', this.beforeRender );\n\n            // Add setting change listener only in drawers with a field-select setting.\n            this.listenTo( nfRadio.channel( 'field-select' ), 'init:settingModel', function() {\n                this.listenTo( nfRadio.channel( 'app' ), 'change:setting', this.maybeSwitchToFieldsDomain );\n            });\n\n            this.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.autoOpenDrawer );\n\n            this.listenTo( nfRadio.channel( 'drawer' ), 'opened', this.filterDrawerContents );\n            this.listenTo( nfRadio.channel( 'drawer' ), 'closed', this.SwitchToFieldsDomain );\n        },\n\n        trackKeyChanges: function( settingModel ) {\n            settingModel.listenTo( nfRadio.channel( 'app' ), 'update:fieldKey', settingModel.updateKey );\n\n            // Update selected field if the selected field's key changes.\n            this.listenTo( nfRadio.channel( 'app' ), 'replace:fieldKey', this.updateFieldMap );\n        },\n\n        updateFieldMap: function( dataModel, keyModel, settingModel ) {\n\n            var oldKey = keyModel._previousAttributes[ 'key' ];\n            var newKey = keyModel.get( 'key' );\n\n            if( 'field-select' == settingModel.get( 'type' ) && dataModel.get( settingModel.get( 'name' ) ) == oldKey ) {\n\n                dataModel.set( settingModel.get( 'name' ), newKey );\n            }\n        },\n\n        beforeRender: function( settingModel, dataModel ) {\n\n            var fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\n            var fieldTypes = settingModel.get( 'field_types' );\n\n            var options = [\n                {\n                    label: '--',\n                    value: 0\n                }\n            ];\n            _.each( fieldCollection.models, function( field ){\n\n                if( dataModel.cid == field.cid ) return;\n\n                if( 'undefined' != typeof fieldTypes && 0 != fieldTypes.length && ! _.contains( fieldTypes, field.get( 'type' ) ) ) return;\n\n                var fieldFilter = settingModel.get( 'field_filter' );\n                if( fieldFilter && 'undefined' != typeof fieldFilter[ field.get( 'type' ) ] ) {\n                    var bail = false;\n                    _.each( fieldFilter[ field.get( 'type' ) ], function( value, setting ){\n                        console.log( value + \":\" + field.get( setting )  );\n                        if( value != field.get( setting ) ) bail = true;\n                    } );\n                    if( bail ) return;\n                }\n\n                var value = field.get( 'key' );\n                switch ( settingModel.get( 'field_value_format' ) ) {\n                    case 'key':\n                        value = field.get( 'key' );\n                        break;\n                    case 'merge_tag':\n                    default:\n                        value = '{field:' + field.get( 'key' ) + '}';\n                }\n\n                options.push({\n                    label: field.get( 'label' ),\n                    value: value\n                });\n            });\n\n            if( 'undefined' != typeof fieldTypes && 0 != fieldTypes.length ) {\n                _.each( fieldTypes, function( fieldType ){\n\n                    var fieldTypeModel = nfRadio.channel( 'fields' ).request( 'get:type', fieldType );\n\n                    options.push({\n                        label: '-- Add ' + fieldTypeModel.get( 'nicename' ) + ' Field',\n                        value: 'addField:' + fieldType,\n                    });\n                } );\n            }\n\n            settingModel.set( 'options', options );\n        },\n\n        maybeSwitchToFieldsDomain: function( e, model, dataModel ) {\n\n            if( 'field-select' != model.get( 'type' ) ) return;\n\n            var name = model.get( 'name' );\n            var value = dataModel.get( name );\n\n            if( ! value ) return;\n\n            var rubble = value.split( ':' );\n\n            if( 'addField' != rubble[0] ) return;\n\n            this.openDrawer = 'addField';\n            this.filterDrawer = rubble[1];\n\n            dataModel.set( name, '' );\n\n            this.switchDomain = true;\n            nfRadio.channel( 'app' ).request( 'close:drawer' );\n        },\n\n        SwitchToFieldsDomain: function() {\n            if( this.switchDomain ) {\n                var fieldDomainModel = nfRadio.channel( 'app' ).request( 'get:domainModel', 'fields' );\n                nfRadio.channel('app').request('change:currentDomain', null, fieldDomainModel);\n                this.switchDomain = null;\n            }\n        },\n\n        autoOpenDrawer: function() {\n            if( this.openDrawer ) {\n                nfRadio.channel( 'app' ).request( 'open:drawer', this.openDrawer );\n                this.openDrawer = null;\n            }\n        },\n\n        filterDrawerContents: function() {\n            if( this.filterDrawer ) {\n                nfRadio.channel('drawer-addField').trigger('change:filter', this.filterDrawer);\n                this.filterDrawer = null;\n            }\n        }\n    });\n\n    return controller;\n} );\n","/**\n * The Field List setting is a container of settings (like the Fieldset setting), in which its children are instantiated.\n * Unlike the Fieldset setting, Field List settings are dynamically created based on the list of form fields.\n *\n * Note: Field references in the dynamic setting names are based on field keys, which may change.\n * Unlike regular field key tracking, a new setting needs to be created with the same value as the previous.\n *\n * @package Ninja Forms builder\n * @subpackage Action Settings\n * @copyright (c) 2016 WP Ninjas\n * @author Kyle B. Johnson\n * @since 3.0\n */\ndefine( 'controllers/app/settingFieldList',['views/app/drawer/typeSettingFieldset','models/app/settingCollection'], function( fieldsetView, settingCollection ) {\n    return Marionette.Object.extend( {\n\n        /**\n         * A reference list of Field List setting models.\n         */\n        fieldListSettings: [],\n\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'field-list' ),       'init:settingModel',    this.registerFieldListSettings  );\n            this.listenTo( nfRadio.channel( 'fields' ),           'update:setting',       this.updateFieldListSettingKeys );\n                           nfRadio.channel( 'field-list' ).reply( 'get:settingChildView', this.getSettingChildView, this  );\n        },\n\n        /**\n         * Build a reference list of Field List setting models for later reference.\n         *\n         * @param settingModel\n         */\n        registerFieldListSettings: function( settingModel ){\n            this.fieldListSettings.push( settingModel.get( 'name' ) );\n        },\n\n        /**\n         * Field List settings contain field keys in the setting names.\n         * When a field key changes, so too must the Field List setting name.\n         *\n         * @param fieldModel\n         */\n        updateFieldListSettingKeys: function( fieldModel ){\n\n            // We are only interested in field key changes.\n            if( 'undefined' == typeof fieldModel.changed.key ) return;\n\n            var oldKey = fieldModel._previousAttributes.key;\n            var newKey = fieldModel.changed.key;\n\n            /*\n             * This is an absolute (functional) mess of nesting. I apologize to my future self, or Kenny.\n             *\n             * Each setting of each action model must be checked against each registered Field List setting.\n             */\n            var that = this;\n            _.each( Backbone.Radio.channel( 'actions' ).request( 'get:collection' ).models, function( actionModel ) {\n                _.each( actionModel.attributes, function( value, setting ) {\n                    var lastChanged = ''; // Used to avoid resetting the change with a duplicate call.\n                    _.each( that.fieldListSettings, function( prefix ) {\n                        if( setting != prefix + '-' + oldKey || lastChanged == oldKey ) return;\n                        var oldValue = actionModel.get( prefix + '-' + oldKey );\n                        actionModel.set( prefix + '-' + newKey, oldValue );\n                        actionModel.set( prefix + '-' + oldKey, 0 );\n                        lastChanged = oldKey;\n                    });\n                });\n            });\n        },\n\n        /**\n         * Set the view for Field List sub-settings, just like the Fieldset setting.\n         *\n         * @param settingModel\n         * @returns {*}\n         */\n        getSettingChildView: function( settingModel ) {\n\n            /**\n             * Dynamically build field-list settings as needed for the view.\n             */\n\n            // Filter fields based on the field_types setting property.\n            var fields = _.filter( nfRadio.channel( 'fields' ).request( 'get:collection' ).models, function( field ) {\n                return _.contains( settingModel.get( 'field_types' ), field.get( 'type' ) );\n            });\n\n            // Map fields into setting definitions.\n            var settings = _.map( fields, function( field ) {\n                return {\n                    name: settingModel.get( 'name' ) + '-' + field.get( 'key' ),\n                    type: 'toggle',\n                    label: field.get( 'label' ),\n                    width: 'full'\n                };\n            });\n\n            settingModel.set( 'settings', new settingCollection( settings ) );\n\n            // return the child view.\n            return fieldsetView;\n        },\n\n    });\n} );\n\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n *\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/settingHTML',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n\n            // The first time settingModel and the dataModel meet.\n            this.listenTo( nfRadio.channel( 'setting-type-html' ), 'before:renderSetting', this.init );\n        },\n\n        init: function( settingModel, dataModel ) {\n\n            if( 'undefined' == settingModel.get( 'mirror' ) ) return;\n\n            // Listen to a setting change inside of the dataModel.\n            dataModel.on( 'change:' + settingModel.get( 'mirror' ), this.update, settingModel );\n        },\n\n        update: function( dataModel, changedSettingValue ) {\n\n            // Mirror the default value setting value.\n            dataModel.set( this.get( 'name' ), changedSettingValue );\n        }\n    });\n\n    return controller;\n} );\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/settingColor',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            // We don't want to re-render this setting type when the data changes.\n            nfRadio.channel( 'setting-type-color' ).reply( 'renderOnChange', this.setRenderFalse );\n            // We want to close any color pickers before we close our styling tab or drawer.\n            this.listenTo( nfRadio.channel( 'setting-type-color' ), 'destroy:setting', this.closeColorPickers );\n\n            // The first time settingModel and the dataModel meet.\n            this.listenTo( nfRadio.channel( 'setting-type-color' ), 'render:setting', this.initColorPicker );\n        },\n\n        initColorPicker: function( settingModel, dataModel, view ) {\n\n            var name = settingModel.get( 'name' );\n            var el = jQuery( view.el ).find( 'input' );\n\n            jQuery( el ).wpColorPicker( {\n                change: function( event, ui ){\n                    nfRadio.channel( 'app' ).request( 'change:setting', event, settingModel, dataModel, ui.color.toString() );\n                }\n            } );\n        },\n\n        setRenderFalse: function() {\n            return false;\n        },\n\n        closeColorPickers: function( settingModel, dataModel, view ) {\n            jQuery( view.el ).find( '.wp-color-picker' ).wpColorPicker( 'close' );\n        }\n    });\n\n    return controller;\n} );\n","/**\n * Listens to our app channel for the app to start.\n *\n * If the form is a new form, then highlight the Add New submenu item.\n * Otherwise, append an Edit Form submenu for context.\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2016 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/changeMenu',[], function() {\n    var controller = Marionette.Object.extend({\n\n        editFormText: '',\n\n        initialize: function () {\n            this.editFormText = nfAdmin.editFormText || 'Edit Form';\n            this.listenTo(nfRadio.channel('app'), 'after:appStart', this.changeMenu);\n            this.listenTo( nfRadio.channel( 'app' ), 'response:updateDB', this.formPublish );\n        },\n\n        changeMenu: function () {\n            var form = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\n            if ( this.isNewForm( form.id ) ) {\n                this.highlightAddNew();\n            } else {\n                this.appendEditForm();\n            }\n        },\n\n        isNewForm: function( form_id ) {\n            return isNaN( form_id );\n        },\n\n        highlightAddNew: function() {\n            jQuery( '.wp-submenu li' ).removeClass( 'current' );\n            jQuery( 'a[href=\"admin.php?page=ninja-forms&form_id=new\"]' ).parent().addClass( 'current' );\n        },\n\n        /**\n         * Append 'Edit Form'\n         * When editing a form, add an 'Edit Form' submenu item to\n         *   the WordPress Admin Dashboard menu, specifically under\n         *   the Ninja Forms Menu Item and after the 'Add New' item.\n         */\n        appendEditForm: function() {\n            // Singleton check. Only add this menu item one time.\n            if ( jQuery( 'li a:contains(\"' + this.editFormText + '\")' ).length > 0 ) return;\n\n            var editFormLinkText, editFormLink, editFormListItem;\n\n            // Create the 'Edit Form' submenu item.\n            editFormLinkText = document.createTextNode(this.editFormText);\n            editFormLink = document.createElement(\"a\");\n            editFormLink.appendChild(editFormLinkText);\n\n            editFormListItem = document.createElement(\"li\");\n            editFormListItem.appendChild(editFormLink);\n            editFormListItem.classList.add(\"current\");\n\n            // Remove the `current` class from any existing list items.\n            jQuery( '.wp-submenu li' ).removeClass( 'current' );\n\n            // Insert the 'Edit Form' item after the 'Add New' item;\n            jQuery( 'a[href=\"admin.php?page=ninja-forms#new-form\"]' ).parent().after( editFormListItem );\n        },\n\n        formPublish: function( response ) {\n            if ( 'publish' !== response.action ) return false;\n            this.changeMenu();\n        }\n    });\n\n    return controller;\n});\n\n","/**\n * When we click on a domain link, close the mobile menu.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/mobile',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for clicks on our app menu.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:menu', this.closeMobileMenu );\n\t\t},\n\n\t\tcloseMobileMenu: function() {\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\n\t\t\tjQuery( builderEl ).removeClass( 'nf-menu-expand' );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Add a jBox notice to the screen.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/notices',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'notices' ).reply( 'add', this.addNotice, this );\n\t\t\tnfRadio.channel( 'notices' ).reply( 'close', this.closeNotice, this );\n\t\t\tthis.notices = {};\n\t\t},\n\n\t\taddNotice: function( key, msg, options ) {\n\n\t\t\tvar appDefaults = {\n\t\t\t\tcontent: msg,\n\t\t\t\tcolor: 'green',\n\t\t\t\tzIndex:10000000,\n\t\t\t\tconstructOnInit: true,\n\t\t\t\tstack: true,\n\t\t\t\tanimation: {\n\t\t\t\t\topen: 'flip',\n\t\t\t\t\tclose: 'flip'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar mobileDefaults = {\n\t\t\t\tposition: {\n\t\t\t\t\tx: 'center',\n\t\t\t\t\ty: 'top'\n\t\t\t\t},\n\t\t\t\tanimation: {\n\t\t\t\t\topen:'slide:top',\n\t\t\t\t\tclose:'slide:left'\n\t\t\t\t},\n\t\t\t\tautoClose: 2000,\n\t\t\t\toffset: {\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 55\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar desktopDefaults = {\n\t\t\t\tattributes: {\n\t\t\t\t\tx: 'left',\n\t\t\t\t\ty: 'bottom'\n\t\t\t\t},\n\t\t\t\tautoClose: 4000\n\t\t\t};\n\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tvar defaults = mobileDefaults;\t\n\t\t\t} else {\n\t\t\t\tvar defaults = desktopDefaults;\n\t\t\t}\n\t\t\tdefaults = jQuery.extend( defaults, appDefaults );\n\n\t\t\tvar options = jQuery.extend( defaults, options );\n\t\t\t// console.log( options );\n\t\t\tthis.notices[ key ] = new jBox( 'Notice', options );\n\t\t},\n\n\t\tcloseNotice: function( key ) {\n\t\t\tif ( 'undefined' != typeof this.notices[ key ] ) {\n\t\t\t\tthis.notices[ key ].close();\n\t\t\t}\n\t\t},\n\n\t\topenNotice: function( key ) {\n\t\t\tif ( 'undefined' != typeof this.notices[ key ] ) {\n\t\t\t\tthis.notices[ key ].open();\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Prompt the user to save if they attempt to leave the page with unsaved changes.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2016 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/unloadCheck',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tjQuery( window ).bind( 'beforeunload', this.maybePrompt );\n\t\t},\n\n\t\tmaybePrompt: function( model ) {\n\t\t\t// If our app is clean, don't show a warning.\n\t\t\tif ( ! nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\n\t\t\t\treturn 'You have unsaved changes.';\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Before we save data to the database (on preview update or publish), we check to see if we have anyone\n * that wants to update the 'formContent' form setting. This setting is used on the front-end to allow\n * for custom display of form fields. i.e. layout rows.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/formContentFilters',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * Init our formContent view filter array.\n\t\t\t */\n\t\t\tthis.viewFilters = [];\n\t\t\tthis.saveFilters = [];\n\t\t\tthis.loadFilters = [];\n\n\t\t\t/*\n\t\t     * Listen for requests to add formContent filters.\n\t\t\t */\n\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'add:viewFilter', this.addViewFilter, this );\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'add:saveFilter', this.addSaveFilter, this );\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'add:loadFilter', this.addLoadFilter, this );\n\n\t\t\t/*\n\t\t\t * Listen for requests to get our formContent filters.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'get:viewFilters', this.getViewFilters, this );\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'get:saveFilters', this.getSaveFilters, this );\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'get:loadFilters', this.getLoadFilters, this );\n\t\t\t\n\t\t\t/*\n\t\t\t * -- DEPRECATED RADIO REPLIES --\n\t\t\t * \n\t\t\t * The 'fieldContents' channel has been deprecated as of 3.0 (it was present in the RC) in favour of 'formContent'.\n\t\t\t * Listen for requests to add new fieldContent filters.\n\t\t\t * \n\t\t\t * TODO: These radio listeners on the 'fieldContents' channels are here for backwards compatibility and should be removed eventually.\n\t\t\t */\n\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'add:viewFilter', this.addViewFilter, this );\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'add:saveFilter', this.addSaveFilter, this );\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'add:loadFilter', this.addLoadFilter, this );\n\n\t\t\t/*\n\t\t\t * Listen for requests to get our fieldContent filters.\n\t\t\t */\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'get:viewFilters', this.getViewFilters, this );\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'get:saveFilters', this.getSaveFilters, this );\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'get:loadFilters', this.getLoadFilters, this );\n\t\t\n\t\t\t/*\n\t\t\t * -- END DEPRECATED --\n\t\t\t */\n\t\t},\n\n\t\taddViewFilter: function( callback, priority ) {\n\t\t\tthis.viewFilters[ priority ] = callback;\n\t\t},\n\n\t\tgetViewFilters: function() {\n\t\t\treturn this.viewFilters;\n\t\t},\n\n\t\taddSaveFilter: function( callback, priority ) {\n\t\t\tthis.saveFilters[ priority ] = callback;\n\t\t},\n\n\t\tgetSaveFilters: function() {\n\t\t\treturn this.saveFilters;\n\t\t},\n\n\t\taddLoadFilter: function( callback, priority ) {\n\t\t\tthis.loadFilters[ priority ] = callback;\n\t\t},\n\n\t\tgetLoadFilters: function() {\n\t\t\treturn this.loadFilters;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles filters for our main content gutter views.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/formContentGutterFilters',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * Init our gutter view filter array.\n\t\t\t */\n\t\t\tthis.leftFilters = [];\n\t\t\tthis.rightFilters = [];\n\t\t\t/*\n\t\t     * Listen for requests to add gutter filters.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContentGutters' ).reply( 'add:leftFilter', this.addLeftFilter, this );\n\t\t\tnfRadio.channel( 'formContentGutters' ).reply( 'add:rightFilter', this.addRightFilter, this );\n\n\t\t\t/*\n\t\t\t * Listen for requests to get our content gutter filters.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContentGutters' ).reply( 'get:leftFilters', this.getLeftFilters, this );\n\t\t\tnfRadio.channel( 'formContentGutters' ).reply( 'get:rightFilters', this.getRightFilters, this );\n\t\t},\n\n\t\taddLeftFilter: function( callback, priority ) {\n\t\t\tthis.leftFilters[ priority ] = callback;\n\t\t},\n\n\t\taddRightFilter: function( callback, priority ) {\n\t\t\tthis.rightFilters[ priority ] = callback;\n\t\t},\n\n\t\tgetLeftFilters: function() {\n\t\t\treturn this.leftFilters;\n\t\t},\n\n\t\tgetRightFilters: function() {\n\t\t\treturn this.rightFilters;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Returns a clone of a backbone collection with all the models' attributes looped through so that collections contained within are propely cloned.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/cloneCollectionDeep',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'app' ).reply( 'clone:collectionDeep', this.cloneCollectionDeep, this );\n\t\t},\n\n\t\tcloneCollectionDeep: function( collection ) {\n\t\t\tvar models = [];\n\t\t\t// Loop through every model in our collection, clone it, and add it to our model array\n\t\t\t_.each( collection.models, function( model ) {\n\t\t\t\tvar newModel = nfRadio.channel( 'app' ).request( 'clone:modelDeep', model );\n\t\t\t\tmodels.push( newModel );\n\t\t\t} );\n\t\t\t// Create a new instance of our collection\n\t\t\treturn new collection.constructor( models, collection.options );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Tracks which keys have been pressed.\n * Currently only used by fields to see if they should duplicate or delete on click.\n * (Shift + D + click = delete) (Shift + C + click = duplicate)\n * \n * @package Ninja Forms builder\n * @subpackage Fields - Edit Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/trackKeyDown',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tkeys: [],\n\n\t\tinitialize: function() {\n\t\t\tvar that = this;\n\t\t\t/*\n\t\t\t * Track keydowns and store the keys pressed.\n\t\t\t */\n\t\t\t\n\t\t\tjQuery( document ).on( 'keydown', function( e ) {\n\t\t\t\tthat.keyDown( e, that );\n\t\t\t} );\n\n\t\t\tjQuery( document ).on( 'keyup', function( e ) {\n\t\t\t\tthat.keyUp( e, that );\n\t\t\t} );\n\n\t\t\t/*\n\t\t\t * Get the keys currently being pressed, if any\n\t\t\t */\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:keydown', this.getKeyDown, this );\n\t\t},\n\n\t\tkeyDown: function( e, context ) {\n\t\t\t/*\n\t\t\t * Add our keycode to our keys array.\n\t\t\t */\n\t\t\tcontext.keys[ e.keyCode ] = e.keyCode;\n\t\t},\n\n\t\tkeyUp: function( e, context ) {\n\t\t\t/*\n\t\t\t * Remove our keycode from our keys array.\n\t\t\t */\n\t\t\tif ( -1 != context.keys.indexOf( e.keyCode ) ) {\n\t\t\t\tdelete context.keys[ e.keyCode ];\n\t\t\t}\n\t\t},\n\n\t\tgetKeyDown: function() {\n\t\t\treturn this.keys;\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Initialize the perfectscroll jQuery plugin\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/perfectScroll',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tmovedPos: false,\n\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * When we init the main view, init our perfectscroll\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'main' ), 'show:main', this.initPerfectScroll );\n\n\t\t\t/*\n\t\t\t * When our drawer opens and closes, change the position of our scroll rail.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'opened', this.moveRail );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'before:closeDrawer', this.resetRail );\n\t\t},\n\n\t\tinitPerfectScroll: function( view ) {\n\t\t\tif ( ! nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tjQuery( view.el ).parent().perfectScrollbar( {\n\t\t\t\t\tsuppressScrollX: true\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tjQuery( 'head' ).append( '<style id=\"ps-scrollbar-css\" type=\"text/css\"></style>' );\n\t\t},\n\n\t\tmoveRail: function() {\n\t\t\tvar drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\n\t\t\tvar movedPos = jQuery( drawerEl ).outerWidth();\n\n\t\t\tjQuery( '#ps-scrollbar-css' ).text( '.ps-scrollbar-moved { right: ' + movedPos + 'px !important; } ' );\n\t\t\tjQuery( '#nf-main .ps-scrollbar-y-rail' ).addClass( 'ps-scrollbar-moved ' );\n\t\t\t\n\t\t},\n\n\t\tresetRail: function() {\n\t\t\tjQuery( '.ps-scrollbar-y-rail' ).removeClass( 'ps-scrollbar-moved ' );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Model that represents our type settings groups.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/settingGroupModel',[ 'models/app/settingCollection' ], function( SettingCollection ) {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tdisplay: false\n\t\t},\n\n\t\tinitialize: function( options ) {\n\t\t\tif ( false == this.get( 'settings' ) instanceof Backbone.Collection ) {\n\t\t\t\tthis.set( 'settings', new SettingCollection( this.get( 'settings' ) ) );\n\t\t\t}\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collection of our type settings groups.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/settingGroupCollection',['models/app/settingGroupModel'], function( settingGroupModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: settingGroupModel\n\t} );\n\treturn collection;\n} );\n","/**\n * Returns a new setting group collection.\n * Used to settings drawers for custom data models (i.e. not fields, actions, or advanced)\n * \n * @package Ninja Forms builder\n * @subpackage App - Edit Settings Drawer\n * @copyright (c) 2016 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/getNewSettingGroupCollection',[ 'models/app/settingGroupCollection' ], function( SettingGroupCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Respond to requests for a new setting group collection\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:settingGroupCollectionDefinition', this.getNewSettingGroupCollection, this );\n\t\t},\n\n\t\t/**\n\t\t * Return a new instance of the setting group collection.\n\t\t *\n\t\t * @since  3.0\n\t\t * @return backbone.collection\n\t\t */\n\t\tgetNewSettingGroupCollection: function() {\n\t\t\treturn SettingGroupCollection;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2017 WP Ninjas\n * @since 3.0.30\n */\ndefine( 'controllers/app/settingMedia',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            // When the media button is clicked, open the media manager.\n            this.listenTo( nfRadio.channel( 'setting-type-media' ), 'click:extra', this.clickExtra );\n        },\n\n        clickExtra: function( e, settingModel, dataModel, settingView ) {\n            var textEl = jQuery( e.target ).parent().find( '.setting' );\n\n            if ( jQuery( e.target ).hasClass( 'open-media-manager' ) ) {\n                // If the frame already exists, re-open it.\n                if ( this.meta_image_frame ) {\n                    this.meta_image_frame.open();\n                    return;\n                }\n\n                // Sets up the media library frame\n                this.meta_image_frame = wp.media.frames.meta_image_frame = wp.media({\n                    title: 'Select a file',\n                    button: { text:  'insert' }\n                });\n\n                var that = this;\n\n                // Runs when an image is selected.\n                this.meta_image_frame.on('select', function(){\n                    // Grabs the attachment selection and creates a JSON representation of the model.\n                    var media_attachment = that.meta_image_frame.state().get('selection').first().toJSON();\n                    textEl.val( media_attachment.url ).change();\n                });\n\n                // Opens the media library frame.\n                this.meta_image_frame.open();\n            }\n        },\n    });\n\n    return controller;\n} );\n","/**\n * Model for our field type\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/typeModel',[ 'models/app/settingGroupCollection' ], function( SettingGroupCollection ) {\n\tvar model = Backbone.Model.extend( {\n\t\tinitialize: function() {\n\t\t\tif ( false === this.get( 'settingGroups' ) instanceof Backbone.Collection ) {\n\t\t\t\tthis.set( 'settingGroups', new SettingGroupCollection( this.get( 'settingGroups' ) ) );\n\t\t\t}\n\t\t\t\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'init:typeModel', this );\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collection that holds our field type models. \n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/typeCollection',['models/app/typeModel'], function( typeModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: typeModel,\n\t\ttype: false,\n\n\t\tinitialize: function( models, options ) {\n\t\t\t_.each( options, function( option, key ) {\n\t\t\t\tthis[ key ] = option;\n\t\t\t}, this );\n\t\t}\n\t} );\n\treturn collection;\n} );\n","/**\n * Model that represents our field type section on the add new field drawer.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/fields/typeSectionModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tclasses: ''\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collection that holds our field models.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/fields/typeSectionCollection',['models/fields/typeSectionModel'], function( typeSectionModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: typeSectionModel\n\t} );\n\treturn collection;\n} );\n","/**\n * Creates and stores a collection of field types. This includes all of the settings shown when editing a field.\n *\n * 1) Create our settings sections config\n * 2) Loops over our preloaded data and adds that to our field type collection\n *\n * Also responds to requests for data about field types\n *\n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/types',[\n\t\t'models/app/typeCollection',\n\t\t'models/fields/typeSectionCollection'\n\t],\n\tfunction(\n\t\tTypeCollection,\n\t\tSectionCollection\n\t) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Config for our settings sections\n\t\t\tthis.sections = new SectionCollection( fieldTypeSections );\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'init:typeModel', this.registerSection );\n\n\t\t\t// Create our field type collection\n\t\t\tthis.collection = new TypeCollection( fieldTypeData, { type: 'fields' } );\n\n\t\t\t// Respond to requests to get field type, collection, settings, and sections\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:type', this.getFieldType, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:typeCollection', this.getTypeCollection, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:typeSections', this.getTypeSections, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:savedFields', this.getSavedFields, this );\n\n\t\t\t// Listen to clicks on field types\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'click:fieldType', this.addField );\n\t\t},\n\n\t\tregisterSection: function( typeModel ) {\n\t\t\tif ( 'fields' != typeModel.collection.type || ! typeModel.get( 'section' ) ) return;\n\n\t\t\tthis.sections.get( typeModel.get( 'section' ) ).get( 'fieldTypes' ).push( typeModel.get( 'id' ) );\n\t\t},\n\n\t\t/**\n\t\t * Return a field type by id\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  string \t\t\tid \tfield type\n\t\t * @return backbone.model    \tfield type model\n\t\t */\n\t\tgetFieldType: function( id ) {\n        \treturn this.collection.get( id );\n        },\n\n        /**\n         * Return the entire field type collection\n         *\n         * @since  3.0\n         * @param  string \t\t\t\tid \t[description]\n         * @return backbone.collection    \tfield type collection\n         */\n\t\tgetTypeCollection: function( id ) {\n        \treturn this.collection;\n        },\n\n        /**\n         * Add a field type to our fields sortable when the field type button is clicked.\n         *\n         * @since 3.0\n         * @param Object e event\n         * @return void\n         */\n        addField: function( e ) {\n\t\t\tvar type = jQuery( e.target ).data( 'id' );\n\n\t\t\tif( e.shiftKey ){\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'add:stagedField', type );\n\t\t\t\treturn;\n\t\t\t}\n\n        \tvar fieldModel = nfRadio.channel( 'fields' ).request( 'add', {\n\t\t\t\ttype: type,\n\n\t\t\t\tlabel: nfRadio.channel( 'fields' ).request( 'get:type', type ).get( 'nicename' )\n\t\t\t});\n\n\t\t\tconsole.log( fieldModel );\n\n\t\t\tvar label = {\n\t\t\t\tobject: 'Field',\n\t\t\t\tlabel: fieldModel.get( 'label' ),\n\t\t\t\tchange: 'Added',\n\t\t\t\tdashicon: 'plus-alt'\n\t\t\t};\n\n\t\t\tvar data = {\n\t\t\t\tcollection: nfRadio.channel( 'fields' ).request( 'get:collection' )\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addObject', fieldModel, null, label, data );\n\n\t\t\t// Re-Draw the Field Collection\n\t\t\tnfRadio.channel( 'fields' ).request( 'redraw:collection' );\n        },\n\n        /**\n         * Return our field type settings sections\n         *\n         * @since  3.0\n         * @return backbone.collection field type settings sections\n         */\n        getTypeSections: function() {\n            return this.sections;\n        },\n\n        /**\n         * Return our saved fields\n         *\n         * @since  3.0\n         * @return backbone.collection\n         */\n        getSavedFields: function() {\n        \tthis.sections.get( 'saved' );\n        }\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Handles the logic for our field type draggables.\n * \n * @package Ninja Forms builder\n * @subpackage Fields - New Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldTypeDrag',[], function( ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen to our field type draggables and run the appropriate function.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'startDrag:type', this.startDrag );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'stopDrag:type', this.stopDrag );\n\t\t\t/*\n\t\t\t * Respond to requests for our helper clone.\n\t\t\t * This is used by other parts of the application to modify what the user is dragging in real-time.\n\t\t\t */ \n\t\t\tnfRadio.channel( 'drawer-addField' ).reply( 'get:typeHelperClone', this.getCurrentDraggableHelperClone, this );\n\t\t},\n\n\t\t/**\n\t\t * When we start dragging:\n\t\t * get our drawer element\n\t\t * set its overflow property to visible !important -> forces the type drag element to be on at the top of the z-index.\n\t\t * get our main element\n\t\t * est its overflow propery to visible !important -> forces the type drag element to be on top of the z-index.\n\t\t * set our dragging helper clone\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  object context \tThis function is going to be called from a draggable. Context is the \"this\" reference to the draggable.\n\t\t * @param  object ui      \tObject sent by jQuery UI draggable.\n\t\t * @return void\n\t\t */\n\t\tstartDrag: function( context, ui ) {\n\t\t\tthis.drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\n\t\t\tthis.mainEl = nfRadio.channel( 'app' ).request( 'get:mainEl' );\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'visible', 'important' );\n\n\t\t\tthis.draggableHelperClone = jQuery( ui.helper ).clone();\n\n\t\t},\n\n\t\t/**\n\t\t * When we stop dragging, reset our overflow property to hidden !important.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  object context \tThis function is going to be called from a draggable. Context is the \"this\" reference to the draggable.\n\t\t * @param  object ui      \tObject sent by jQuery UI draggable.\n\t\t * @return {[type]}         [description]\n\t\t */\n\t\tstopDrag: function( context, ui ) {\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'hidden', 'important' );\n\t\t},\n\n\t\tgetCurrentDraggableHelperClone: function() {\n\t\t\treturn this.draggableHelperClone;\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles the dragging of our field staging area\n * \n * @package Ninja Forms builder\n * @subpackage Fields - New Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/stagingDrag',[], function( ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for the start and stop of our field staging dragging\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'startDrag:fieldStaging', this.startDrag );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'stopDrag:fieldStaging', this.stopDrag );\n\t\t},\n\n\t\t/**\n\t\t * When the user starts dragging the staging area, we have to:\n\t\t * set the overflow property of the drawer to visible !important. If we don't, the button goes underneath the main section.\n\t\t * set the overflow proerty of the main to visible !important. If we don't, the dragged element goes underneath the drawer.\n\t\t * replace our helper with the stacked \"x fields\" template.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t context jQuery UI Draggable\n\t\t * @param  Object\t ui      jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstartDrag: function( context, ui ) {\n\t\t\tthis.drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\n\t\t\tthis.mainEl = nfRadio.channel( 'app' ).request( 'get:mainEl' );\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'visible', 'important' );\n\t\t\t// jQuery( this.mainEl )[0].style.setProperty( 'overflow', 'visible', 'important' );\n\n\t\t\tvar stagedFields = nfRadio.channel( 'fields' ).request( 'get:staging' );\n\t\t\tvar html = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-staged-fields-drag' );\n\t\t\tjQuery( ui.helper ).html( html( { num: stagedFields.models.length } ) );\n\t\t\tjQuery( ui.helper ).prop( 'id', 'nf-staged-fields-drag' );\n\t\t\tjQuery( ui.item ).css( 'opacity', '0.7' );\n\t\t},\n\n\t\t/**\n\t\t * When we stop dragging the staging area, we have to set the overflow property to hidden !important\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t context jQuery UI Draggable\n\t\t * @param  Object\t ui      jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstopDrag: function( context, ui ) {\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'hidden', 'important' );\n\t\t\t// jQuery( this.mainEl )[0].style.setProperty( 'overflow', 'hidden', 'important' );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles most things related to our staging area:\n * 1) Creates a collection\n * 2) Listens for requests to CRUD items from the collection\n * 3) Adds our staged fields to the fields sortable when the drawer is closed\n * \n * @package Ninja Forms builder\n * @subpackage Fields - New Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/staging',['models/fields/stagingCollection'], function( stagingCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Create our staged fields collection\n\t\t\tthis.collection = new stagingCollection();\n\t\t\t// Respond to requests related to our staging area.\n\t\t    nfRadio.channel( 'fields' ).reply( 'add:stagedField', this.addStagedField, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'remove:stagedField', this.removeStagedField, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:staging', this.getStagingCollection, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'sort:staging', this.sortStagedFields, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'clear:staging', this.clearStagedFields, this );\n\t\t\t// Listen to our remove staged field click event.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'click:removeStagedField', this.removeStagedField );\n\t\t\t// Listen to our event that fires just before a drawer is closed.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'before:closeDrawer', this.beforeCloseDrawer );\n\t\t},\n\n\t\tgetStagingCollection: function() {\n\t\t\treturn this.collection;\n\t\t},\n\n\t\t/**\n\t\t * Add a field to our staging area\n\t\t * \n\t\t * @since 3.0\n\t\t * @param string type Type of field we're adding\n\t\t * @return tmpID\n\t\t */\n\t\taddStagedField: function( type, silent ) {\n\t\t\tvar silent = silent || false;\n\t\t\t// Get our type model from the string.\n\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type );\n\t\t\t// Our tmp ID is a string with the time appended to make it unique.\n\t\t\tvar tmpID = 'nf-staged-field-' + jQuery.now();\n\t\t\t// Object that will be added to our staging collection.\n\t\t\tvar data = {\n\t\t\t\tid: tmpID,\n\t\t\t\t// i.e. firstname, textbox, etc.\n\t\t\t\tslug: fieldType.get( 'type' ),\n\t\t\t\t// i.e. First Name, Textbox, etc.\n\t\t\t\tnicename: fieldType.get( 'nicename' ),\n\t\t\t\t// i.e. calendar, envelope, etc.\n\t\t\t\ticon: fieldType.get( 'icon' )\n\t\t\t}\n\t\t\t// \n\t\t\tvar model = this.collection.add( data );\n\n\t\t\tif( ! silent ) nfRadio.channel( 'fields').trigger( 'add:stagedField', model );\n\n\t\t\treturn tmpID;\n\t\t},\n\n\t\t/**\n\t\t * Remove a field from staging\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \t\t\te     \tEvent\n\t\t * @param  Backbone.model \tmodel \tstaged field model to remove\n\t\t * @return void\n\t\t */\n\t\tremoveStagedField: function( e, model ) {\n\t\t\tthis.collection.remove( model );\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'remove:stagedField', model );\n\t\t},\n\n\t\t/**\n\t\t * Adds our staged fields to the main fields sortable before the drawer is closed.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tbeforeCloseDrawer: function() {\n\t\t\tif ( 0 != this.collection.models.length ) { // Make sure that we have models\n\t\t\t\t// Get our field collection.\n\t\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\n\t\t\t\tvar fields = [];\n\t\t\t\t// Loop through our staging collection\n\t\t\t\t_.each( this.collection.models, function( model ) {\n\t\t\t\t\t// Get a tmp ID for our new field.\n\t\t\t\t\tvar tmpID = nfRadio.channel( 'fields' ).request( 'get:tmpID' );\n\t\t\t\t\t// Create an object that can be added as a model.\n\t\t\t\t\tvar tmpField = { id: tmpID, label: model.get( 'nicename' ), type: model.get( 'slug' ) };\n\t\t\t\t\t// Add our new field.\n\t\t\t\t\tvar newModel = nfRadio.channel( 'fields' ).request( 'add',  tmpField, false );\n\t\t\t\t\t// Add our field addition to our change log.\n\t\t\t\t\tvar label = {\n\t\t\t\t\t\tobject: 'Field',\n\t\t\t\t\t\tlabel: newModel.get( 'label' ),\n\t\t\t\t\t\tchange: 'Added',\n\t\t\t\t\t\tdashicon: 'plus-alt'\n\t\t\t\t\t};\n\t\t\t\t\tvar data = {\n\t\t\t\t\t\tcollection: fieldCollection\n\t\t\t\t\t}\n\t\t\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addObject', newModel, null, label, data );\n\t\t\t\n\t\t\t\t} );\n\t\t\t\t// Trigger a reset on our field collection so that our view re-renders\n\t\t\t\tfieldCollection.trigger( 'reset', fieldCollection );\n\t\t\t\t// Empty the staging collection\n\t\t\t\tthis.collection.reset();\n\t\t\t}\n\t\t\t// Sort our fields.\n\t\t\tnfRadio.channel( 'fields' ).request( 'sort:fields', null, null, false );\n\t\t},\n\n\t\t/**\n\t\t * Sort our staging area by the 'order' attribute.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tsortStagedFields: function() {\n\t\t\t// Get our staged fields sortable.\n\t\t\tvar sortableEl = nfRadio.channel( 'app' ).request( 'get:stagedFieldsEl' );\n\t\t\t// Get the current order using jQuery sortable. Will be an array of IDs: [tmp-blah, tmp-blah]\n\t\t\tvar order = jQuery( sortableEl ).sortable( 'toArray' );\n\t\t\t// Loop through our models\n\t\t\t_.each( this.collection.models, function( field ) {\n\t\t\t\t// Search our order array for this field.\n\t\t\t\tvar search = field.get( 'id' );\n\t\t\t\tvar pos = order.indexOf( search );\n\t\t\t\t// Update our staged field model with the new order.\n\t\t\t\tfield.set( 'order', pos );\n\t\t\t} );\n\t\t\t// Sort our staging collection.\n\t\t\tthis.collection.sort();\n\t\t},\n\n\t\tclearStagedFields: function() {\n\t\t\tthis.collection.reset();\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles actions related to our staged fields sortable.\n * \n * @package Ninja Forms builder\n * @subpackage Fields - New Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/stagingSortable',['models/fields/stagingCollection'], function( stagingCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen to our field type draggables\n\t\t\t// this.listenTo( nfRadio.channel( 'drawer-addField' ), 'startDrag:type', this.addActiveClass );\n\t\t\t// this.listenTo( nfRadio.channel( 'drawer-addField' ), 'stopDrag:type', this.removeActiveClass );\n\t\t\t// Listen to our sortable events\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'receive:stagedFields', this.receiveStagedFields );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'over:stagedFields', this.overStagedFields );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'out:stagedFields', this.outStagedFields );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'start:stagedFields', this.startStagedFields );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'stop:stagedFields', this.stopStagedFields );\n\t\t},\n\n\t\t/**\n\t\t * Change our dropped field type helper so that it matches the other items in our sortable.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI item\n\t\t * @return void\n\t\t */\n\t\treceiveStagedFields: function( ui ) {\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) {\n\t\t\t\tvar type = jQuery( ui.item ).data( 'id' );\n\t\t\t\tvar tmpID = nfRadio.channel( 'fields' ).request( 'add:stagedField', type );\n\t\t\t\tjQuery( ui.helper ).prop( 'id', tmpID );\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'sort:staging' );\n\t\t\t\tjQuery( ui.helper ).remove();\n\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'drop:fieldType', type );\t\t\t\t\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Add an active class to our sortable when a field type item is dragged\n\t\t * \n\t\t * @since 3.0\n\t\t */\n\t\taddActiveClass: function() {\n\t\t\tvar stagedFieldsEl = nfRadio.channel( 'app' ).request( 'get:stagedFieldsEl' );\n\t\t\tjQuery( stagedFieldsEl ).addClass( 'nf-droppable-active' );\n\t\t},\n\n\t\t/**\n\t\t * Remove the active class from our sortable when the field type item is dropped.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tremoveActiveClass: function() {\n\t\t\tvar stagedFieldsEl = nfRadio.channel( 'app' ).request( 'get:stagedFieldsEl' );\n\t\t\tjQuery( stagedFieldsEl ).removeClass( 'nf-droppable-active' );\n\t\t},\n\n\t\t/**\n\t\t * When the field type item is dragged over our sortable, we change the helper to match the sortable items.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \te  event\n\t\t * @param  Object \tui jQuery UI Element\n\t\t * @return void\n\t\t */\n\t\toverStagedFields: function( e, ui ) {\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) {\n\t\t\t\tvar type = jQuery( ui.item ).data( 'id' );\n\t\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type );\n\t\t\t\tvar nicename = fieldType.get( 'nicename' );\n\t\t\t\tthis.currentHelper = ui.helper \n\t\t\t\tjQuery( ui.helper ).html( nicename + '<span class=\"dashicons dashicons-dismiss\"></span>' );\n\t\t\t\tjQuery( ui.helper ).removeClass( 'nf-field-type-button' ).addClass( 'nf-item-dock' ).css( { 'opacity': '0.8', 'width': '', 'height': '' } );\n\t\t\t\tvar sortableEl = nfRadio.channel( 'app' ).request( 'get:stagedFieldsEl' );\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\n\t\t\t\t\tjQuery( sortableEl ).addClass( 'nf-droppable-hover' );\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t},\n\n\t\t/**\n\t\t * When a field type item is moved away from our sortable, we change the helper to its previous appearance\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\toutStagedFields: function( ui ) {\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) {\n\t\t\t\tvar helperClone = nfRadio.channel( 'drawer-addField' ).request( 'get:typeHelperClone' );\t\n\t\t\t\tjQuery( this.currentHelper ).html( jQuery( helperClone ).html() );\n\t\t\t\tjQuery( this.currentHelper ).removeClass( 'nf-item-dock' ).addClass( 'nf-field-type-button' );\n\t\t\t\tvar sortableEl = nfRadio.channel( 'app' ).request( 'get:stagedFieldsEl' );\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\n\t\t\t\t\tjQuery( sortableEl ).removeClass( 'nf-droppable-hover' );\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t},\n\n\t\t/**\n\t\t * When a user starts to drag a sortable item, we need to set a few properties on the item and the helper.\n\t\t * These keep the original item in place while dragging and changes the opacity of the helper.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t ui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstartStagedFields: function( ui ) {\n\t\t\tjQuery( ui.item ).show();\n\t\t\tjQuery( ui.item ).css( { 'display': 'inline', 'opacity': '0.7' } );\n\t\t\tjQuery( ui.helper ).css( 'opacity', '0.5' );\n\t\t},\n\n\t\t/**\n\t\t * When we stop dragging a sortable item, remove our opacity setting and remove the helper item.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t ui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstopStagedFields: function( ui ) {\n\t\t\tjQuery( ui.item ).css( 'opacity', '' );\n\t\t\tjQuery( ui.helper ).remove();\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Filters our field type collection.\n * \n * @package Ninja Forms builder\n * @subpackage Fields - New Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/filterTypes',['models/fields/typeSectionCollection'], function( fieldTypeSectionCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen to our change filter event.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'change:filter', this.filterFieldTypes );\n\t\t},\n\n\t\t/**\n\t\t * Filter our field types in the add new field drawer\n\t\t * \n\t\t * Takes a search string and finds any field types that match either the name or alias.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  string\t search \tstring being searched for\n\t\t * @param  object \t e      \tKeyup event\n\t\t * @return void\n\t\t */\n\t\tfilterFieldTypes: function( search, e ) {\n\t\t\t// Make sure that we aren't dealing with an empty string.\n\t\t\tif ( '' != jQuery.trim( search ) ) {\n        \t\tvar filtered = [];\n        \t\t/**\n        \t\t * Call the function that actually filters our collection,\n        \t\t * and then loop through our collection, adding each model to our filtered array.\n        \t\t */\n        \t\t_.each( this.filterCollection( search ), function( model ) {\n        \t\t\tfiltered.push( model.get( 'id' ) );\n        \t\t} );\n\n        \t\t// Create a new Field Type Section collection with the filtered array.\n        \t\tvar filteredSectionCollection = new fieldTypeSectionCollection( [\n\t\t\t\t{ \n\t\t\t\t\tid: 'filtered',\n\t\t\t\t\tnicename: 'Filtered Fields',\n\t\t\t\t\tfieldTypes: filtered\n\t\t\t\t}\n\t\t\t\t] );\n                \n                // Declare array of fields to hide.\n                // TODO: We should offload this to somewhere configurable later.\n//                var hiddenFields = [ 'creditcard',\n//                                     'creditcardcvc',\n//                                     'creditcardexpiration',\n//                                     'creditcardfullname',\n//                                     'creditcardnumber',\n//                                     'creditcardzip' ];\n                var hiddenFields = [];\n                \n                // Seach our results of hidden fields.\n                for ( var i = filteredSectionCollection.models[ 0 ].get( 'fieldTypes' ).length; i >= 0; i-- ) {\n                    var target = hiddenFields.indexOf( filteredSectionCollection.models[ 0 ].get( 'fieldTypes' )[ i ] );\n                    // If we find any...\n                    if ( -1 < target ) {\n                        // Remove them from the collection.\n                        filteredSectionCollection.models[ 0 ].get( 'fieldTypes' ).splice( target, 1 );\n                    }\n                }\n\n        \t\t// Request that our field types filter be applied, passing the collection we created above.\n        \t\tnfRadio.channel( 'drawer' ).trigger( 'filter:fieldTypes', filteredSectionCollection );\n        \t\t// If we've pressed the 'enter' key, add the field to staging and clear the filter.\n        \t\tif ( 'undefined' != typeof e && e.addObject ) {\n        \t\t\tif ( 0 < filtered.length ) {\n        \t\t\t\tnfRadio.channel( 'fields' ).request( 'add:stagedField', filtered[0] );\n        \t\t\t\tnfRadio.channel( 'drawer' ).request( 'clear:filter' );\n        \t\t\t}\n        \t\t}\n        \t} else {\n        \t\t// Clear our filter if the search text is empty.\n        \t\tnfRadio.channel( 'drawer' ).trigger( 'clear:filter' );\n        \t}\n        },\n\n        /**\n         * Search our field type collection for the search string.\n         * \n         * @since  3.0\n         * @param  string\t search \tstring being searched for\n         * @return backbone.collection\n         */\n        filterCollection: function( search ) {\n        \tsearch = search.toLowerCase();\n        \t// Get our list of field types\n        \tvar collection = nfRadio.channel( 'fields' ).request( 'get:typeCollection' );\n        \t/*\n        \t * Backbone collections have a 'filter' method that loops through every model,\n        \t * waiting for you to return true or false. If you return true, the model is kept.\n        \t * If you return false, it's removed from the filtered result.\n        \t */\n\t\t\tvar filtered = collection.filter( function( model ) {\n\t\t\t\tvar found = false;\n\t\t\t\t\n\t\t\t\t// If we match either the ID or nicename, return true.\n\t\t\t\tif ( model.get( 'type' ).toLowerCase().indexOf( search ) != -1 ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t} else if ( model.get( 'nicename' ).toLowerCase().indexOf( search ) != -1 ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\t * TODO: Hashtag searching. Doesn't really do anything atm.\n\t\t\t\t */\n\t\t\t\tif ( model.get( 'tags' ) && 0 == search.indexOf( '#' ) ) {\n\t\t\t\t\t_.each( model.get( 'tags' ), function( tag ) {\n\t\t\t\t\t\tif ( search.replace( '#', '' ).length > 1 ) {\n\t\t\t\t\t\t\tif ( tag.toLowerCase().indexOf( search.replace( '#', '' ) ) != -1 ) {\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\t// If we match any of the aliases, return true.\n\t\t\t\tif ( model.get( 'alias' ) ) {\n\t\t\t\t\t_.each( model.get( 'alias' ), function( alias ) {\n\t\t\t\t\t\tif ( alias.toLowerCase().indexOf( search ) != -1 ) {\n\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\treturn found;\n\t\t\t} );\n\t\t\t// Return our filtered collection.\n\t\t\treturn filtered;\n        }\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles all the actions/functions related to our main field sortable.\n * All of the actual logic for our sortable is held here; the view just calls it using nfRadio.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/sortable',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// When our field type buttons are dragged, we need to add or remove the active (blue) class.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'startDrag:type', this.addActiveClass );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'stopDrag:type', this.removeActiveClass );\n\t\t\t// When our field staging is dragged, we need to add or remove the active (blue) class.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'startDrag:fieldStaging', this.addActiveClass );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'stopDrag:fieldStaging', this.removeActiveClass );\n\t\t\t\n\t\t\t/*\n\t\t\t * Handles all the events fired by our sortable:\n\t\t\t * receive - dropped from type button or staging\n\t\t\t * over - dragging within or over the sortable\n\t\t\t * out - leaving the sortable\n\t\t\t * stop - stopped sorting/dragging\n\t\t\t * start - started sorting/dragging\n\t\t\t * update - stopped sorting/dragging and order has changed\n\t\t\t */\n\t\t\tnfRadio.channel( 'app' ).reply( 'receive:fieldsSortable', this.receiveFieldsSortable, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'over:fieldsSortable', this.overfieldsSortable, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'out:fieldsSortable', this.outFieldsSortable, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'stop:fieldsSortable', this.stopFieldsSortable, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'start:fieldsSortable', this.startFieldsSortable, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:fieldsSortable', this.updateFieldsSortable, this );\n\t\t},\n\n\t\t/**\n\t\t * Add the active class to our sortable so that its border is blue.\n\t\t * \n\t\t * @since 3.0\n\t\t * @return void\n\t\t */\n\t\taddActiveClass: function() {\n\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\n\t\t\tjQuery( sortableEl ).addClass( 'nf-droppable-active' );\t\n\t\t},\n\n\t\t/**\n\t\t * Remove the active class from our sortable\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tremoveActiveClass: function() {\n\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\n\t\t\tjQuery( sortableEl ).removeClass( 'nf-droppable-active' );\n\t\t},\n\n\t\t/**\n\t\t * Fires when we drop a field type button or staging onto our sortable\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\treceiveFieldsSortable: function( ui ) {\n\t\t\t/*\n\t\t\t * We have to do different things if we're dealing with a field type button or staging area.\n\t\t\t */ \n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) { // Field Type Button\n\t\t\t\t// Get our type string\n\t\t\t\tvar type = jQuery( ui.item ).data( 'id' );\n\t\t\t\t// Add a field (returns the tmp ID )\n\t\t\t\tvar tmpID = this.addField( type, false );\n\t\t\t\t/*\n\t\t\t\t * Update our helper id to the tmpID.\n\t\t\t\t * We do this so that when we sort, we have the proper ID.\n\t\t\t\t */ \n\t\t\t\tjQuery( ui.helper ).prop( 'id', tmpID );\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'sort:fields' );\n\t\t\t\t// Remove the helper. Gets rid of a weird type artifact.\n\t\t\t\tjQuery( ui.helper ).remove();\n\t\t\t\t// Trigger a drop field type event.\n\t\t\t\tnfRadio.channel( 'fields' ).trigger( 'drop:fieldType', type, tmpID );\n\t\t\t} else if ( jQuery( ui.item ).hasClass( 'nf-stage' ) ) { // Staging\n\t\t\t\t// Later, we want to reference 'this' context, so we define it here.\n\t\t\t\tvar that = this;\n\t\t\t\t// Make sure that our staged fields are sorted properly.\t\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'sort:staging' );\n\t\t\t\t// Grab our staged fields.\n\t\t\t\tvar stagedFields = nfRadio.channel( 'fields' ).request( 'get:staging' );\n\t\t\t\t// Get our current field order.\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\n\t\t\t\t\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) { // Sortable isn't empty\n\t\t\t\t\t// If we're dealing with a sortable that isn't empty, get the order.\n\t\t\t\t\tvar order = jQuery( sortableEl ).sortable( 'toArray' );\n\t\t\t\t} else { // Sortable is empty\n\t\t\t\t\t// Sortable is empty, all we care about is our staged field draggable.\n\t\t\t\t\tvar order = ['nf-staged-fields-drag'];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Get the index of our droped element.\n\t\t\t\tvar insertedAt = order.indexOf( 'nf-staged-fields-drag' );\n\n\t\t\t\t// Loop through each staged fields model and insert a field.\n\t\t\t\tvar tmpIDs = [];\n\t\t\t\t_.each( stagedFields.models, function( field, index ) {\n\t\t\t\t\t// Add our field.\n\t\t\t\t\tvar tmpID = that.addField( field.get( 'slug' ) );\n\t\t\t\t\t// Add this newly created field to our order array.\n\t\t\t\t\torder.splice( insertedAt + index, 0, tmpID );\n\t\t\t\t} );\n\n\t\t\t\t// Remove our dropped element from our order array.\n\t\t\t\tvar insertedAt = order.indexOf( 'nf-staged-fields-drag' );\n\t\t\t\torder.splice( insertedAt, 1 );\n\t\t\t\t// Sort our fields\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'sort:fields', order );\n\t\t\t\t// Clear our staging\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'clear:staging' );\n\t\t\t\t// Remove our helper. Fixes a weird artifact.\n\t\t\t\tjQuery( ui.helper ).remove();\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Add a field.\n\t\t * Builds the object necessary to add a field to the field model collection.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  string \ttype   field type\n\t\t * @param  boolean \tsilent add silently\n\t\t * @return string \ttmpID\n\t\t */\n\t\taddField: function( type, silent ) {\n\t\t\t// Default to false\n\t\t\tsilent = silent || false;\n\t\t\t// Get our field type model\n\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type ); \n\t\t\t// Get our tmp ID\n\t\t\tvar tmpID = nfRadio.channel( 'fields' ).request( 'get:tmpID' );\n\t\t\t// Add our field\n\t\t\tvar newModel = nfRadio.channel( 'fields' ).request( 'add',  { id: tmpID, label: fieldType.get( 'nicename' ), type: type }, silent );\n\t\t\t// Add our field addition to our change log.\n\t\t\tvar label = {\n\t\t\t\tobject: 'Field',\n\t\t\t\tlabel: newModel.get( 'label' ),\n\t\t\t\tchange: 'Added',\n\t\t\t\tdashicon: 'plus-alt'\n\t\t\t};\n\n\t\t\tvar data = {\n\t\t\t\tcollection: nfRadio.channel( 'fields' ).request( 'get:collection' )\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addObject', newModel, null, label, data );\n\n\t\t\treturn tmpID;\n\t\t},\n\n\t\t/**\n\t\t * When the user drags a field type or staging over our sortable, we need to modify the helper.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\toverfieldsSortable: function( ui ) {\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) { // Field Type\n\t\t\t\t// String type\n\t\t\t\tvar type = jQuery( ui.helper ).data( 'id' );\n\t\t\t\t// Get our field type model.\n\t\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type );\n\t\t\t\t// Get our field type nicename.\n\t\t\t\tvar label = fieldType.get( 'nicename' );\n\t\t\t\t// Get our sortable element.\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\n\t\t\t\t// Get our fieldwidth.\n\t\t\t\tvar fieldWidth = jQuery( sortableEl ).width();\n\t\t\t\t// Set our currentHelper to an object var so that we can access it later.\n\t\t\t\tthis.currentHelper = ui.helper;\n\t\t\t\t// Update our helper label.\n\t\t\t\tjQuery( ui.helper ).html( label );\n\t\t\t\t// Remove the field type draggable classes and add sortable classes.\n\t\t\t\tjQuery( ui.helper ).removeClass( 'nf-field-type-button' ).addClass( 'nf-field-wrap' ).css( { 'width': fieldWidth, 'height': '50px' } );\t\t\t\t\t\t\n\t\t\t\t// Add our hover class if our sortable has been initialized.\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\n\t\t\t\t\tjQuery( sortableEl ).addClass( 'nf-droppable-hover' );\n\t\t\t\t}\n\t\t\t} else if ( jQuery( ui.item ).hasClass( 'nf-stage' ) ) { // Staging\n\t\t\t\t// Get our sortable, and if it's initialized add our hover class.\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\n\t\t\t\t\tjQuery( sortableEl ).addClass( 'nf-droppable-hover' );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * When the user moves a draggable outside of the sortable, we need to change the helper.\n\t\t * This returns the item to its pre-over state.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\toutFieldsSortable: function( ui ) {\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) { // Field Type\n\t\t\t\t/*\n\t\t\t\t * Get our helper clone.\n\t\t\t\t * This will let us access the previous label and classes of our helper.\n\t\t\t\t */ \n\t\t\t\tvar helperClone = nfRadio.channel( 'drawer-addField' ).request( 'get:typeHelperClone' );\n\t\t\t\t// Set our helper label, remove our sortable class, and add the type class back to the type draggable.\n\t\t\t\tjQuery( this.currentHelper ).html( jQuery( helperClone ).html() );\n\t\t\t\tjQuery( this.currentHelper ).removeClass( 'nf-field-wrap' ).addClass( 'nf-field-type-button' ).css( { 'width': '', 'height': '' } );\n\t\t\t\t// Get our sortable and if it has been intialized, remove the droppable hover class.\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\n\t\t\t\t\tjQuery( sortableEl ).removeClass( 'nf-droppable-hover' );\n\t\t\t\t}\n\t\t\t} else if ( jQuery( ui.item ).hasClass( 'nf-stage' ) ) { // Staging\n\t\t\t\t// If we've initialized our sortable, remove the droppable hover class.\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\n\t\t\t\t\tjQuery( sortableEl ).removeClass( 'nf-droppable-hover' );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * When we stop dragging in the sortable:\n\t\t * remove our opacity setting\n\t\t * remove our ui helper\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstopFieldsSortable: function( ui ) {\n\t\t\tjQuery( ui.item ).css( 'opacity', '' );\n\t\t\tjQuery( ui.helper ).remove();\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'sortable:stop', ui );\n\t\t},\n\n\t\t/**\n\t\t * When we start dragging in the sortable:\n\t\t * add an opacity setting of 0.5\n\t\t * show our item (jQuery hides the original item by default)\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstartFieldsSortable: function( ui ) {\n\t\t\t// If we aren't dragging an item in from types or staging, update our change log.\n\t\t\tif( ! jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) && ! jQuery( ui.item ).hasClass( 'nf-stage' ) ) { \n\t\t\t\tjQuery( ui.item ).css( 'opacity', '0.5' ).show();\n\t\t\t}\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'sortable:start', ui );\n\t\t},\n\n\t\t/**\n\t\t * Sort our fields when we change the order.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tupdateFieldsSortable: function( ui, sortable ) {\n\t\t\t\n\t\t\tnfRadio.channel( 'fields' ).request( 'sort:fields' );\n\n\t\t\t// If we aren't dragging an item in from types or staging, update our change log.\n\t\t\tif( ! jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) && ! jQuery( ui.item ).hasClass( 'nf-stage' ) ) { \n\n\t\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t\tvar dragFieldID = jQuery( ui.item ).prop( 'id' ).replace( 'field-', '' );\n\t\t\t\tvar dragModel = fieldCollection.get( dragFieldID );\n\n\t\t\t\t// Add our change event to the change tracker.\n\t\t\t\tvar data = { fields: [] };\n\t\t\t\t_.each( fieldCollection.models, function( field ) {\n\t\t\t\t\tvar oldPos = field._previousAttributes.order;\n\t\t\t\t\tvar newPos = field.get( 'order' );\n\t\t\t\t\t\n\t\t\t\t\tdata.fields.push( {\n\t\t\t\t\t\tmodel: field,\n\t\t\t\t\t\tattr: 'order',\n\t\t\t\t\t\tbefore: oldPos,\n\t\t\t\t\t\tafter: newPos\n\t\t\t\t\t} );\n\n\t\t\t\t} );\n\n\t\t\t\tvar label = {\n\t\t\t\t\tobject: 'Field',\n\t\t\t\t\tlabel: dragModel.get( 'label' ),\n\t\t\t\t\tchange: 'Re-ordered from ' + dragModel._previousAttributes.order + ' to ' + dragModel.get( 'order' ),\n\t\t\t\t\tdashicon: 'sort'\n\t\t\t\t};\n\n\t\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'sortFields', dragModel, null, label, data );\n\t\t\t}\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles interactions with our field collection.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/data',['models/fields/fieldCollection', 'models/fields/fieldModel'], function( fieldCollection, fieldModel ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tadding: false,\n\t\tremoving: false,\n\t\t\n\t\tinitialize: function() {\n\t\t\t// Load our field collection from our localized form data\n\t\t\tthis.collection = new fieldCollection( preloadedFormData.fields );\n\t\t\t// Set our removedIDs to an empty object. This will be populated when a field is removed so that we can add it to our 'deleted_fields' object.\n\t\t\tthis.collection.removedIDs = {};\n\n\t\t\t// Respond to requests for data about fields and to update/change/delete fields from our collection.\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:collection', this.getFieldCollection, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:field', this.getField, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'redraw:collection', this.redrawFieldCollection, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:tmpID', this.getTmpFieldID, this );\n\n\t\t\tnfRadio.channel( 'fields' ).reply( 'add', this.addField, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'delete', this.deleteField, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'sort:fields', this.sortFields, this );\n\n\t\t\t/*\n\t\t\t * Respond to requests to set our 'adding' and 'removing' state. This state is used to track whether or not\n\t\t\t * we should run animations in our fields collection.\n\t\t\t */\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:adding', this.getAdding, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'set:adding', this.setAdding, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:removing', this.getRemoving, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'set:removing', this.setRemoving, this );\n\t\t},\n\n\t\tgetFieldCollection: function() {\n\t\t\treturn this.collection;\n\t\t},\n\n\t\tredrawFieldCollection: function() {\n\t\t\tthis.collection.trigger( 'reset', this.collection );\n\t\t},\n\n\t\tgetField: function( id ) {\n\t\t\tif ( this.collection.findWhere( { key: id } ) ) {\n\t\t\t\t/*\n\t\t\t\t * First we check to see if a key matches what we were sent.\n\t\t\t\t */\t\t\t\t\n\t\t\t\treturn this.collection.findWhere( { key: id } );\n\t\t\t} else {\n\t\t\t\t/*\n\t\t\t\t * If it doesn't, we try to return an ID that matches.\n\t\t\t\t */\n\t\t\t\treturn this.collection.get( id );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Add a field to our collection. If silent is passed as true, no events will trigger.\n\t\t * \n\t\t * @since 3.0\n\t\t * @param Object \tdata \t\t\tfield data to insert\n\t\t * @param bool \t\tsilent \t\t\tprevent events from firing as a result of adding\n\t\t * @param bool  \trenderTrigger\tshould this cause the view to re-render?\n\t\t * @param string  \taction\t\t\taction context - are we performing a higher level action? i.e. duplicate\n\t\t */\n\t\taddField: function( data, silent, renderTrigger, action ) {\n\n\t\t\t/*\n\t\t\t * Set our fields 'adding' value to true. This enables our add field animation.\n\t\t\t */\n\t\t\tnfRadio.channel( 'fields' ).request( 'set:adding', true );\n\n\t\t\tsilent = silent || false;\n\t\t\taction = action || '';\n\t\t\trenderTrigger = ( 'undefined' == typeof renderTrigger ) ? true : renderTrigger;\n\n\t\t\tif ( false === data instanceof Backbone.Model ) {\n\t\t\t\tif ( 'undefined' == typeof ( data.id ) ) {\n\t\t\t\t\tdata.id = this.getTmpFieldID();\n\t\t\t\t}\n\t\t\t\tvar model = new fieldModel( data );\n\t\t\t} else {\n\t\t\t\tvar model = data;\n\t\t\t}\n\n\t\t\t// console.log( model );\n\n\t\t\t/*\n\t\t\t * TODO: Add an nfRadio message filter for the model variable.\n\t\t\t * Currently, we manually replace for saved fields; this should be moved to a separate controller.\n\t\t\t * \n\t\t\t * If we're adding a saved field, make sure that we set the type to the parentType.\n\t\t\t */\n\n\t\t\tif ( jQuery.isNumeric( model.get( 'type' ) ) ) {\n\t\t\t\tvar savedType = nfRadio.channel( 'fields' ).request( 'get:type', model.get( 'type' ) );\n\t\t\t\tmodel.set( 'type', savedType.get( 'parentType' ) );\n\t\t\t}\n\n\t\t\tvar newModel = this.collection.add( model, { silent: silent } );\n\t\t\t\n\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'add:field', model );\n\t\t\tif ( renderTrigger ) {\n\t\t\t\tnfRadio.channel( 'fields' ).trigger( 'render:newField', newModel, action );\n\t\t\t}\n\t\t\tif( 'duplicate' == action ){\n                nfRadio.channel( 'fields' ).trigger( 'render:duplicateField', newModel, action );\n\t\t\t}\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'after:addField', model );\n\t\t\t\n\t\t\treturn model;\n\t\t},\n\n\t\t/**\n\t\t * Update a field setting by ID\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  int \t\tid    field id\n\t\t * @param  string \tname  setting name\n\t\t * @param  mixed \tvalue setting value\n\t\t * @return void\n\t\t */\n\t\tupdateFieldSetting: function( id, name, value ) {\n\t\t\tvar fieldModel = this.collection.get( id );\n\t\t\tfieldModel.set( name, value );\n\t\t},\n\n\t\t/**\n\t\t * Get our fields sortable EL\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Array \torder optional order array like: [field-1, field-4, field-2]\n\t\t * @return void\n\t\t */\n\t\tsortFields: function( order, ui, updateDB ) {\n\t\t\tif ( null == updateDB ) {\n\t\t\t\tupdateDB = true;\n\t\t\t}\n\t\t\t// Get our sortable element\n\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\n\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) { // Make sure that sortable is enabled\n\t\t\t\t// JS ternerary for setting our order\n\t\t\t\tvar order = order || jQuery( sortableEl ).sortable( 'toArray' );\n\n\t\t\t\t// Loop through all of our fields and update their order value\n\t\t\t\t_.each( this.collection.models, function( field ) {\n\t\t\t\t\t// Get our current position.\n\t\t\t\t\tvar oldPos = field.get( 'order' );\n\t\t\t\t\tvar id = field.get( 'id' );\n\t\t\t\t\tif ( jQuery.isNumeric( id ) ) {\n\t\t\t\t\t\tvar search = 'field-' + id;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar search = id;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Get the index of our field inside our order array\n\t\t\t\t\tvar newPos = order.indexOf( search ) + 1;\n\t\t\t\t\tfield.set( 'order', newPos );\n\t\t\t\t} );\n\t\t\t\tthis.collection.sort();\n\n\t\t\t\tif ( updateDB ) {\n\t\t\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\t\t\t\t\t// Update our preview\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Delete a field from our collection.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tmodel \tfield model to be deleted\n\t\t * @return void\n\t\t */\n\t\tdeleteField: function( model ) {\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'delete:field', model );\n\t\t\tthis.removing = true;\n\t\t\tthis.collection.remove( model );\n\t\t\t\n\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\n\n\t\t},\n\n\t\t/**\n\t\t * Return a new tmp id for our fields.\n\t\t * Gets the field collection length, adds 1, then returns that prepended with 'tmp-'.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return string\n\t\t */\n\t\tgetTmpFieldID: function() {\n\t\t\tvar tmpNum = this.collection.tmpNum;\n\t\t\tthis.collection.tmpNum++;\n\t\t\treturn 'tmp-' + tmpNum;\n\t\t},\n\n\t\tgetAdding: function() {\n\t\t\treturn this.adding;\n\t\t},\n\n\t\tsetAdding: function( val ) {\n\t\t\tthis.adding = val;\n\t\t},\n\n\t\tgetRemoving: function() {\n\t\t\treturn this.removing;\n\t\t},\n\n\t\tsetRemoving: function( val ) {\n\t\t\tthis.removing = val;\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Model for our repeater option.\n * \n * @package Ninja App builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/optionRepeaterModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\terrors: {},\n            max_options: 0,\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\t// When we add errors to the option row, run a function.\n\t\t\tthis.on( 'change:errors', this.changeErrors, this );\n\t\t},\n\n\t\t/**\n\t\t * When we change the errors on our model, check to see if we should add or remove \n\t\t * the error from the setting that this option is a part of.\n\t\t *\n\t\t * Adding an error to the setting model simply disables the drawer and other\n\t\t * navigation. As long as we have one option with an error, it should be set to true.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tchangeErrors: function( model ) {\n\t\t\t/*\n\t\t\t * The errors attribute will be an object, so if we don't have any keys, it's empty.\n\t\t\t * If we have an empty object, check to see if we can remove the error from our setting model.\n\t\t\t */\n\n\t\t\tif ( 0 == _.size( model.get( 'errors' ) ) ) {\n\t\t\t\t/*\n\t\t\t\t * Loop through our collection to see if we have any other errors.\n\t\t\t\t */\n\t\t\t\tvar errorsFound = false;\n\t\t\t\t_.each( model.collection.models, function( opt ) {\n\t\t\t\t\tif ( 0 != _.size( opt.get( 'errors' ) ) ) {\n\t\t\t\t\t\terrorsFound = true;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\tif ( ! errorsFound ) {\n\t\t\t\t\tmodel.collection.settingModel.set( 'error', false );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t/*\n\t\t\t\t * We have errors, so make sure that the setting model has an error set.\n\t\t\t\t */\n\t\t\t\tmodel.collection.settingModel.set( 'error', true );\n\t\t\t}\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Model that represents our list options.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/optionRepeaterCollection',['models/app/optionRepeaterModel'], function( listOptionModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: listOptionModel,\n\t\tcomparator: 'order',\n\n\t\tinitialize: function( models, options ) {\n\t\t\t// Listen to the 'sort' event\n\t\t\tthis.on( 'sort', this.changeCollection, this );\n\t\t\t// Listen to the 'add' event\n\t\t\tthis.on( 'add', this.addOption, this );\n\t\t\tthis.settingModel = options.settingModel;\n\t\t},\n\n\t\tchangeCollection: function() {\n\t\t\t// Trigger a 'sort:options' event so that our field model can update\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'sort:options', this );\n\t\t\tnfRadio.channel( 'option-repeater-' + this.settingModel.get( 'name' ) ).trigger( 'sort:options', this );\n\t\t},\n\n\t\taddOption: function( model, collection ) {\n\t\t\tmodel.set( 'settingModel', this.settingModel );\n\t\t}\n\t} );\n\treturn collection;\n} );\n","define( 'views/app/drawer/optionRepeaterError',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\tclassName: 'nf-error',\n\t\ttemplate: '#tmpl-nf-edit-setting-option-repeater-error',\n\n\t\ttemplateHelpers: function() {\n\t\t\tvar that = this;\n\t\t\treturn {\n\t\t\t\trenderErrors: function() {\n\t\t\t\t    if ( 'undefined' != typeof that.errors ) {\n    \t\t\t\t\treturn that.errors[ Object.keys( errors )[0] ];\n \t\t\t\t\t} else {\n \t\t\t\t\t\treturn '';\n \t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n","define( 'views/app/drawer/optionRepeaterOption',['views/app/drawer/optionRepeaterError'], function( ErrorView ) {\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'div',\n\t\tclassName: 'nf-table-row',\n\t\ttemplate: '#tmpl-nf-edit-setting-option-repeater-default-row',\n\t\tid: function() {\n\t\t\treturn this.model.cid;\n\t\t},\n\n\t\tregions: {\n\t\t\terror: '.nf-option-error'\n\t\t},\n\n\t\tinitialize: function( data ) {\n\t\t\tthis.settingModel = data.settingModel;\n\t\t\tthis.dataModel = data.dataModel;\n\t\t\tthis.collection = data.collection;\n\t\t\tthis.columns = data.columns;\n\t\t\tthis.parentView = data.parentView;\n\t\t\tthis.model.on( 'change:errors', this.renderErrors, this );\n\n\t\t\t// Removed because the re-render was breaking tag insertion for merge tags.\n\t\t\t// this.model.on( 'change', this.render, this );\n\n\t\t\tif ( 'undefined' != typeof this.settingModel.get( 'tmpl_row' ) ) {\n\t\t\t\tthis.template = '#' + this.settingModel.get( 'tmpl_row' );\n\t\t\t}\n\n\t\t\tthis.hasErrors = false;\n\t\t},\n\n\t\tonBeforeDestroy: function() {\t\n\t\t\tthis.model.off( 'change', this.render );\n\t\t\tthis.model.off( 'change:errors', this.renderErrors );\n\t\t},\n\n\t\tonBeforeRender: function() {\n\t\t\t/*\n\t\t\t * We want to escape any HTML being output for our label.\n\t\t\t */\n\t\t\tif ( this.model.get( 'label' ) ) {\n\t\t\t\tvar label = this.model.get( 'label' );\n\t\t\t\tthis.model.set( 'label', _.escape( label ), { silent: true } );\n\t\t\t}\n\t\t\t\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tnfRadio.channel( 'mergeTags' ).request( 'init', this );\n\t\t\t/*\n\t\t\t * Send out a radio message.\n\t\t\t */\n\t\t\tnfRadio.channel( 'setting-' + this.settingModel.get( 'name' ) + '-option' ).trigger( 'render:setting', this.model, this.dataModel, this );\n\t\t\t/*\n\t\t\t * We want to unescape any HTML being output for our label.\n\t\t\t */\n\t\t\tif ( this.model.get( 'label' ) ) {\n\t\t\t\tvar label = this.model.get( 'label' );\n\t\t\t\tthis.model.set( 'label', _.unescape( label ), { silent: true } );\n\t\t\t}\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tif ( this.model.get( 'new' ) ) {\n\t\t\t\tjQuery( this.el ).find( 'input:first' ).focus();\n\t\t\t\tthis.model.set( 'new', false );\n\t\t\t}\n\t\t},\n\n\t\tevents: {\n\t\t\t'change .setting': 'changeOption',\n\t\t\t'click .nf-delete': 'deleteOption',\n\t\t\t'keyup': 'keyupOption'\n\t\t},\n\n\t\tchangeOption: function( e ) {\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'change:option', e, this.model, this.dataModel, this.settingModel, this );\n\t\t},\n\n\t\tdeleteOption: function( e ) {\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'click:deleteOption', this.model, this.collection, this.dataModel, this );\n\t\t},\n\n\t\tkeyupOption: function( e ) {\n\t\t\tthis.maybeAddOption( e );\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'keyup:option', e, this.model, this.dataModel, this.settingModel, this )\n\t\t\tnfRadio.channel( 'option-repeater-' + this.settingModel.get( 'name' ) ).trigger( 'keyup:option', e, this.model, this.dataModel, this.settingModel, this )\n\t\t},\n\n\t\tmaybeAddOption: function( e ) {\n\t\t\tif ( 13 == e.keyCode && 'calculations' != this.settingModel.get( 'name' ) ) {\n\t\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'click:addOption', this.collection, this.dataModel, this );\n\t\t\t\tjQuery( this.parentView.children.findByIndex(this.parentView.children.length - 1).el ).find( '[data-id=\"label\"]' ).focus();\n\t\t\t}\n\t\t},\n\n\t\trenderErrors: function() {\n\t\t\t\n\t\t\t// if ( jQuery.isEmptyObject( this.model.get( 'errors' ) ) ) {\n\t\t\t// \treturn false;\n\t\t\t// }\n\n\t\t\t/*\n\t\t\t * We don't want to redraw the entire row, which would remove focus from the eq textarea,\n\t\t\t * so we add and remove error classes manually.\n\t\t\t */\n\t\t\tif ( 0 == Object.keys( this.model.get( 'errors' ) ) ) {\n                if ( this.hasErrors ) {\n\t\t\t\t    this.error.empty();\n\t\t\t\t    jQuery( this.el ).removeClass( 'nf-error' );\n                }\n\t\t\t} else {\n\t\t\t\tthis.hasErrors = true;\n\t\t\t\tthis.error.show( new ErrorView( { model: this.model } ) );\n\t\t\t\tjQuery( this.el ).addClass( 'nf-error' );\n\t\t\t}\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\tvar that = this;\n\t\t\treturn {\n\t\t\t\tgetColumns: function() {\n\t\t\t\t\treturn that.columns;\n\t\t\t\t},\n\t\t\t\trenderFieldSelect: function( dataID, value ){\n\t\t\t\t\tvar initialOption, select, emptyContainer, label;\n\n\t\t\t\t\tvar fields = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\n                    initialOption = document.createElement( 'option' );\n                    initialOption.value = '';\n                    initialOption.label = '--';\n\n\t\t\t\t\tselect = document.createElement( 'select' );\n\t\t\t\t\tselect.classList.add( 'setting' );\n\t\t\t\t\tselect.setAttribute( 'data-id', dataID );\n                    select.appendChild( initialOption );\n\n\t\t\t\t\tfields.each( function( field ){\n\t\t\t\t\t\tvar option = document.createElement( 'option' );\n\t\t\t\t\t\toption.selected = ( value == field.get( 'key' ) );\n\t\t\t\t\t\toption.value = field.get( 'key' );\n\t\t\t\t\t\toption.label = field.get( 'label' );\n\t\t\t\t\t\tselect.appendChild( option );\n\t\t\t\t\t});\n\n                    label = document.createElement( 'label' );\n                    label.classList.add( 'nf-select' );\n                    label.appendChild( select );\n\n\t\t\t\t\t// Select Lists need an empty '<div></div>' for styling purposes.\n\t\t\t\t\temptyContainer = document.createElement( 'div' );\n\t\t\t\t\tlabel.appendChild( emptyContainer );\n\n\t\t\t\t\t// The template requires a string.\n\t\t\t\t\treturn label.innerHTML;\n\t\t\t\t},\n\t\t\t\trenderOptions: function( column, value ) {\n\n\t\t\t\t\tif( 'undefined' == typeof that.options.columns[ column ] ) return;\n\n\t\t\t\t\tvar select = document.createElement( 'select' );\n\t\t\t\t\t\n\t\t\t\t\t_.each( that.options.columns[ column ].options, function( option ){\n\t\t\t\t\t\tvar optionNode = document.createElement( 'option' );\n                        if ( value === option.value ) {\n                        \toptionNode.setAttribute( 'selected', 'selected' );\n                        }\n                        optionNode.setAttribute( 'value', option.value );\n                        optionNode.setAttribute( 'label', option.label );\n                        select.appendChild( optionNode );\n\t\t\t\t\t});\n\n\t\t\t\t\t// The template only needs the options.\n\t\t\t\t\treturn select.innerHTML;\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn view;\n} );\n\n","define( 'views/app/drawer/optionRepeaterEmpty',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'tr',\n\t\ttemplate: '#tmpl-nf-edit-setting-option-repeater-empty'\n\t});\n\n\treturn view;\n} );\n","define( 'views/app/drawer/optionRepeaterComposite',['views/app/drawer/optionRepeaterOption', 'views/app/drawer/optionRepeaterEmpty', 'models/app/optionRepeaterCollection'], function( listOptionView, listEmptyView, listOptionCollection ) {\n\tvar view = Marionette.CompositeView.extend( {\n\t\ttemplate: '#tmpl-nf-edit-setting-option-repeater-wrap',\n\t\tchildView: listOptionView,\n\t\temptyView: listEmptyView,\n\t\treorderOnSort: false,\n\n\t\tinitialize: function( data ) {\n\n\t\t\t/*\n\t\t\t * Our options are stored in our database as objects, not collections.\n\t\t\t * Before we attempt to render them, we need to convert them to a collection if they aren't already one.\n\t\t\t */ \n\t\t\tvar optionCollection = data.dataModel.get( this.model.get( 'name' ) );\n\n\t\t\tif ( false == optionCollection instanceof Backbone.Collection ) {\n\t\t\t\toptionCollection = new listOptionCollection( [], { settingModel: this.model } );\n\t\t\t\toptionCollection.add( data.dataModel.get( this.model.get( 'name' ) ) );\n\t\t\t\tdata.dataModel.set( this.model.get( 'name' ), optionCollection, { silent: true } );\n\t\t\t}\n\n\t\t\tthis.collection = optionCollection;\n\t\t\tthis.dataModel = data.dataModel;\n\t\t\tthis.childViewOptions = { parentView: this, settingModel: this.model, collection: this.collection, dataModel: data.dataModel, columns: this.model.get( 'columns' ) };\n\n\t\t\tvar deps = this.model.get( 'deps' );\n\t\t\tif ( deps ) {\n\t\t\t\tfor ( var name in deps ) {\n\t\t\t\t    if ( deps.hasOwnProperty( name ) ) {\n\t\t\t\t    \tthis.dataModel.on( 'change:' + name, this.render, this );\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t}\n            this.listenTo( nfRadio.channel( 'option-repeater' ), 'added:option', this.maybeHideNew );\n            this.listenTo( nfRadio.channel( 'option-repeater' ), 'removed:option', this.maybeHideNew );\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tvar deps = this.model.get( 'deps' );\n\t\t\tif ( deps ) {\n\t\t\t\tfor (var name in deps) {\n\t\t\t\t    if ( deps.hasOwnProperty( name ) ) {\n\t\t\t\t    \tthis.dataModel.off( 'change:' + name, this.render );\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tonRender: function() {\n\t\t\t// this.$el = this.$el.children();\n\t\t\t// this.$el.unwrap();\n\t\t\t// this.setElement( this.$el );\n\n\t\t\t// this.$el = this.$el.children();\n\t\t\t// this.$el.unwrap();\n\t\t\t// this.setElement( this.$el );\n\t\t\n\t\t\tvar that = this;\n\t\t\tjQuery( this.el ).find( '.nf-list-options-tbody' ).sortable( {\n\t\t\t\thandle: '.handle',\n\t\t\t\thelper: 'clone',\n\t\t\t\tplaceholder: 'nf-list-options-sortable-placeholder',\n\t\t\t\tforcePlaceholderSize: true,\n\t\t\t\topacity: 0.95,\n\t\t\t\ttolerance: 'pointer',\n\n\t\t\t\tstart: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'option-repeater' ).request( 'start:optionSortable', ui );\n\t\t\t\t},\n\n\t\t\t\tstop: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'option-repeater' ).request( 'stop:optionSortable', ui );\n\t\t\t\t},\n\n\t\t\t\tupdate: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'option-repeater' ).request( 'update:optionSortable', ui, this, that );\n\t\t\t\t}\n\t\t\t} );\n            that.maybeHideNew( that.collection );\n\n\t\t\t/*\n\t\t\t * Send out a radio message.\n\t\t\t */\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'render:setting', this.model, this.dataModel, this );\n\t\t\n\t\t},\n\n\t\tonAttach: function() {\n            \n\t\t\tvar importLink = jQuery( this.el ).find( '.nf-open-import-tooltip' );\n\t\t\tvar jBox = jQuery( importLink ).jBox( 'Tooltip', {\n                title: '<h3>Please enter your options below:</h3>',\n                content: jQuery( this.el ).find( '.nf-import-options' ),\n                trigger: 'click',\n                closeOnClick: 'body',\n                closeButton: 'box',\n                offset: { x: 20, y: 0 },\n                addClass: 'import-options',\n\n                onOpen: function() {\n                \tvar that = this;\n                \tsetTimeout( function() { jQuery( that.content ).find( 'textarea' ).focus(); }, 200 );\n                }\n            } );\n\n\t\t\tjQuery( this.el ).find( '.nf-import' ).on( 'click', { view: this, jBox: jBox }, this.clickImport );\n\n\t\t\t/*\n\t\t\t * Send out a radio message.\n\t\t\t */\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'attach:setting', this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'attach:setting', this.model, this.dataModel, this );\n\t\t},\n\n\t\ttemplateHelpers: function () {\n\t\t\tvar that = this;\n\t    \treturn {\n\t    \t\trenderHeaders: function() {\n\t    \t\t\tvar columns, beforeColumns, afterColumns;\n\n\t    \t\t\tbeforeColumns = document.createElement( 'div' );\n\n\t    \t\t\tcolumns = document.createElement( 'span' );\n\t    \t\t\tcolumns.appendChild( beforeColumns );\n\n\t    \t\t\t_.each( this.columns, function( col ) {\n\t    \t\t\t\tvar headerText, headerContainer;\n\n\t    \t\t\t\t// Use a fragment to support HTML in the col.header property, ie Dashicons.\n                        headerText = document.createRange().createContextualFragment( col.header );\n\t    \t\t\t\theaderContainer = document.createElement( 'div' );\n\t    \t\t\t\theaderContainer.appendChild( headerText );\n\n\t    \t\t\t\tcolumns.appendChild( headerContainer );\n\t    \t\t\t} );\n\n                    afterColumns = document.createElement( 'div' );\n                    columns.appendChild( afterColumns );\n\n\t\t\t\t\treturn columns.innerHTML;\n\t\t\t\t},\n\n\t    \t\trenderSetting: function() {\n\t    \t\t\tvar setting = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-edit-setting-' + this.type );\n\t\t\t\t\treturn setting( this );\n\t\t\t\t},\n\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tvar classes = '';\n\t\t\t\t\tif ( 'undefined' != typeof this.width ) {\n\t\t\t\t\t\tclasses += this.width;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclasses += ' one-half';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.error ) {\n\t\t\t\t\t\tclasses += ' nf-error';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\n\t\t\t\trenderVisible: function() {\n\t\t\t\t\tif ( this.deps ) {\n\t\t\t\t\t\tfor (var name in this.deps) {\n\t\t\t\t\t\t    if ( this.deps.hasOwnProperty( name ) ) {\n\t\t\t\t\t\t        if ( that.dataModel.get( name ) !== this.deps[ name ] ) {\n\t\t\t\t\t\t        \treturn 'style=\"display:none;\"';\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t    \t\t\treturn '';\n\t    \t\t},\n\n\t\t\t\trenderError: function() {\n\t\t\t\t\tif ( this.error ) {\n\t\t\t\t\t\treturn this.error;\n\t\t\t\t\t}\n\t\t\t\t\treturn '';\n\t\t\t\t},\n\n\t\t\t\trenderFieldsetClasses: function() {\n\t\t\t\t\treturn that.model.get( 'name' );\n\t\t\t\t},\n\n\t\t\t\tcurrencySymbol: function() {\n\t\t\t\t\treturn nfRadio.channel( 'settings' ).request( 'get:setting', 'currency' ) || nfi18n.currency_symbol;\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\n\t\tattachHtml: function( collectionView, childView ) {\n\t\t\tjQuery( collectionView.el ).find( '.nf-list-options-tbody' ).append( childView.el );\n\t\t\tnfRadio.channel( 'mergeTags' ).request( 'init', this );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .nf-add-new': 'clickAddOption',\n\t\t\t'click .extra': 'clickExtra'\n\t\t},\n        \n        maybeHideNew: function( collection ) {\n\t\t\tif( 'undefined' == typeof collection.settingModel ) return false;\n            var limit = collection.settingModel.get( 'max_options' );\n            if( 0 !== limit && collection.models.length >= ( limit ) ) {\n                jQuery(this.el).find('.nf-add-new').addClass('disabled');\n            } else {\n                jQuery(this.el).find('.nf-add-new').removeClass('disabled');\n            }\n        },\n\n\t\tclickAddOption: function( e ) {\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'click:addOption', this.collection, this.dataModel );\n\t\t\tjQuery( this.children.findByIndex(this.children.length - 1).el ).find( '[data-id=\"label\"]' ).focus();\n\t\t},\n\n\t\tclickExtra: function( e ) {\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'click:extra', e, this.collection, this.dataModel );\n\t\t\tnfRadio.channel( 'option-repeater-' + this.model.get( 'name' ) ).trigger( 'click:extra', e, this.model, this.collection, this.dataModel );\n\t\t},\n\n\t\tclickImport: function( e ) {\n\t\t\tvar textarea = jQuery( e.data.jBox.content ).find( 'textarea' );\n\t\t\tvar value = textarea.val().trimLeft().trimRight();\n\t\t\t/*\n\t\t\t * Return early if we have no strings.\n\t\t\t */\n\t\t\tif ( 0 == value.length ) {\n\t\t\t\te.data.jBox.close();\n\t\t\t\treturn false;\n\t\t\t}\t\t\t\n\t\t\t/*\n\t\t\t * Split our value based on new lines.\n\t\t\t */\n\n\t\t\tvar lines = value.split(/\\n/);\n\t\t\tif ( _.isArray( lines ) ) {\n\t\t\t\t/*\n\t\t\t\t * Loop over \n\t\t\t\t */\n\t\t\t\t_.each( lines, function( line ) {\n\t\t\t\t\tvar row = line.split( ',' );\n\t\t\t\t\tvar label = row[0];\n\t\t\t\t\tvar value = row[1] || jQuery.slugify( label, { separator: '-' } );\n\t\t\t\t\tvar calc = row[2] || '';\n\n\t\t\t\t\tlabel = label.trimLeft().trimRight();\n\t\t\t\t\tvalue = value.trimLeft().trimRight();\n\t\t\t\t\tcalc = calc.trimLeft().trimRight();\n\t\t\t\t\t/*\n\t\t\t\t\t * Add our row to the collection\n\t\t\t\t\t */\n\t\t\t\t\tvar model = e.data.view.collection.add( { label: row[0], value: value, calc: calc } );\n\t\t\t\t\t// Add our field addition to our change log.\n\t\t\t\t\tvar label = {\n\t\t\t\t\t\tobject: 'field',\n\t\t\t\t\t\tlabel: row[0],\n\t\t\t\t\t\tchange: 'Option Added',\n\t\t\t\t\t\tdashicon: 'plus-alt'\n\t\t\t\t\t};\n\n\t\t\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addListOption', model, null, label );\n\t\t\t\t\tnfRadio.channel( 'option-repeater-' + e.data.view.model.get( 'name' ) ).trigger( 'add:option', model );\n\t\t\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'add:option', model );\n\t\t\t\t\tnfRadio.channel( 'app' ).trigger( 'update:setting', model );\n\t\t\t\t}, this );\n\t\t\t\t/*\n\t\t\t\t * Set our state to unclean so that the user can publish.\n\t\t\t\t */\n\t\t\t} else {\n\t\t\t\t/*\n\t\t\t\t * TODO: Error Handling Here\n\t\t\t\t */\n\t\t\t}\n\t\t\ttextarea.val( '' );\n\t\t\te.data.jBox.close();\n\t\t},\n\t} );\n\n\treturn view;\n} );\n\n","/**\n * Handles tasks associated with our option-repeater.\n * \n * Return our repeater child view.\n *\n * Also listens for changes to the options settings.\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/optionRepeater',['models/app/optionRepeaterModel', 'models/app/optionRepeaterCollection', 'views/app/drawer/optionRepeaterComposite'], function( listOptionModel, listOptionCollection, listCompositeView ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Respond to requests for the childView for list type fields.\n\t\t\tnfRadio.channel( 'option-repeater' ).reply( 'get:settingChildView', this.getSettingChildView, this );\n\t\t\t\n\t\t\t// Listen for changes to our list options.\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater' ), 'change:option', this.changeOption );\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater' ), 'click:addOption', this.addOption );\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater' ), 'click:deleteOption', this.deleteOption );\n\n\t\t\t// Respond to requests related to our list options sortable.\n\t\t\tnfRadio.channel( 'option-repeater' ).reply( 'update:optionSortable', this.updateOptionSortable, this );\n\t\t\tnfRadio.channel( 'option-repeater' ).reply( 'stop:optionSortable', this.stopOptionSortable, this );\n\t\t\tnfRadio.channel( 'option-repeater' ).reply( 'start:optionSortable', this.startOptionSortable, this );\n\t\t\n\t\t\t/**\n\t\t\t * When we init our setting model, we need to convert our array/objects into collections/models\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater' ), 'init:dataModel', this.convertSettings );\n\t\t},\n\n\t\t/**\n\t\t * Update an option value in our model.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t\t\te          event\n\t\t * @param  backbone.model \tmodel      option model\n\t\t * @param  backbone.model \tdataModel\n\t\t * @return void\n\t\t */\n\t\tchangeOption: function( e, model, dataModel, settingModel, optionView ) {\n\t\t\tvar name = jQuery( e.target ).data( 'id' );\n\t\t\tif ( 'selected' == name ) {\n\t\t\t\tif ( jQuery( e.target ).attr( 'checked' ) ) {\n\t\t\t\t\tvar value = 1;\n\t\t\t\t} else {\n\t\t\t\t\tvar value = 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar value = jQuery( e.target ).val();\n\t\t\t}\n\t\t\t\n\t\t\tvar before = model.get( name );\n\t\t\t\n\t\t\tmodel.set( name, value );\n\t\t\t// Trigger an update on our dataModel\n\t\t\tthis.triggerDataModel( model, dataModel );\n\n\t\t\tvar after = value;\n\t\t\t\n\t\t\tvar changes = {\n\t\t\t\tattr: name,\n\t\t\t\tbefore: before,\n\t\t\t\tafter: after\n\t\t\t}\n\n\t\t\tvar label = {\n\t\t\t\tobject: dataModel.get( 'objectType' ),\n\t\t\t\tlabel: dataModel.get( 'label' ),\n\t\t\t\tchange: 'Option ' + model.get( 'label' ) + ' ' + name + ' changed from ' + before + ' to ' + after\n\t\t\t};\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'changeSetting', model, changes, label );\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'update:option', model, dataModel, settingModel, optionView );\n\t\t\tnfRadio.channel( 'option-repeater-option-' + name  ).trigger( 'update:option', e, model, dataModel, settingModel, optionView );\n\t\t\tnfRadio.channel( 'option-repeater-' + settingModel.get( 'name' ) ).trigger( 'update:option', model, dataModel, settingModel, optionView );\n\t\t},\n\n\t\t/**\n\t\t * Add an option to our list\n\t\t * \n\t\t * @since 3.0\n\t\t * @param backbone.collection \tcollection \tlist option collection\n\t\t * @param backbone.model \t\tdataModel\n\t\t * @return void\n\t\t */\n\t\taddOption: function( collection, dataModel ) {\n\t\t\tvar modelData = {\n\t\t\t\torder: collection.length,\n\t\t\t\tnew: true,\n\t\t\t\toptions: {}\n\t\t\t};\n            var limit = collection.settingModel.get( 'max_options' );\n            if( 0 !== limit && collection.models.length >= limit ) {\n                return;\n            }\n\t\t\t_.each( collection.settingModel.get( 'columns' ), function( col, key ) {\n\t\t\t\tmodelData[ key ] = col.default;\n\n\t\t\t\tif( 'undefined' != typeof col.options ){\n\t\t\t\t\tmodelData.options[ key ] = col.options;\n\t\t\t\t}\n\t\t\t} );\n\t\t\tvar model = new listOptionModel( modelData );\n\t\t\tcollection.add( model );\n\n\t\t\t// Add our field addition to our change log.\n\t\t\tvar label = {\n\t\t\t\tobject: dataModel.get( 'objectType' ),\n\t\t\t\tlabel: dataModel.get( 'label' ),\n\t\t\t\tchange: 'Option Added',\n\t\t\t\tdashicon: 'plus-alt'\n\t\t\t};\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addListOption', model, null, label );\n\t\t\tnfRadio.channel( 'option-repeater-' + collection.settingModel.get( 'name' ) ).trigger( 'add:option', model );\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'add:option', model );\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'added:option', collection );\n\t\t\tthis.triggerDataModel( model, dataModel );\n\t\t},\n\n\t\t/**\n\t\t * Delete an option from our list\n\t\t * \n\t\t * @since  3.0\n\t\t * @param backbone.model \t\tmodel       list option model\n\t\t * @param backbone.collection \tcollection \tlist option collection\n\t\t * @param backbone.model \t\tdataModel\n\t\t * @return void\n\t\t */\n\t\tdeleteOption: function( model, collection, dataModel ) {\n\t\t\tvar newModel = nfRadio.channel( 'app' ).request( 'clone:modelDeep', model );\n\n\t\t\t// Add our field deletion to our change log.\n\t\t\tvar label = {\n\t\t\t\tobject: dataModel.get( 'objectType' ),\n\t\t\t\tlabel: dataModel.get( 'label' ),\n\t\t\t\tchange: 'Option ' + newModel.get( 'label' ) + ' Removed',\n\t\t\t\tdashicon: 'dismiss'\n\t\t\t};\n\n\t\t\tvar data = {\n\t\t\t\tcollection: collection\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'removeListOption', newModel, null, label, data );\n\t\t\t\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\tvar results = changeCollection.where( { model: model } );\n\n\t\t\t_.each( results, function( changeModel ) {\n\t\t\t\tif ( 'object' == typeof changeModel.get( 'data' ) ) {\n\t\t\t\t\t_.each( changeModel.get( 'data' ), function( dataModel ) {\n\t\t\t\t\t\tif ( dataModel.model == dataModel ) {\n\t\t\t\t\t\t\tdataModel.model = newModel;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\tchangeModel.set( 'model', newModel );\n\t\t\t\tchangeModel.set( 'disabled', true );\n\t\t\t} );\n\n\t\t\tcollection.remove( model );\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'remove:option', model );\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'removed:option', collection );\n\t\t\tnfRadio.channel( 'option-repeater-' + collection.settingModel.get( 'name' ) ).trigger( 'remove:option', model );\n\t\t\tthis.triggerDataModel( model, dataModel );\n\t\t},\n\n\t\t/**\n\t\t * Creates an arbitrary value on our collection, then clones and updates that collection.\n\t\t * This forces a change event to be fired on the dataModel where the list option collection data is stored.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param backbone.collection \tcollection \tlist option collection\n\t\t * @param backbone.model \t\tdataModel\n\t\t * @return void\n\t\t */\n\t\ttriggerDataModel: function( model, dataModel ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'update:setting', model );\t\n\t\t},\n\n\t\t/**\n\t\t * Return our list composite view to the setting collection view.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tmodel \tsettings model\n\t\t * @return void\n\t\t */\n\t\tgetSettingChildView: function( model ) {\n\t\t\treturn listCompositeView;\n\t\t},\n\n\t\t/**\n\t\t * When we sort our list options, change the order in our option model and trigger a change.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t \t\tsortable \tjQuery UI element\n\t\t * @param  backbone.view \tsetting  \tSetting view\n\t\t * @return void\n\t\t */\n\t\tupdateOptionSortable: function( ui, sortable, setting ) {\n\t\t\tvar newOrder = jQuery( sortable ).sortable( 'toArray' );\n\t\t\tvar dragModel = setting.collection.get( { cid: jQuery( ui.item ).prop( 'id' ) } );\n\t\t\tvar data = {\n\t\t\t\tcollection: setting.collection,\n\t\t\t\tobjModels: []\n\t\t\t};\n\n\t\t\t_.each( newOrder, function( cid, index ) {\n\t\t\t\tvar optionModel = setting.collection.get( { cid: cid } );\n\t\t\t\tvar oldPos = optionModel.get( 'order' );\n\t\t\t\toptionModel.set( 'order', index );\n\t\t\t\tvar newPos = index;\n\n\t\t\t\tdata.objModels.push( {\n\t\t\t\t\tmodel: optionModel,\n\t\t\t\t\tattr: 'order',\n\t\t\t\t\tbefore: oldPos,\n\t\t\t\t\tafter: newPos\n\t\t\t\t} );\n\t\t\t} );\n\t\t\t\n\t\t\tsetting.collection.sort( { silent: true } );\n\t\t\t\n\t\t\tvar label = {\n\t\t\t\tobject: setting.dataModel.get( 'objectType' ),\n\t\t\t\tlabel: setting.dataModel.get( 'label' ),\n\t\t\t\tchange: 'Option ' + dragModel.get( 'label' ) + ' re-ordered from ' + dragModel._previousAttributes.order + ' to ' + dragModel.get( 'order' ),\n\t\t\t\tdashicon: 'sort'\n\t\t\t};\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'sortListOptions', dragModel, null, label, data );\n\t\t\tthis.triggerDataModel( dragModel, setting.dataModel );\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'sort:option', dragModel, setting );\n\t\t\tnfRadio.channel( 'option-repeater-' + setting.model.get( 'name' ) ).trigger( 'sort:option', dragModel, setting );\n\t\t},\n\n\t\t/**\n\t\t * When we stop sorting our list options, reset our item opacity.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object ui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstopOptionSortable: function( ui ) {\n\t\t\tjQuery( ui.item ).css( 'opacity', '' );\n\t\t},\n\n\t\t/**\n\t\t * When we start sorting our list options, remove containing divs and set our item opacity to 0.5\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Objects ui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstartOptionSortable: function( ui ) {\n\t\t\tjQuery( ui.placeholder ).find( 'div' ).remove();\n\t\t\tjQuery( ui.item ).css( 'opacity', '0.5' ).show();\n\t\t},\n\n\t\t/**\n\t\t * Convert settings from an array/object to a collection/model\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Backbone.Model dataModel\n\t\t * @param  Backbone.Model settingModel\n\t\t * @return void\n\t\t */\n\t\tconvertSettings: function( dataModel, settingModel ) {\n\t\t\t/*\n\t\t\t * Our options are stored in our database as objects, not collections.\n\t\t\t * Before we attempt to render them, we need to convert them to a collection if they aren't already one.\n\t\t\t */ \n\t\t\tvar optionCollection = dataModel.get( settingModel.get( 'name' ) );\n\n\t\t\tif ( false == optionCollection instanceof Backbone.Collection ) {\n\t\t\t\toptionCollection = new listOptionCollection( [], { settingModel: settingModel } );\n\t\t\t\toptionCollection.add( dataModel.get( settingModel.get( 'name' ) ) );\n\t\t\t\tdataModel.set( settingModel.get( 'name' ), optionCollection, { silent: true } );\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles adding and removing the active class from a field currently being edited.\n * \n * @package Ninja Forms builder\n * @subpackage Fields - Edit Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/editActive',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Respond to requests to remove the active class from all our fields.\n\t\t\tnfRadio.channel( 'fields' ).reply( 'clear:editActive', this.clearEditActive, this );\n\t\t\t// Listen for the closing drawer so that we can remove all of our active classes.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-editSettings' ), 'before:closeDrawer', this.clearEditActive );\n\t\t},\n\n\t\t/**\n\t\t * Loops through our fields collection and sets editActive to false.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n        clearEditActive: function() {\n            var fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n            _.each( fieldCollection.models, function( field ) {\n\t\t\t\tfield.set( 'editActive', false );\n            } );\n        }\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Fetches settings models so that we can get setting information\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldSettings',['models/app/settingCollection'], function( settingCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.collection = new settingCollection( fieldSettings, { objectType: 'fields' } );\n\n\t\t\t// Responds to requests for settings models.\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:settingModel', this.getSettingModel, this );\n\t\t\t\n\t\t\t// Responds to requests for our collection.\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:settingCollection', this.getSettingCollection, this );\n\t\t},\n\n\t\tgetSettingModel: function( name ) {\n\t\t\treturn this.collection.findWhere( { name: name } );\n\t\t},\n\n\t\tgetSettingCollection: function() {\n\t\t\treturn this.collection;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens to our app channel to add the individual Credit Card Fields.\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldCreditCard',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n          this.listenTo( nfRadio.channel( 'fields' ), 'after:addField', this.dropCreditCardField );\n        },\n\n        dropCreditCardField: function( fieldModel ) {\n\n            if( 'creditcard' == fieldModel.get( 'type' ) ) {\n\n                var order = fieldModel.get( 'order' );\n\n                nfRadio.channel( 'fields' ).request( 'delete', fieldModel );\n\n                _.each( [ 'creditcardfullname', 'creditcardnumber', 'creditcardcvc', 'creditcardexpiration', 'creditcardzip'], function( type ) {\n\n                    var fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type );\n\n                    var newField = {\n                        id: nfRadio.channel( 'fields' ).request( 'get:tmpID' ),\n                        type: type,\n                        label: fieldType.get( 'nicename' ),\n                        order: order\n                    };\n\n                    nfRadio.channel( 'fields' ).request( 'add', newField );\n                });\n            }\n\n        },\n\n        stageCreditCardField: function( model ) {\n\n            if( 'creditcard' == model.get( 'slug' ) ) {\n\n                nfRadio.channel( 'fields' ).request( 'remove:stagedField', '', model );\n\n                _.each( [ 'creditcardfullname', 'creditcardnumber', 'creditcardcvc', 'creditcardexpiration', 'creditcardzip'], function( type ) {\n                    nfRadio.channel('fields').request('add:stagedField', type );\n                });\n            }\n        }\n\n    });\n\n    return controller;\n} );\n","/**\n * Listens to our app channel to add the individual List Fields.\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldList',[ 'models/app/optionRepeaterCollection' ], function( ListOptionCollection ) {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'option-repeater-option-label' ), 'update:option', this.updateOptionLabel );\n            this.listenTo( nfRadio.channel( 'option-repeater-option-value' ), 'update:option', this.updateOptionValue );\n            \n            /*\n             * When we init our model, convert our options from an array of objects to a collection of models.\n             */\n            this.listenTo( nfRadio.channel( 'fields-list' ), 'init:fieldModel', this.convertOptions );\n        },\n\n        updateOptionLabel: function( e, model, dataModel, settingModel, optionView ) {\n\n            if( 'list' != _.findWhere( fieldTypeData, { id: dataModel.get( 'type' ) } ).parentType ) return;\n\n            if( model.get( 'manual_value' ) ) return;\n\n            value = jQuery.slugify( model.get( 'label' ), { separator: '-' } );\n\n            model.set( 'value', value );\n            model.trigger( 'change', model );\n\n            // Set focus on value input\n            jQuery( optionView.el ).find( '[data-id=\"value\"]' ).focus().select();\n        },\n\n        updateOptionValue: function( e, model, dataModel, settingModel, optionView ) {\n\n            var findWhere = _.findWhere( fieldTypeData, { id: dataModel.get( 'type' ) } );\n            if( 'undefined' == typeof findWhere ) return;\n            if( 'list' != findWhere.parentType ) return;\n\n            model.set( 'manual_value', true );\n            \n            // Set focus on calc input\n            jQuery( optionView.el ).find( '[data-id=\"calc\"]' ).focus().select();\n        },\n\n        convertOptions: function( fieldModel ) {\n            /*\n             * Our options are stored in our database as objects, not collections.\n             * Before we attempt to render them, we need to convert them to a collection if they aren't already one.\n             */ \n            var options = fieldModel.get( 'options' );\n\n            var settingModel = nfRadio.channel( 'fields' ).request( 'get:settingModel', 'options' );\n\n            if ( false == options instanceof Backbone.Collection ) {\n                options = new ListOptionCollection( [], { settingModel: settingModel } );\n                options.add( fieldModel.get( 'options' ) );\n                fieldModel.set( 'options', options, { silent: true } );\n            }\n        }\n\n    });\n\n    return controller;\n} );\n","/**\n * Listens to our app channel to add the individual Credit Card Fields.\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldPassword',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'fields' ), 'after:addField', this.addField );\n        },\n\n        addField: function( model ) {\n\n            if( 'password' == model.get( 'type' ) ) {\n\n                var order = model.get( 'order' );\n\n                var confirm = this.insertField( 'passwordconfirm', order + 1 );\n\n                confirm.set( 'confirm_field', model.get( 'key' ) );\n            }\n        },\n\n        insertField: function( type, order ) {\n            var fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type );\n\n            var newField = {\n                id: nfRadio.channel( 'fields' ).request( 'get:tmpID' ),\n                type: type,\n                label: fieldType.get( 'nicename' ),\n                order: order\n            };\n\n            return nfRadio.channel('fields').request('add', newField );\n        }\n    });\n\n    return controller;\n} );\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * If we're rendering a product_assignment setting, add our products to the data model.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldQuantity',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for messages that are fired before a setting view is rendered.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'before:renderSetting', this.beforeRenderSetting );\n\t\t},\n\n\t\tbeforeRenderSetting: function( settingModel, dataModel, view ) {\n\t\t\tif ( 'product_assignment' == settingModel.get( 'name' ) ) {\n\t\t\t\tvar productFields = this.getProductFields( settingModel );\n\t\t\t\tsettingModel.set( 'options', productFields );\n\t\t\t}\n\t\t},\n\n\t\tgetProductFields: function( settingModel ) {\n\t\t\tvar productFields = [ settingModel.get( 'select_product' ) ];\n\t\t\t// Update our dataModel with all of our product fields.\n\t\t\tvar fields = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t_.each( fields.models, function( field ) {\n\t\t\t\tif ( 'product' == field.get( 'type' ) ) {\n\t\t\t\t\tproductFields.push( { label: field.get( 'label' ), value: field.get( 'id' ) } );\n\t\t\t\t}\n\t\t\t} );\n\t\t\treturn productFields;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * If we're rendering a product_assignment setting, add our products to the data model.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldShipping',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-shipping_options' ), 'render:setting', this.addMask );\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-shipping_options-option' ), 'render:setting', this.addMask );\n\t\t},\n\n\t\taddMask: function( settingModel, dataModel, view ) {\n\t\t\tjQuery( view.el ).find( '[data-id=\"value\"]' ).each( function() {\n\t\t\t\tjQuery( this ).autoNumeric({\n\t\t\t\t\taSign: '$', // TODO: Use form setting\n\t\t\t\t\taSep: thousandsSeparator,\n\t\t\t\t\taDec: decimalPoint\n\t\t\t\t});\n\t\t\t} );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * When we add a new field, update its key.\n *\n * When we change the key, update any refs to the key.\n *\n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/key',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// When we add a field, update its key.\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'add:field', this.newFieldKey );\n\n\t\t\t// When we edit a label, update our key.\n\t\t\tthis.listenTo( nfRadio.channel( 'fieldSetting-label' ), 'update:setting', this.updateLabel );\n\n\t\t\t// When we edit a key, check for places that key might be used.\n\t\t\tthis.listenTo( nfRadio.channel( 'fieldSetting-key' ), 'update:setting', this.updateKey );\n\n\t\t\t// When we type inside the admin key field, we need to save our manual_key setting.\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-key' ), 'keyup:setting', this.keyUp );\n\t\t},\n\n\t\t/**\n\t\t * Add a key to our new field model.\n\t\t *\n\t\t * @since 3.0\n\t\t * @param backbone.model model new field model\n\t\t * @return void\n\t\t */\n\t\tnewFieldKey: function( model ) {\n\t\t\tvar d = new Date();\n\t\t\tvar n = d.valueOf();\n\t\t\tvar key = this.slugify( model.get( 'type' ) + '_' + n );\n\n\t\t\tmodel.set( 'key', key, { silent: true } );\n\n\t\t\tif( 'undefined' == model.get( 'manual_key' ) ) {\n\t\t\t\tmodel.set('manual_key', false, {silent: true});\n\t\t\t}\n\t\t},\n\n\t\tupdateLabel: function( model ) {\n\n\t\t\t/*\n\t\t\t * If we haven't entered a key manually, update our key when our label changes.\n\t\t\t */\n\t\t\tif ( ! model.get( 'manual_key' ) && 0 != jQuery.trim( model.get( 'label' ) ).length ) {\n\t\t\t\t/*\n\t\t\t\t * When we're editing settings, we expect the edits to fire one at a time.\n\t\t\t\t * Since we're calling this in the middle of our label update, anything that inquires about what has changed after we set our key will see both label and key.\n\t\t\t\t * We need to remove the label from our model.changed property so that all that has changed is the key.\n\t\t\t\t *\n\t\t\t\t */\n\t\t\t\tdelete model.changed.label;\n\t\t\t\tvar d = new Date();\n\t\t\t\tvar n = d.valueOf();\n\t\t\t\tvar key = this.slugify( model.get( 'label' ) + '_' + n );\n\t\t\t\tmodel.set( 'key', key );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * When a field key is updated, find any merge tags using the key and update them.\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  backbone.model model field model\n\t\t * @return void\n\t\t */\n\t\tupdateKey: function( dataModel ) {\n\t\t\tvar key = dataModel.get( 'key' );\n\t\t\tthis.settingModel = nfRadio.channel( 'fields' ).request( 'get:settingModel', 'key' );\n\t\t\tthis.setError( key, dataModel );\n\t\t},\n\n\t\tkeyUp: function( e, settingModel, dataModel ) {\n\t\t\tdataModel.set( 'manual_key', true );\n\t\t\tthis.settingModel = settingModel;\n\t\t\tvar key = jQuery( e.target ).val();\n\t\t\tthis.setError( key, dataModel );\n\t\t},\n\n\t\tsetError: function( key, dataModel ) {\n\t\t\tvar error = false;\n\t\t\tif ( '' == jQuery.trim( key ) ) {\n\t\t\t\terror = 'Field keys can\\'t be empty. Please enter a key.';\n\t\t\t} else if ( key != key.toLowerCase() ) {\n\t\t\t\terror = 'Field keys must be lowercase.';\n\t\t\t} else if ( key != key.replace( ' ', '_' ) ) {\n\t\t\t\terror = 'Field keys must cannot use spaces. Separate with \"_\" instead.';\n\t\t\t} else if ( '_' == key.slice( -1 ) ) {\n\t\t\t\terror = 'Field keys cannot end with a \"_\"';\n\t\t\t} else if ( key != this.slugify( key ) ) {\n\t\t\t\terror = 'Invalid Format.';\n\t\t\t} else if ( key != this.keyExists( key, dataModel ) ) {\n\t\t\t\terror = 'Field keys must be unique. Please enter another key.'\n\t\t\t}\n\n\t\t\tif ( error ) {\n\t\t\t\tthis.settingModel.set( 'error', error );\n\t\t\t} else {\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'update:fieldKey', dataModel );\n\t\t\t\tthis.settingModel.set( 'error', false );\n\t\t\t}\n\t\t},\n\n\t\tkeyExists: function( key, dataModel ) {\n\t\t\tvar newKey = this.slugify( key );\n\t\t\tif ( 0 != newKey.length ) {\n\t\t\t\tkey = newKey;\n\t\t\t}\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\tvar x = 1;\n\t\t\tvar testKey = key;\n\t\t\t_.each( fieldCollection.models, function( field ) {\n\t\t\t\tif ( dataModel != field && testKey == field.get( 'key' ) ) {\n\t\t\t\t\ttestKey = key + '_' + x;\n\t\t\t\t\tx++;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tkey = testKey;\n\n\t\t\treturn key;\n\t\t},\n\n\t\tslugify: function( string ){\n\t\t\treturn jQuery.slugify( string, { separator: '_' } )\n\t\t}\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Creates notices for our fields domain.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/notices',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'add:stagedField', this.addStagedField );\n\t\t},\n\n\t\taddStagedField: function( model ) {\n\t\t\tnfRadio.channel( 'notices' ).request( 'add', 'addStagedField', model.get( 'nicename' ) + ' added to staging' );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles mobile-specific JS for our fields domain.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/mobile',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for the start of our sorting.\n\t\t\t// this.listenTo( nfRadio.channel( 'app' ), 'render:fieldsSortable', this.initWiggle );\n\t\t\t// Listen for when we start sorting.\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'sortable:start', this.startWiggle );\n\t\t\t// Listen for when we stop sorting.\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'sortable:stop', this.stopWiggle );\n\t\t},\n\n\t\tinitWiggle: function( view ) {\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tjQuery( view.el ).find( '.nf-field-wrap' ).on( 'taphold', function() {\n\t\t\t\t\tjQuery( this ).ClassyWiggle( 'start', { degrees: ['.65', '1', '.65', '0', '-.65', '-1', '-.65', '0'], delay: 50 } );\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\n\t\tstartWiggle: function( ui ) {\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tjQuery( ui.item ).removeClass( 'ui-sortable-helper' ).ClassyWiggle( 'stop' );\n\t\t\t\tjQuery( ui.helper ).css( 'opacity', '0.75' ).ClassyWiggle( 'start', { degrees: ['.5', '1', '.5', '0', '-.5', '-1', '-.5', '0'] } );\n\t\t\t}\n\t\t},\n\n\t\tstopWiggle: function( ui ) {\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tjQuery( ui.helper ).ClassyWiggle( 'stop' );\n\t\t\t\tjQuery( ui.item ).removeClass( 'ui-sortable-helper drag-selected' );\n\t\t\t}\n\t\t}\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * If we add a saved field to our form and then update it, set the \"saved\" flag to false.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/savedFields',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tignoreAttributes: [\n\t\t\t'editActive',\n\t\t\t'order',\n\t\t\t'saved',\n\t\t\t'jBox'\n\t\t],\n\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'update:setting', this.updateField );\n\t\t\t// Listen to clicks on our add saved field button.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'click:addSavedField', this.clickAddSavedField, this );\n\t\t},\n\n\t\tupdateField: function( dataModel ) {\n\t\t\tif ( dataModel.get( 'saved' ) ) {\n\t\t\t\t\n\t\t\t\tvar modified = false;\n\t\t\t\tvar changedAttributes = _.keys( dataModel.changedAttributes() );\n\t\t\t\tvar that = this;\n\t\t\t\t_.each( changedAttributes, function( changed ) {\n\t\t\t\t\tif ( -1 == that.ignoreAttributes.indexOf( changed ) ) {\n\t\t\t\t\t\tmodified = true;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\t\n\t\t\t\tif ( modified ) {\n\t\t\t\t\tdataModel.set( 'saved', false );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tclickAddSavedField: function( e, dataModel ) {\n\t\t\tvar modelClone = nfRadio.channel( 'app' ).request( 'clone:modelDeep', dataModel );\n\n\t\t\tvar fieldData = modelClone.attributes;\n\t\t\tfieldData.saved = true;\n\n\t\t\tdelete fieldData.jBox;\n\t\t\tdelete fieldData.editActive;\n\t\t\tdelete fieldData.created_at;\n\t\t\tdelete fieldData.order;\n\t\t\tdelete fieldData.id;\n\t\t\tdelete fieldData.formID;\n\t\t\tdelete fieldData.parent_id;\n\t\t\t\n\t\t\tvar type = nfRadio.channel( 'fields' ).request( 'get:type', fieldData.type );\n\t\t\tvar newType = _.clone( type.attributes );\n\n\t\t\tvar nicename = jQuery( e.target ).parent().parent().find( 'input' ).val();\n\t\t\tconsole.log( nicename );\n\t\t\tnewType.nicename = nicename;\n\t\t\tfieldData.label = nicename;\n\t\t\tfieldData.nicename = nicename;\n\t\t\tdataModel.set( 'addSavedLoading', true );\n\t\t\tvar newTypeDefaults = JSON.stringify( fieldData );\n\n\t\t\tjQuery.post( ajaxurl, { action: 'nf_create_saved_field', field: newTypeDefaults, security: nfAdmin.ajaxNonce }, function( response ) {\n\t\t\t\tresponse = JSON.parse( response );\n\t\t\t\tnewType.id = response.data.id;\n\t\t\t\tnewType.nicename = nicename;\n\t\t\t\tnewType.settingDefaults = fieldData;\n\n\t\t\t\tvar typeCollection = nfRadio.channel( 'fields' ).request( 'get:typeCollection' );\n\t\t\t\tvar newModel = typeCollection.add( newType );\n\n\t\t\t\tvar typeSections = nfRadio.channel( 'fields' ).request( 'get:typeSections' );\n\t\t\t\ttypeSections.get( 'saved' ).get( 'fieldTypes' ).push( newType.id );\n\n\t\t\t\t// dataModel.set( 'type', response.data.id );\n\t\t\t\tdataModel.set( 'addSavedLoading', false );\n\t\t\t\tdataModel.unset( 'addSavedLoading', { silent: true } );\n\t\t\t\tdataModel.get( 'jBox' ).close();\n\t\t\t\t// dataModel.set( 'saved', true );\n\n\t\t\t\tnfRadio.channel( 'notices' ).request( 'add', 'addSaved', 'Saved Field Added' );\n\t\t\t} );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * If we're rendering a datepicker setting, add our datepicker.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldDatepicker',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-type-datepicker' ), 'render:setting', this.addDatepicker );\n\t\t},\n\n\t\taddDatepicker: function( settingModel, dataModel, view ) {\n\t\t\tvar dateObject = pikadayResponsive( jQuery( view.el ).find( '.setting' )[0] );\t\t\t\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * If we're rendering a product_assignment setting, add our products to the data model.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldDisplayCalc',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for messages that are fired before a setting view is rendered.\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-calc_var' ), 'before:renderSetting', this.beforeRenderSetting );\n\t\t},\n\n\t\tbeforeRenderSetting: function( settingModel, dataModel, view ) {\n\t\t\t// console.log( 'render!' );\n\t\t},\n\n\t\tgetProductFields: function( settingModel ) {\n\t\t\tvar productFields = [ settingModel.get( 'select_product' ) ];\n\t\t\t// Update our dataModel with all of our product fields.\n\t\t\tvar fields = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t_.each( fields.models, function( field ) {\n\t\t\t\tif ( 'product' == field.get( 'type' ) ) {\n\t\t\t\t\tproductFields.push( { label: field.get( 'label' ), value: field.get( 'id' ) } );\n\t\t\t\t}\n\t\t\t} );\n\t\t\treturn productFields;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Creates and stores a collection of action types. This includes all of the settings shown when editing a field.\n *\n * Loops over our preloaded data and adds that to our action type collection\n *\n * Also responds to requests for data about action types\n *\n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/types',[ 'models/app/typeCollection' ], function( TypeCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\n\t\t\t/*\n\t\t\t * Instantiate \"installed\" actions collection.\n\t\t\t */\n\t\t\tthis.installedActions = new TypeCollection(\n\t\t\t\t_.filter( actionTypeData, function( type ) {\n\t\t\t\t\treturn type.section == 'installed';\n\t\t\t\t\t} \n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\tslug: 'installed',\n\t\t\t\t\tnicename: nfi18n.installed\n\t\t\t\t} \n\t\t\t);\n\n\t\t\tthis.availableActions = new TypeCollection(\n\t\t\t\t_.filter( actionTypeData, function( type ) {\n\t\t\t\t\treturn type.section == 'available';\n\t\t\t\t\t} \n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\tslug: 'available',\n\t\t\t\t\tnicename: nfi18n.available\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t// Respond to requests to get field type, collection, settings, and sections\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:type', this.getType, this );\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:installedActions', this.getInstalledActions, this );\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:availableActions', this.getAvailableActions, this );\n\t\t},\n\n\t\t/**\n\t\t * Return a field type by id\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  string \t\t\tid \tfield type\n\t\t * @return backbone.model    \tfield type model\n\t\t */\n\t\tgetType: function( id ) {\n\t\t\t// Search our installed actions first\n\t\t\tvar type = this.installedActions.get( id );\n\t\t\tif ( ! type ) {\n\t\t\t\ttype = this.availableActions.get( id );\n\t\t\t}\n        \treturn type;\n        },\n\n        /**\n         * Return the installed action type collection\n         *\n         * @since  3.0\n         * @return backbone.collection    \tfield type collection\n         */\n\t\tgetInstalledActions: function() {\n        \treturn this.installedActions;\n        },\n\n        /**\n         * Return the available action type collection\n         *\n         * @since  3.0\n         * @return backbone.collection    \tfield type collection\n         */\n\t\tgetAvailableActions: function() {\n        \treturn this.availableActions;\n        },\n\n        /**\n         * Add a field type to our staging area when the field type button is clicked.\n         *\n         * @since 3.0\n         * @param Object e event\n         * @return void\n         */\n        addStagedField: function( e ) {\n        \tvar type = jQuery( e.target ).data( 'id' );\n        \tnfRadio.channel( 'fields' ).request( 'add:stagedField', type );\n        },\n\n        /**\n         * Return our field type settings sections\n         *\n         * @since  3.0\n         * @return backbone.collection field type settings sections\n         */\n        getTypeSections: function() {\n            return this.fieldTypeSections;\n        }\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Model that represents our form action.\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/actions/actionModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tobjectType: 'Action',\n\t\t\tobjectDomain: 'actions',\n\t\t\teditActive: false\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\t// Listen for model attribute changes\n\t\t\tthis.on( 'change', this.changeSetting, this );\n\n\t\t\t// Get our parent field type.\n\t\t\tvar actionType = nfRadio.channel( 'actions' ).request( 'get:type', this.get( 'type' ) );\n\n\t\t\tif( 'undefined' == typeof actionType ) return;\n\n\t\t\t// Loop through our action type \"settingDefaults\" and add any default settings.\n\t\t\tvar that = this;\n\t\t\t_.each( actionType.get( 'settingDefaults' ), function( val, key ) {\n\t\t\t\tif ( ! that.get( key ) ) {\n\t\t\t\t\tthat.set( key, val, { silent: true } );\n\t\t\t\t}\n\t\t\t} );\n\t\t\t\n\t\t\t/*\n\t\t\t * Trigger an init event on three channels:\n\t\t\t * \n\t\t\t * actions\n\t\t\t * action-type\n\t\t\t *\n\t\t\t * This lets specific field types modify model attributes before anything uses them.\n\t\t\t */ \n\t\t\tnfRadio.channel( 'actions' ).trigger( 'init:actionModel', this );\n\t\t\tnfRadio.channel( 'actions-' + this.get( 'type' ) ).trigger( 'init:actionModel', this );\n\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'fire:updateFieldKey', this.updateFieldKey );\n\t\t},\n\n\t\t/**\n\t\t * When we change the model attributes, fire an event saying we've changed something.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tchangeSetting: function( model, options ) {\n            nfRadio.channel( 'actionSetting-' + _.keys( this.changedAttributes() )[0] ).trigger( 'update:setting', this, options.settingModel ) ;\n\t\t\tnfRadio.channel( 'actions').trigger( 'update:setting', this, options.settingModel );\n            nfRadio.channel( 'app' ).trigger( 'update:setting', this, options.settingModel );\n\t\t},\n\n\t\tupdateFieldKey: function( keyModel, settingModel ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'replace:fieldKey', this, keyModel, settingModel );\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collection that holds our action models. \n * This is the actual action data created by the user.\n *\n * We listen to the add and remove events so that we can push the new id to either the new action or removed action property.\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/actions/actionCollection',['models/actions/actionModel'], function( actionModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: actionModel,\n\t\tcomparator: 'order',\n\t\ttmpNum: 1,\n\n\t\tinitialize: function() {\n\t\t\tthis.on( 'add', this.addAction, this );\n\t\t\tthis.on( 'remove', this.removeAction, this );\n\t\t\tthis.newIDs = [];\n\t\t},\n\n\t\t/**\n\t\t * When we add a field, push the id onto our new action property.\n\t\t * This lets us tell the server that this is a new field to be added rather than a field to be updated.\n\t\t * \n\t\t * @since 3.0\n\t\t * @param void\n\t\t */\n\t\taddAction: function( model ) {\n\t\t\tthis.newIDs.push( model.get( 'id' ) );\n\t\t},\n\n\t\t/**\n\t\t * When we remove a field, push the id onto our removed action property.\n\t\t * \n\t\t * @since 3.0\n\t\t * @param void\n\t\t */\n\t\tremoveAction: function( model ) {\n\t\t\tthis.removedIDs[ model.get( 'id' ) ] = model.get( 'id' );\n\t\t}\n\t} );\n\treturn collection;\n} );\n","/**\n * Handles interactions with our actions collection.\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/data',['models/actions/actionCollection', 'models/actions/actionModel'], function( actionCollection, actionModel ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Load our action collection from our localized form data\n\t\t\tthis.collection = new actionCollection( preloadedFormData.actions );\n\t\t\tthis.collection.tmpNum = 1;\n\n\t\t\tif ( 0 != this.collection.models.length ) {\n\t\t\t\tvar that = this;\n\t\t\t\t_.each( this.collection.models, function( action ) {\n\t\t\t\t\tif ( ! jQuery.isNumeric( action.get( 'id' ) ) ) {\n\t\t\t\t\t\tthat.collection.tmpNum++;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t\t// Set our removedIDs to an empty object. This will be populated when a action is removed so that we can add it to our 'deleted_actions' object.\n\t\t\tthis.collection.removedIDs = {};\n\n\t\t\t// Respond to requests for data about actions and to update/change/delete actions from our collection.\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:collection', this.getCollection, this );\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:action', this.getAction, this );\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:tmpID', this.getTmpID, this );\n\n\t\t\tnfRadio.channel( 'actions' ).reply( 'add', this.addAction, this );\n\t\t\tnfRadio.channel( 'actions' ).reply( 'delete', this.deleteAction, this );\n\t\t},\n\n\t\tgetCollection: function() {\n\t\t\treturn this.collection;\n\t\t},\n\n\t\tgetAction: function( id ) {\n\t\t\treturn this.collection.get( id );\n\t\t},\n\n\t\t/**\n\t\t * Add a action to our collection. If silent is passed as true, no events will trigger.\n\t\t * \n\t\t * @since 3.0\n\t\t * @param Object \tdata \taction data to insert\n\t\t * @param bool \t\tsilent \tprevent events from firing as a result of adding\t \t\n\t\t */\n\t\taddAction: function( data, silent ) {\n\t\t\tsilent = silent || false;\n\n\t\t\tif ( false === data instanceof Backbone.Model ) {\n\t\t\t\tvar model = new actionModel( data );\n\t\t\t} else {\n\t\t\t\tvar model = data;\n\t\t\t}\n\n\t\t\tthis.collection.add( model, { silent: silent } );\n\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\n\t\t\treturn model;\n\t\t},\n\n\t\t/**\n\t\t * Delete a action from our collection.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tmodel \taction model to be deleted\n\t\t * @return void\n\t\t */\n\t\tdeleteAction: function( model ) {\n\t\t\tthis.collection.remove( model );\n\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\n\n\t\t},\n\n\n\t\t/**\n\t\t * Return a new tmp id for our actions.\n\t\t * Gets the action collection length, adds 1, then returns that prepended with 'tmp-'.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return string\n\t\t */\n\t\tgetTmpID: function() {\n\t\t\tvar tmpNum = this.collection.tmpNum;\n\t\t\tthis.collection.tmpNum++;\n\t\t\treturn 'tmp-' + tmpNum;\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Fetches settings models so that we can get setting information\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/actionSettings',['models/app/settingCollection'], function( settingCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.collection = new settingCollection( actionSettings, { objectType: 'actions' } );\n\n\t\t\t// Responds to requests for settings models.\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:settingModel', this.getSettingModel, this );\n\t\t},\n\n\t\tgetSettingModel: function( name ) {\n\t\t\treturn this.collection.findWhere( { name: name } );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles adding and removing the active class from a action currently being edited.\n * \n * @package Ninja Forms builder\n * @subpackage Actions - Edit Action Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/editActive',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Respond to requests to remove the active class from all our actions.\n\t\t\tnfRadio.channel( 'actions' ).reply( 'clear:editActive', this.clearEditActive, this );\n\t\t\t// Listen for the closing drawer so that we can remove all of our active classes.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-editSettings' ), 'before:closeDrawer', this.clearEditActive );\n\t\t},\n\n\t\t/**\n\t\t * Loops through our actions collection and sets editActive to false.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n        clearEditActive: function() {\n            var actionCollection = nfRadio.channel( 'actions' ).request( 'get:collection' );\n            _.each( actionCollection.models, function( action ) {\n\t\t\t\taction.set( 'editActive', false );\n            } );\n        }\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * @package Ninja Forms builder\n * @subpackage Actions - Action Settings Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/emailFromSetting',[], function( ) {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'actionSetting-from_address' ), 'update:setting', this.updateFromAddress );\n        },\n\n        updateFromAddress: function( dataModel, settingModel ) {\n            if( 'undefined' == typeof settingModel ) return;\n\n            var value = dataModel.get( 'from_address' ).trim();\n\n            if( '{wp:admin_email}' == value ) {\n                return settingModel.set( 'warning', false );\n            }\n\n            if( value && ( ! this.isValidEmail( value ) ) || nfAdmin.home_url_host != value.replace(/.*@/, \"\") ){\n                return settingModel.set( 'warning', nfi18n.errorInvalidEmailFromAddress );\n            }\n\n            return settingModel.set( 'warning', false );\n        },\n\n        isValidEmail: function(email) {\n            return /^.+@.+\\..+$/.test(email);\n        }\n    });\n    return controller;\n} );\n","/**\n * Handles clicks and dragging for our action types.\n * \n * @package Ninja Forms builder\n * @subpackage Fields - New Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/addActionTypes',['models/actions/actionCollection', 'models/actions/actionModel'], function( actionCollection, actionModel ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'actions' ), 'click:addAction', this.addAction );\n\n\t\t\tnfRadio.channel( 'actions' ).reply( 'add:actionType', this.addAction, this );\n\t\t},\n\n\t\t/**\n\t\t * Add an action to our collection. If silent is passed as true, no events will trigger.\n\t\t * \n\t\t * @since 3.0\n\t\t * @param Object \tdata \taction data to insert\n\t\t * @param bool \t\tsilent \tprevent events from firing as a result of adding\t \t\n\t\t */\n\t\taddAction: function( type ) {\n\n\t\t\tvar data = {\n\t\t\t\tid: nfRadio.channel( 'actions' ).request( 'get:tmpID' ),\n\t\t\t\ttype: type.get( 'id' ),\n\t\t\t\tlabel: type.get( 'settingDefaults').label || type.get( 'nicename' )\n\t\t\t}\n\n\t\t\tvar newModel = nfRadio.channel( 'actions' ).request( 'add', data );\n\n\t\t\tvar label = {\n\t\t\t\tobject: 'Action',\n\t\t\t\tlabel: newModel.get( 'label' ),\n\t\t\t\tchange: 'Added',\n\t\t\t\tdashicon: 'plus-alt'\n\t\t\t};\n\n\t\t\tvar data = {\n\t\t\t\tcollection: nfRadio.channel( 'actions' ).request( 'get:collection' )\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addObject', newModel, null, label, data );\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', {}, newModel );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles the logic for our action type draggables.\n * \n * @package Ninja Forms builder\n * @subpackage Actions - New Action Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/typeDrag',[], function( ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen to our action type draggables and run the appropriate function.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addAction' ), 'startDrag:type', this.startDrag );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addAction' ), 'stopDrag:type', this.stopDrag );\n\t\t\t/*\n\t\t\t * Respond to requests for our helper clone.\n\t\t\t * This is used by other parts of the application to modify what the user is dragging in real-time.\n\t\t\t */ \n\t\t\tnfRadio.channel( 'drawer-addAction' ).reply( 'get:typeHelperClone', this.getCurrentDraggableHelperClone, this );\n\t\t},\n\n\t\t/**\n\t\t * When we start dragging:\n\t\t * get our drawer element\n\t\t * set its overflow property to visible !important -> forces the type drag element to be on at the top of the z-index.\n\t\t * get our main element\n\t\t * est its overflow propery to visible !important -> forces the type drag element to be on top of the z-index.\n\t\t * set our dragging helper clone\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  object context \tThis function is going to be called from a draggable. Context is the \"this\" reference to the draggable.\n\t\t * @param  object ui      \tObject sent by jQuery UI draggable.\n\t\t * @return void\n\t\t */\n\t\tstartDrag: function( context, ui ) {\n\t\t\tthis.drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\n\t\t\tthis.mainEl = nfRadio.channel( 'app' ).request( 'get:mainEl' );\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'visible', 'important' );\n\t\t\t// jQuery( this.mainEl )[0].style.setProperty( 'overflow', 'visible', 'important' );\n\n\t\t\tthis.draggableHelperClone = jQuery( ui.helper ).clone();\n\n\t\t},\n\n\t\t/**\n\t\t * When we stop dragging, reset our overflow property to hidden !important.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  object context \tThis function is going to be called from a draggable. Context is the \"this\" reference to the draggable.\n\t\t * @param  object ui      \tObject sent by jQuery UI draggable.\n\t\t * @return {[type]}         [description]\n\t\t */\n\t\tstopDrag: function( context, ui ) {\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'hidden', 'important' );\n\t\t\t// jQuery( this.mainEl )[0].style.setProperty( 'overflow', 'hidden', 'important' );\n\t\t},\n\n\t\tgetCurrentDraggableHelperClone: function() {\n\t\t\treturn this.draggableHelperClone;\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles the logic for our action type droppable.\n * \n * @package Ninja Forms builder\n * @subpackage Actions - New Action Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/droppable',[], function( ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * Respond to requests for our helper clone.\n\t\t\t * This is used by other parts of the application to modify what the user is dragging in real-time.\n\t\t\t */ \n\t\t\tnfRadio.channel( 'app' ).reply( 'drop:actionType', this.dropActionType, this );\n\t\t},\n\n\t\tdropActionType: function( e, ui ) {\n\t\t\tvar type_slug = jQuery( ui.helper ).data( 'type' );\n\t\t\tvar type = nfRadio.channel( 'actions' ).request( 'get:type', type_slug );\n\t\t\tnfRadio.channel( 'actions' ).request( 'add:actionType', type );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Model for our action type\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/actions/typeModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collection that holds our action type models. \n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/actions/typeCollection',['models/actions/typeModel'], function( actionTypeModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: actionTypeModel\n\t} );\n\treturn collection;\n} );\n","/**\n * Filters our action type collection.\n * \n * @package Ninja Forms builder\n * @subpackage Actions - New Action Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/filterTypes',['models/actions/typeCollection'], function( typeCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen to our change filter event.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addAction' ), 'change:filter', this.filterActionTypes );\n\t\t},\n\n\t\t/**\n\t\t * Filter our action types in the add new action drawer\n\t\t * \n\t\t * Takes a search string and finds any action types that match either the name or alias.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  string\t search \tstring being searched for\n\t\t * @param  object \t e      \tKeyup event\n\t\t * @return void\n\t\t */\n\t\tfilterActionTypes: function( search, e ) {\n\n\t\t\t// Make sure that we aren't dealing with an empty string.\n\t\t\tif ( '' != jQuery.trim( search ) ) {\n\n        \t\tvar filteredInstalled = [];\n        \t\t/**\n        \t\t * Call the function that actually filters our collection,\n        \t\t * and then loop through our collection, adding each model to our filteredInstalled array.\n        \t\t */\n\t\t\t\tvar installedActions = nfRadio.channel( 'actions' ).request( 'get:installedActions' );\n        \t\t_.each( this.filterCollection( search, installedActions ), function( model ) {\n        \t\t\tfilteredInstalled.push( model );\n        \t\t} );\n\n        \t\tvar filteredAvailable = [];\n        \t\tvar availableActions = nfRadio.channel( 'actions' ).request( 'get:availableActions' );\n        \t\t_.each( this.filterCollection( search, availableActions ), function( model ) {\n        \t\t\tfilteredAvailable.push( model );\n        \t\t} );\n\n        \t\t// Create a new Action Type Section collection with the filtered array.\n        \t\tvar newInstalled = new typeCollection( filteredInstalled );\n        \t\tnewInstalled.slug = 'installed';\n        \t\tnewInstalled.nicename = 'Installed';\n\n        \t\tvar newAvailable = new typeCollection( filteredAvailable );\n        \t\tnewAvailable.slug = 'available';\n        \t\tnewAvailable.nicename = 'Available';\n\n        \t\t// Request that our action types filter be applied, passing the collection we created above.\n        \t\tnfRadio.channel( 'drawer' ).trigger( 'filter:actionTypes', newInstalled, newAvailable );\n        \t\t// If we've pressed the 'enter' key, add the action to staging and clear the filter.\n        \t\tif ( e.addObject ) {\n        \t\t\tif ( 0 < newInstalled.length ) {\n        \t\t\t\tnfRadio.channel( 'actions' ).request( 'add:actionType', newInstalled.models[0] );\n        \t\t\t\tnfRadio.channel( 'drawer' ).request( 'clear:filter' );\n        \t\t\t}\n        \t\t}\n        \t} else {\n        \t\t// Clear our filter if the search text is empty.\n        \t\tnfRadio.channel( 'drawer' ).trigger( 'clear:filter' );\n        \t}\n        },\n\n        /**\n         * Search our action type collection for the search string.\n         * \n         * @since  3.0\n         * @param  string\t search \tstring being searched for\n         * @return backbone.collection\n         */\n        filterCollection: function( search, collection ) {\n        \tsearch = search.toLowerCase();\n        \t/*\n        \t * Backbone collections have a 'filter' method that loops through every model,\n        \t * waiting for you to return true or false. If you return true, the model is kept.\n        \t * If you return false, it's removed from the filtered result.\n        \t */\n\t\t\tvar filtered = collection.filter( function( model ) {\n\t\t\t\tvar found = false;\n\t\t\t\t\n\t\t\t\t// If we match either the ID or nicename, return true.\n\t\t\t\tif ( model.get( 'id' ).toLowerCase().indexOf( search ) != -1 ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t} else if ( model.get( 'nicename' ).toLowerCase().indexOf( search ) != -1 ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\t * TODO: Hashtag searching. Doesn't really do anything atm.\n\t\t\t\t */\n\t\t\t\tif ( model.get( 'tags' ) && 0 == search.indexOf( '#' ) ) {\n\t\t\t\t\t_.each( model.get( 'tags' ), function( tag ) {\n\t\t\t\t\t\tif ( search.replace( '#', '' ).length > 1 ) {\n\t\t\t\t\t\t\tif ( tag.toLowerCase().indexOf( search.replace( '#', '' ) ) != -1 ) {\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\t// If we match any of the aliases, return true.\n\t\t\t\tif ( model.get( 'alias' ) ) {\n\t\t\t\t\t_.each( model.get( 'alias' ), function( alias ) {\n\t\t\t\t\t\tif ( alias.toLowerCase().indexOf( search ) != -1 ) {\n\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\treturn found;\n\t\t\t} );\n\n\t\t\t// Return our filtered collection.\n\t\t\treturn filtered;\n        }\n\t});\n\n\treturn controller;\n} );\n","/**\n * @package Ninja Forms builder\n * @subpackage Actions - New Action Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/newsletterList',[], function( ) {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'setting-newsletter_list' ),             'show:setting',      this.defaultFields );\n            this.listenTo( nfRadio.channel( 'setting-type-newsletter_list' ),        'click:extra',       this.clickListUpdate );\n            this.listenTo( nfRadio.channel( 'actionSetting-newsletter_list' ),       'update:setting',    this.maybeRenderFields );\n            this.listenTo( nfRadio.channel( 'actionSetting-newsletter_list' ),       'update:setting',    this.maybeRenderGroups );\n            this.listenTo( nfRadio.channel( 'setting-name-newsletter_list_fields' ), 'init:settingModel', this.registerFieldsListener );\n            this.listenTo( nfRadio.channel( 'setting-name-newsletter_list_groups' ), 'init:settingModel', this.registerGroupsListener );\n        },\n\n        defaultFields: function( settingModel, dataModel ) {\n            this.maybeRenderFields( dataModel, settingModel );\n            this.maybeRenderGroups( dataModel, settingModel );\n        },\n\n        registerFieldsListener: function ( model ) {\n            model.listenTo( nfRadio.channel( 'newsletter_list_fields' ), 'update:fieldMapping', this.updateFieldMapping, model );\n        },\n\n        registerGroupsListener: function ( model ) {\n            model.listenTo( nfRadio.channel( 'newsletter_list_groups' ), 'update:interestGroups', this.updateInterestGroups, model );\n        },\n\n        clickListUpdate: function( e, settingModel, dataModel, settingView ) {\n\n            var data = {\n                action: 'nf_' + dataModel.attributes.type + '_get_lists',\n                security: nfAdmin.ajaxNonce\n            };\n\n            var that = this;\n            jQuery( e.srcElement ).addClass( 'spin' );\n            jQuery.post( ajaxurl, data, function( response ){\n                var response = JSON.parse( response );\n                that.updateLists( settingModel, response.lists, settingView, dataModel );\n                dataModel.set( 'newsletter_list', response.lists[0].value, { settingModel: settingModel } );\n            }).always( function() {\n                jQuery( e.srcElement ).removeClass( 'spin' );\n            });\n        },\n\n        updateLists: function( settingModel, lists, settingView, dataModel ) {\n            settingModel.set( 'options', lists );\n            settingView.render();\n        },\n\n        maybeRenderFields: function( dataModel, settingModel ) {\n\n            if( 'undefined' == typeof settingModel ) return;\n\n            var selectedList = dataModel.get( 'newsletter_list' );\n            var lists = settingModel.get( 'options' );\n            _.each( lists, function( list ) {\n                if ( selectedList == list.value ) {\n                    nfRadio.channel( 'newsletter_list_fields').trigger( 'update:fieldMapping', list.fields );\n                }\n            } );\n\n            dataModel.set( 'newsletter_list_fields', 0 );\n        },\n\n        maybeRenderGroups: function( dataModel, settingModel ) {\n            if( 'undefined' == typeof settingModel ) return;\n\n            var selectedList = dataModel.get( 'newsletter_list' );\n            var lists = settingModel.get( 'options' );\n            _.each( lists, function( list ) {\n                if ( selectedList == list.value ) {\n                    nfRadio.channel( 'newsletter_list_groups').trigger( 'update:interestGroups', list.groups );\n                }\n            } );\n\n            dataModel.set( 'newsletter_list_fields', 0 );\n        },\n\n        updateFieldMapping: function( fields ) {\n           var settings = this.get( 'settings' );\n            settings.reset();\n            _.each( fields, function( field ){\n\n                settings.add({\n                    name: field.value,\n                    type: 'textbox',\n                    label: field.label,\n                    width: 'full',\n                    use_merge_tags: { exclude: [ 'user', 'post', 'system', 'querystrings' ] }\n                });\n            });\n            this.set( 'settings', settings );\n        },\n\n        updateInterestGroups: function( groups ) {\n            var settings = this.get( 'settings' );\n            settings.reset();\n            _.each( groups, function( group ){\n\n                settings.add({\n                    name: group.value,\n                    type: 'toggle',\n                    label: group.label,\n                    width: 'full',\n                });\n            });\n            this.set( 'settings', settings );\n        },\n\n    });\n\n    return controller;\n} );\n\n","/**\n * Listens to field deletion, removing any merge tags that reference the field.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2017 WP Ninjas\n * @since 3.1.7\n */\ndefine( 'controllers/actions/deleteFieldListener',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * When we init an action model, register a listener for field deletion.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'actions' ), 'init:actionModel', this.registerListener );\n\t\t},\n\n\t\tregisterListener: function( actionModel ) {\n\t\t\tactionModel.listenTo( nfRadio.channel( 'fields' ), 'delete:field', this.maybeUpdateSettings );\n\t\t},\n\n\t\tmaybeUpdateSettings: function( fieldModel ) {\n\t\t\tvar newObject, filteredCollection,\n\t\t\t\tfieldMergeTag = '{field:' + fieldModel.get( 'key' ) + '}';\n\t\t\t\n\t\t\t/*\n\t\t\t * Loop through our action attributes to see if the field mergetag exists in our action.\n\t\t\t *\n\t\t\t * If it does:\n\t\t\t * \t- Replace the field mergetag in strings with ''.\n\t\t\t * \t- Remove any items with the field merge tag if they are in an array.\n\t\t\t */\n\t\t\t_.each( this.attributes, function( attr, key ) {\n\t\t\t\tif ( _.isString( attr ) ) {\n\t\t\t\t\t// If our attribute is a string, replace any instances of the field merge tag with an empty string.\n\t\t\t\t\tthis.set( key, attr.replace( fieldMergeTag, '' ) );\n\t\t\t\t} else if ( _.isArray( attr ) ) {\n\t\t\t\t\t// If our attribute is an array, search the contents for field merge tag and remove items that match.\n\t\t\t\t\t_.each( attr, function( val, index ) {\n\t\t\t\t\t\tif ( _.isString( val ) ) {\n\t\t\t\t\t\t\t// If val is a string, search it for the field mergetag.\n\t\t\t\t\t\t\tconsole.log( 'string replace' );\n\t\t\t\t\t\t} else if ( _.isArray( val ) ) {\n\t\t\t\t\t\t\t// If val is an array, search it for the field mergetag.\n\t\t\t\t\t\t\tconsole.log( 'array search' );\n\t\t\t\t\t\t} else if ( _.isObject( val ) ) {\n\t\t\t\t\t\t\t// If val is a object, search it for the field mergetag.\n\t\t\t\t\t\t\tnewObject = _.mapObject( val, function( value, key ) {\n\t\t\t\t\t\t\t\tif ( _.isString( value ) ) {\n\t\t\t\t\t\t\t\t\tif ( -1 != value.indexOf( fieldMergeTag ) ) {\n\t\t\t\t\t\t\t\t\t\tattr.splice( index, 1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\tthis.set( key, attr );\n\t\t\t\t\t\t}\n\t\t\t\t\t}, this );\n\t\t\t\t} else if ( attr instanceof Backbone.Collection ) {\n\t\t\t\t\t// This is a Backbone Collection, so we need to loop through the models and remove any that have an attribute containing the field merge tag.\n\t\t\t\t\tvar filteredCollection = attr.filter( function ( model ) {\n\t\t\t\t\t\t// Make sure that EVERY model attribute does NOT reference the field merge tag.\n\t\t\t\t\t    return _.every( model.attributes, function( val ) {\n\t\t\t\t\t    \t/*\n\t\t\t\t\t    \t * Currently only handles items that are one-level deep.\n\t\t\t\t\t    \t * TODO: Add support for further nesting of values.\n\t\t\t\t\t    \t */\n\t\t\t\t\t    \tif ( _.isString( val ) ) {\n\t\t\t\t\t    \t\tif ( -1 != val.indexOf( fieldMergeTag ) ) {\n\t\t\t\t\t    \t\t\treturn false;\n\t\t\t\t\t    \t\t}\n\t\t\t\t\t    \t}\n\t\t\t\t\t    \treturn true;\n\t\t\t\t\t    });;\n\t\t\t\t\t});\n\t\t\t\t\t// Update our key with the filtered collection value.\n\t\t\t\t\tthis.set( key, filteredCollection );\n\t\t\t\t}\n\t\t\t}, this );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * If we're rendering a collect payment setting, add our number fields and total fields to the data model.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2017 WP Ninjas\n * @since 3.1.7\n */\ndefine( 'controllers/actions/collectPaymentFields',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for messages that are fired before a setting view is rendered.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'before:renderSetting', this.beforeRenderSetting );\n\t\t},\n\n\t\tbeforeRenderSetting: function( settingModel, dataModel, view ) {\n\t\t\tif ( 'field' != settingModel.get( 'total_type' ) ) return false;\n\n\t\t\tvar fields = this.getFields( settingModel );\n\n\t\t\t/*\n\t\t\t * If the field in the payment total isn't in our field list, add it.\n\t\t\t *\n\t\t\t * Remove the merge tag stuff to get the field key.\n\t\t\t */\n\t\t\t\n\t\t\tvar field_key = dataModel.get( 'payment_total' );\n\t\t\tfield_key = field_key.replace( '{field:', '' );\n\t\t\tfield_key = field_key.replace( '}', '' );\n\t\t\tvar fieldModel = nfRadio.channel( 'fields' ).request( 'get:field', field_key );\n\n\t\t\tif ( 'undefined' != typeof fieldModel ) {\n\t\t\t\tif ( 'undefined' == typeof _.findWhere( fields, { value: dataModel.get( 'payment_total' ) } ) ) {\n\t\t\t\t\tfields.push( { label: fieldModel.get( 'label' ), value: '{field:' + fieldModel.get( 'key' ) + '}' } );\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t/*\n\t\t\t * Update our fields options.\n\t\t\t */\n\t\t\tsettingModel.set( 'options', fields );\n\t\t\t\n\t\t},\n\n\t\tgetFields: function( settingModel ) {\n\t\t\tvar returnFields = [ settingModel.get( 'default_options' ) ];\n\t\t\t// Update our dataModel with all of our product fields.\n\t\t\tvar fields = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t_.each( fields.models, function( field ) {\n\t\t\t\tif ( 'number' == field.get( 'type' ) || 'total' == field.get( 'type' ) || 'checkbox' == field.get( 'type' ) ) {\n\t\t\t\t\treturnFields.push( { label: field.get( 'label' ), value: '{field:' + field.get( 'key' ) + '}' } );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\treturnFields = _.sortBy( returnFields, function( field ) { return field.label } );\n\n\t\t\treturn returnFields;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * If we're rendering a collect payment setting, add our calculations to the data model.\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2017 WP Ninjas\n * @since 3.1.7\n */\ndefine( 'controllers/actions/collectPaymentCalculations',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            // Listen for messages that are fired before a setting view is rendered.\n            this.listenTo( nfRadio.channel( 'app' ), 'before:renderSetting', this.beforeRenderSetting );\n        },\n\n        beforeRenderSetting: function( settingModel, dataModel, view ) {\n            if ( 'calc' == settingModel.get( 'total_type' ) ) {\n                var calcModels = nfRadio.channel( 'app' ).request( 'get:formModel' );\n                var calcs = this.getCalcs( calcModels, settingModel );\n\n                settingModel.set( 'options', calcs );\n            }\n        },\n\n        getCalcs: function( calcModels, settingModel ) {\n            var returnCalcs = [ settingModel.get( 'default_options' ) ];\n\n            // Update our dataModel with all of our product fields.\n            var calcs = calcModels.get( 'settings' ).get( 'calculations' );\n\n            _.each( calcs.models, function( calc ) {\n                returnCalcs.push( { label: calc.get( 'name' ), value: '{calc:' + calc.get( 'name' ) + '}' } );\n            } );\n\n            returnCalcs = _.sortBy( returnCalcs, function( calc ) { return calc.label } );\n\n            return returnCalcs;\n        }\n\n    });\n\n    return controller;\n} );\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * If we haven't set a total_type, then set the total_type to fixed.\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2017 WP Ninjas\n * @since 3.1.7\n */\ndefine( 'controllers/actions/collectPaymentFixed',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            // Listen for messages that are fired before a setting view is rendered.\n            this.listenTo( nfRadio.channel( 'app' ), 'before:renderSetting', this.beforeRenderSetting );\n        },\n\n        beforeRenderSetting: function( settingModel, dataModel, view ) {\n\n            if ( 'payment_total_type' != settingModel.get( 'name' ) || _.isEmpty( dataModel.get( 'payment_total' ) ) ) return false;\n\n            /*\n             * If we don't have a payment total type and we have a payment total, set our total type to the appropriate total type.\n             */\n            if ( ( 'undefined' == dataModel.get( 'payment_total_type' ) || _.isEmpty( dataModel.get( 'payment_total_type' ) ) ) ) {\n                /*\n                 * If payment_total is a field merge tag, set payment_total_type to \"field\"\n                 */\n\n                if ( -1 != dataModel.get( 'payment_total' ).indexOf( '{field' ) ) {\n                    dataModel.set( 'payment_total_type', 'field' );\n                } else if ( -1 != dataModel.get( 'payment_total' ).indexOf( '{calc' ) ) {\n                    dataModel.set( 'payment_total_type', 'calc' );\n                } else {\n                    dataModel.set( 'payment_total_type', 'fixed' );\n                }   \n            }\n        },\n\n    });\n\n    return controller;\n} );\n","/**\n * When we init a collect payment action, listen for calc changes\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2017 WP Ninjas\n * @since 3.1.7\n */\ndefine( 'controllers/actions/collectPayment',[], function( settingCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * When we init a collect payment action model, register a listener for calc changes.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'actions-collectpayment' ), 'init:actionModel', this.initCollectPayment );\n\t\t\t\n\t\t\t/*\n\t\t\t * Before we render our total field, we may want to update its value.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'before:renderSetting', this.maybeClearTotal );\n\t\t},\n\n\t\t/**\n\t\t * When a collect payment action is init'd, register a listener for calc changes and update our data appropriately.\n\t\t * @since  3.1.7\n\t\t * @param  {backbone.model} actionModel \n\t\t * @return {void}\n\t\t */\n\t\tinitCollectPayment: function( actionModel )  {\n\t\t\tactionModel.listenTo( nfRadio.channel( 'calcs' ), 'update:calcName', this.maybeUpdateTotal );\n        },\n\n\t\t//TODO: Add in an error that will not allow drawer to close until total type and total value is selected.\n\t\tmaybeError: function(){},\n\n\t\tmaybeUpdateTotal: function( optionModel, oldName ) {\n\t\t\t/*\n\t\t\t * We have changed a calculation. Make sure that 'calc' is our payment total type.\n\t\t\t */\n\t\t\tif ( 'calculation' != this.get( 'payment_total_type' ) ) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\t\n\t\t\t/*\n\t\t\t * Check our payment_total setting for the old merge tag and replace it with the new one.\n\t\t\t */\n\t\t\tvar newVal = this.get( 'payment_total' ).replace( '{calc:' + oldName + '}', '{calc:' + optionModel.get( 'name' ) + '}' );\n\t\t\tthis.set( 'payment_total', newVal );\n\t\t},\n\n\t\tmaybeClearTotal: function( settingModel, dataModel, view ) {\n            /*\n             * If our payment_total is a merge tag, clear it when we select the \"fixed\" option.\n             */\n            if ( 'fixed' == dataModel.get( 'payment_total_type' ) ) {\n                if ( -1 != dataModel.get( 'payment_total' ).indexOf( '{field' ) || -1 != dataModel.get( 'payment_total' ).indexOf( '{calc' ) ) {\n                    dataModel.set( 'payment_total', '' );\n                }\n            }\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Creates and stores a collection of form setting types. This includes all of the settings shown when editing a field.\n *\n * Loops over our preloaded data and adds that to our form setting type collection\n *\n * Also responds to requests for data about form setting types\n *\n * @package Ninja Forms builder\n * @subpackage Advanced\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/advanced/types',[\n\t\t'models/app/typeCollection'\n\t],\n\tfunction(\n\t\tTypeCollection\n\t) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Create our field type collection\n\t\t\tthis.collection = new TypeCollection( formSettingTypeData );\n\n\t\t\t// Respond to requests to get field type, collection, settings, and sections\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:type', this.getType, this );\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:typeCollection', this.getCollection, this );\n\t\t},\n\n\t\t/**\n\t\t * Return a field type by id\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  string \t\t\tid \tfield type\n\t\t * @return backbone.model    \tfield type model\n\t\t */\n\t\tgetType: function( id ) {\n\t\t\treturn this.collection.get( id );\n        },\n\n        /**\n         * Return the installed action type collection\n         *\n         * @since  3.0\n         * @return backbone.collection    \tfield type collection\n         */\n\t\tgetCollection: function() {\n        \treturn this.collection;\n        }\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Model that represents our form settings.\n * \n * @package Ninja Forms builder\n * @subpackage Form Settings\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/advanced/settingsModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tobjectType: 'Form Setting',\n\t\t\teditActive: false\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\t// Listen for model attribute changes\n\t\t\tthis.bind( 'change', this.changeSetting, this );\n\t\t\t/*\n\t\t\t * Check to see if we have any setting defaults to set.\n\t\t\t */\n\t\t\tvar formSettings = nfRadio.channel( 'settings' ).request( 'get:collection' );\n\t\t\t_.each( formSettings.models, function( settingModel ) {\n\t\t\t\tif ( 'undefined' == typeof this.get( settingModel.get( 'name' ) ) ) {\n\t\t\t\t\tthis.set( settingModel.get( 'name' ), settingModel.get( 'value' ), { silent: true } );\n\t\t\t\t}\n\t\t\t\tnfRadio.channel( settingModel.get( 'type' ) ).trigger( 'init:dataModel', this, settingModel );\n\t\t\t}, this );\n\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'fire:updateFieldKey', this.updateFieldKey );\n\t\t},\n\n\t\t/**\n\t\t * When we change the model attributes, fire an event saying we've changed something.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tchangeSetting: function( model, options) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'update:setting', this, options.settingModel );\n\t\t},\n\n\t\tupdateFieldKey: function( keyModel, settingModel ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'replace:fieldKey', this, keyModel, settingModel );\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Handles interactions with our form settings collection.\n * \n * @package Ninja Forms builder\n * @subpackage Advanced\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/advanced/data',['models/advanced/settingsModel'], function( settingsModel ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Load our action collection from our localized form data\n\t\t\tthis.model = new settingsModel( preloadedFormData.settings );\n\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:settings', this.getSettings, this );\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:setting', this.getSetting, this );\n\t\t\tnfRadio.channel( 'settings' ).reply( 'update:setting', this.updateSetting, this );\n\t\t},\n\n\t\tgetSettings: function() {\n\t\t\treturn this.model;\n\t\t},\n\n\t\tupdateSetting: function( name, value, silent ) {\n\t\t\tsilent = silent || false;\n\t\t\tthis.model.set( name, value, { silent: silent } );\n\t\t},\n\n\t\tgetSetting: function( name ) {\n\t\t\treturn this.model.get( name );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Fetches settings models so that we can get setting information\n * \n * @package Ninja Forms builder\n * @subpackage Advanced\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/advanced/formSettings',['models/app/settingCollection'], function( settingCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.collection = new settingCollection( formSettings, { objectType: 'settings' } );\n\t\t\t\t\t\n\t\t\t// Responds to requests for settings models.\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:settingModel', this.getSettingModel, this );\n\n\t\t\t// Responds to requests for our setting collection\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:collection', this.getSettingCollection, this );\n\t\t},\n\n\t\tgetSettingModel: function( name ) {\n\t\t\treturn this.collection.findWhere( { name: name } );\n\t\t},\n\n\t\tgetSettingCollection: function() {\n\t\t\treturn this.collection;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles adding and removing the active class from form settings currently being edited.\n * \n * @package Ninja Forms builder\n * @subpackage Advanced\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/advanced/editActive',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Respond to requests to remove the active class from all our fields.\n\t\t\tnfRadio.channel( 'settings' ).reply( 'clear:editActive', this.clearEditActive, this );\n\t\t\t// Listen for the closing drawer so that we can remove all of our active classes.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-editSettings' ), 'before:closeDrawer', this.clearEditActive );\n\t\t},\n\n\t\t/**\n\t\t * Loops through our fields collection and sets editActive to false.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n        clearEditActive: function() {\n            var collection = nfRadio.channel( 'settings' ).request( 'get:typeCollection' );\n            _.each( collection.models, function( field ) {\n\t\t\t\tfield.set( 'editActive', false );\n            } );\n        }\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Listens for clicks on our form settings sections.\n * \n * @package Ninja Forms builder\n * @subpackage Advanced\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/advanced/clickEdit',['models/advanced/settingsModel'], function( settingsModel ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'settings' ), 'click:edit', this.clickEdit );\n\t\t},\n\n\t\tclickEdit: function( e, typeModel ) {\n\t\t\tvar model = nfRadio.channel( 'settings' ).request( 'get:settings' );\n\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'editSettings', { model: model, groupCollection: typeModel.get( 'settingGroups' ), typeModel: typeModel } );\n\t\t\tvar preventClose = nfRadio.channel( 'drawer' ).request( 'get:preventClose' );\n\t\t\tif ( ! preventClose ) {\n\t\t\t\ttypeModel.set( 'editActive', true );\n\t\t\t}\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Makes sure that calculations don't reference calculations with a lower order.\n *\n * For example, our first caclulation can't reference the second, but the second can reference the first.\n * \n * @package Ninja Forms builder\n * @subpackage Advanced\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/advanced/calculations',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * When someone types in the \"name\" or \"eq\" portion of our calculation, we need to make sure\n\t\t\t * that they haven't duplicated a name or made a bad EQ reference.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater-calculations' ), 'keyup:option', this.keyUp );\n\t\t\t/*\n\t\t\t * Same thing for when our calculation option is updated\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater-calculations' ), 'update:option', this.updateCalc );\n\t\t\t/*\n\t\t\t * When we sort our calcluations, we need to make sure that we don't get any bad EQ\n\t\t\t * references.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater-calculations' ), 'sort:option', this.sortCalc );\n\t\t},\n\n\t\tkeyUp: function( e, optionModel ) {\n\t\t\t// Get our current value\n\t\t\tvar value = jQuery( e.target ).val();\n\t\t\t// Check to see if we're editing a name or eq\n            var id = jQuery( e.target ).data( 'id' );\n\t\t\tif( 'name' == id ) { // We are editing the name field\n\t\t\t\t// Check to see if our name already exists.\n\t\t\t\tthis.checkName( value, optionModel );\n\t\t\t\tthis.checkEQ( optionModel.get( 'eq' ), optionModel );\n\t\t\t} else if( 'eq' == id ) { // We're editing the eq\n\t\t\t\t// Check to see if there are any calcs referenced in our eq\n\t\t\t\tthis.checkEQ( value, optionModel );\n\t\t\t} else if( 'dec' == id ) { // We're editing the dec\n                // Check to see that we have a non-negative integer\n                this.checkDec( value, optionModel );\n            }\n\t\t},\n\n\t\tupdateCalc: function( optionModel ) {\n\t\t\tthis.checkName( optionModel.get( 'name' ), optionModel, false );\n\t\t\tthis.checkEQ( optionModel.get( 'eq' ), optionModel );\n\t\t\tthis.checkDec( optionModel.get( 'dec' ), optionModel );\n\n\t\t\tBackbone.Radio.channel( 'calcs' ).trigger( 'update:calc', optionModel );\n\t\t},\n\n\t\tsortCalc: function( optionModel, setting ) {\n\t\t\tthis.checkAllCalcs( setting.collection );\n\t\t},\n\n\t\t/**\n\t\t * Check to see if a calc name exists.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  string \t\t\tname        calc name to check\n\t\t * @param  backbone.model \toptionModel \n\t\t * @return void\n\t\t */\n\t\tcheckName: function( name, optionModel, silent ) {\n\t\t\tsilent = silent || true;\n\t\t\t// Get our current errors, if any.\n\t\t\tvar errors = optionModel.get( 'errors' );\n\t\t\t// Search our calc collection for our name\n\t\t\tvar found = optionModel.collection.where( { name: jQuery.trim( name ) } );\n\n\t\t\t// If the name that was passed is the same as our current name, return false.\n\t\t\tif ( name == optionModel.get( 'name' ) ) {\n\t\t\t\tfound = [];\n\t\t\t}\n\n\t\t\t// If our name exists, add an errors to the option model\n\t\t\tif ( 0 != found.length ) {\n\t\t\t\terrors.nameExists = 'Calculation names must be unique. Please enter another name.';\n\t\t\t} else {\n\t\t\t\tvar oldName = optionModel.get( 'name' );\n\t\t\t\toptionModel.set( 'name', name, { silent: silent } );\n\t\t\t\tnfRadio.channel( 'calcs' ).trigger( 'update:calcName', optionModel, oldName );\n\t\t\t\tdelete errors.nameExists;\n\t\t\t}\n\n\t\t\toptionModel.set( 'errors', errors );\n\t\t\toptionModel.trigger( 'change:errors', optionModel );\n\t\t},\n\n\t\t/**\n\t\t * Check to see if an eq contains a reference to a calc at a lower priority.\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  string \t\t\teq          our equation\n\t\t * @param  backbone.model \toptionModel\n\t\t * @return void\n\t\t */\n\t\tcheckEQ: function( eq, optionModel ) {\n\t\t\t// Get any current errors on our optionModel\n\t\t\tvar errors = optionModel.get( 'errors' );\n\t\t\t/*\n\t\t\t * We're looking for two errors:\n\t\t\t * - Calculations that are below the current one can't be processed.\n\t\t\t * - Calculations can't refer to themselves.\n\t\t\t */ \n\t\t\tvar errorSelfRef = false;\n\t\t\tvar errorFutureCalc = false;\n\t\t\t// Regex that searches for {calc:key}\n\t\t\tvar calcs = eq.match( new RegExp( /{calc:(.*?)}/g ) );\n\t\t\t/*\n\t\t\t * Calcs will be an array like:\n\t\t\t * ['{calc:test}'], ['{calc:another}']\n\t\t\t * \n\t\t\t * If we have any calcs in the eq, loop through them and search for the errors.\n\t\t\t */\n\t\t\tif ( calcs ) {\n\t\t\t\tvar calculations = optionModel.collection;\n\t\t\t\t// Maps a function to each item in our calcs array.\n\t\t\t\tcalcs = calcs.map( function( calc ) {\n\t\t\t\t\t// calc will be {calc:name}\n\t\t\t\t\tvar name = calc.replace( '}', '' ).replace( '{calc:', '' );\n\t\t\t\t\t// Get our optionModel from our calculations collection.\n\t\t\t\t\tvar targetCalc = calculations.findWhere( { name: name } );\n\t\t\t\t\tif ( name == optionModel.get( 'name' ) ) {\n\t\t\t\t\t\t// If we already have a calc with this name, set an error.\n\t\t\t\t\t\terrors.selfRef = 'A calculation can\\'t reference itself!';\n\t\t\t\t\t\terrorSelfRef = true;\n\t\t\t\t\t} else if ( targetCalc && targetCalc.get( 'order' ) > optionModel.get( 'order' ) ) {\n\t\t\t\t\t\t// If the calc is after this one, set an error. \n\t\t\t\t\t\terrorFutureCalc = true;\n\t\t\t\t\t\terrors.futureCalc = 'Can\\'t reference a future calculation!';\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// If we didn't find any self ref errors, remove the key.\n\t\t\tif ( ! errorSelfRef ) {\n\t\t\t\tdelete errors.selfRef;\n\t\t\t}\n\n\t\t\t// If we didn't find any future calc errors, remove the key.\n\t\t\tif ( ! errorFutureCalc ) {\n\t\t\t\tdelete errors.futureCalc;\n\t\t\t}\n\n\t\t\t// Set errors and trigger our optionModel change.\n\t\t\toptionModel.set( 'errors', errors );\n\t\t\toptionModel.trigger( 'change:errors', optionModel );\n\n\t\t},\n\n        /**\n         * Ceck to see if a dec is an integer value.\n         * \n         * @since 3.1\n         * @param string            dec         our decimal value\n         * @param backbone.model    optionModel\n         * @return void\n         */\n        checkDec: function( dec, optionModel ) {\n            // If dec isn't defined, bail...\n            if( 'undefined' === typeof(dec) ) return false;\n\t\t\t// Get our current errors, if any.\n\t\t\tvar errors = optionModel.get( 'errors' );\n            /**\n             * We're looking for one error:\n             * - dec is not a non-negative integer.\n             */\n            var errorNonIntDec = false;\n            \n            // Get our target value and see if it matches what we got.\n            var checked = Math.abs( parseInt( dec.trim() ) );\n            if ( dec.trim() !== '' && checked.toString() !== dec.trim() ) {\n                errorNonIntDec = true;\n                errors.nonIntDec = 'Decimals must be a non-negative integer!';\n            }\n            \n            // If our dec value is a non-negative integer.\n            if ( ! errorNonIntDec ) {\n                delete errors.nonIntDec;\n            }\n            \n\t\t\t// Set errors and trigger our optionModel change.\n\t\t\toptionModel.set( 'errors', errors );\n\t\t\toptionModel.trigger( 'change:errors', optionModel );\n            \n        },\n        \n\t\tcheckAllCalcs: function( collection ) {\n\t\t\tvar that = this;\n\t\t\tcollection.models.map( function( opt ) {\n\t\t\t\tthat.checkName( opt.get( 'name' ), opt );\n\t\t\t\tthat.checkEQ( opt.get( 'eq' ), opt );\n                that.checkDec( opt.get( 'dec' ), opt );\n\t\t\t} );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Loads all of our controllers using Require JS.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine(\n\t'controllers/loadControllers',[\n\t\t/*\n\t\t * Application controllers\n\t\t */\n\t\t'controllers/app/remote',\n\t\t'controllers/app/drawer',\n\t\t'controllers/app/drawerConfig',\n\t\t'controllers/app/domainConfig',\n\t\t'controllers/app/data',\t\t\n\t\t'controllers/app/drawerToggleSettingGroup',\n\t\t'controllers/app/updateDB',\n\t\t'controllers/app/formData',\n\t\t'controllers/app/previewLink',\n\t\t'controllers/app/menuButtons',\n\t\t'controllers/app/trackChanges',\n\t\t'controllers/app/undoChanges',\n\t\t'controllers/app/publishResponse',\n\t\t'controllers/app/changeDomain',\n\t\t'controllers/app/pushstate',\n\t\t'controllers/app/hotkeys',\n\t\t'controllers/app/cleanState',\n\t\t'controllers/app/coreUndo',\n\t\t'controllers/app/cloneModelDeep',\n\t\t'controllers/app/getSettingChildView',\n\t\t'controllers/app/changeSettingDefault',\n\t\t'controllers/app/fieldset',\n\t\t'controllers/app/toggleSetting',\n\t\t'controllers/app/itemControls',\n\t\t'controllers/app/mergeTags',\n\t\t'controllers/app/mergeTagBox',\n\t\t'controllers/app/itemSettingFill',\n\t\t'controllers/app/confirmPublish',\n\t\t'controllers/app/rte',\n\t\t'controllers/app/settingFieldSelect',\n\t\t'controllers/app/settingFieldList',\n\t\t'controllers/app/settingHTML',\n\t\t'controllers/app/settingColor',\n\t\t'controllers/app/changeMenu',\n\t\t'controllers/app/mobile',\n\t\t'controllers/app/notices',\n\t\t'controllers/app/unloadCheck',\n\t\t'controllers/app/formContentFilters',\n\t\t'controllers/app/formContentGutterFilters',\n\t\t'controllers/app/cloneCollectionDeep',\n\t\t'controllers/app/trackKeyDown',\n\t\t'controllers/app/perfectScroll',\n\t\t'controllers/app/getNewSettingGroupCollection',\n\t\t'controllers/app/settingMedia',\n\t\t/*\n\t\t * Fields domain controllers\n\t\t */\n\t\t'controllers/fields/types',\n\t\t'controllers/fields/fieldTypeDrag',\n\t\t'controllers/fields/stagingDrag',\n\t\t'controllers/fields/staging',\n\t\t'controllers/fields/stagingSortable',\n\t\t'controllers/fields/filterTypes',\n\t\t'controllers/fields/sortable',\n\t\t'controllers/fields/data',\n\t\t'controllers/app/optionRepeater',\n\t\t'controllers/fields/editActive',\n\t\t'controllers/fields/fieldSettings',\n\t\t'controllers/fields/fieldCreditCard',\n\t\t'controllers/fields/fieldList',\n\t\t'controllers/fields/fieldPassword',\n\t\t'controllers/fields/fieldQuantity',\n\t\t'controllers/fields/fieldShipping',\n\t\t'controllers/fields/key',\n\t\t'controllers/fields/notices',\n\t\t'controllers/fields/mobile',\n\t\t'controllers/fields/savedFields',\n\t\t'controllers/fields/fieldDatepicker',\n\t\t'controllers/fields/fieldDisplayCalc',\n\n\t\t/*\n\t\t * TODO: Actions domain controllers\n\t\t */\n\t\t'controllers/actions/types',\n\t\t'controllers/actions/data',\n\t\t'controllers/actions/actionSettings',\n\t\t'controllers/actions/editActive',\n\t\t'controllers/actions/emailFromSetting',\n\t\t'controllers/actions/addActionTypes',\n\t\t'controllers/actions/typeDrag',\n\t\t'controllers/actions/droppable',\n\t\t'controllers/actions/filterTypes',\n\t\t'controllers/actions/newsletterList',\n\t\t'controllers/actions/deleteFieldListener',\n\t\t'controllers/actions/collectPaymentFields',\n\t\t'controllers/actions/collectPaymentCalculations',\n\t\t'controllers/actions/collectPaymentFixed',\n\t\t'controllers/actions/collectPayment',\n\n\t\t/*\n\t\t * TODO: Settings domain controllers\n\t\t */\n\t\t'controllers/advanced/types',\n\t\t'controllers/advanced/data',\n\t\t'controllers/advanced/formSettings',\n\t\t'controllers/advanced/editActive',\n\t\t'controllers/advanced/clickEdit',\n\t\t'controllers/advanced/calculations'\n\t],\n\tfunction(\n\t\t/*\n\t\t * Application controllers\n\t\t */\n\t\tRemote,\n\t\tDrawer,\n\t\tDrawerConfig,\n\t\tDomainConfig,\n\t\tAppData,\n\t\tDrawerToggleSettingGroup,\n\t\tUpdateDB,\n\t\tFormData,\n\t\tPreviewLink,\n\t\tAppMenuButtons,\n\t\tAppTrackChanges,\n\t\tAppUndoChanges,\n\t\tAppPublishResponse,\n\t\tAppChangeDomain,\n\t\tPushstate,\n\t\tHotkeys,\n\t\tCleanState,\n\t\tCoreUndo,\n\t\tCloneModelDeep,\n\t\tDrawerSettingChildView,\n\t\tChangeSettingDefault,\n\t\tFieldset,\n\t\tToggleSetting,\n\t\tItemControls,\n\t\tMergeTags,\n\t\tMergeTagsBox,\n\t\tItemSettingFill,\n\t\tConfirmPublish,\n\t\tRTE,\n\t\tSettingFieldSelect,\n\t\tSettingFieldList,\n\t\tSettingHTML,\n\t\tSettingColor,\n\t\tChangeMenu,\n\t\tAppMobile,\n\t\tAppNotices,\n\t\tAppUnloadCheck,\n\t\tFormContentFilters,\n\t\tFormContentGutterFilters,\n\t\tCloneCollectionDeep,\n\t\tTrackKeyDown,\n\t\tPerfectScroll,\n\t\tGetNewSettingGroupCollection,\n\t\tSettingMedia,\n\t\t/*\n\t\t * Fields domain controllers\n\t\t */\n\t\tFieldTypes,\n\t\tFieldTypeDrag,\n\t\tFieldStagingDrag,\n\t\tStagedFieldsData,\n\t\tStagedFieldsSortable,\n\t\tDrawerFilterFieldTypes,\n\t\tMainContentFieldsSortable,\n\t\tFieldData,\n\t\tOptionRepeater,\n\t\tFieldsEditActive,\n\t\tFieldSettings,\n\t\tFieldCreditCard,\n\t\tFieldList,\n\t\tFieldPassword,\n\t\tFieldQuantity,\n\t\tFieldShipping,\n\t\tFieldKey,\n\t\tNotices,\n\t\tFieldsMobile,\n\t\tSavedFields,\n\t\tFieldDatepicker,\n\t\tFieldDisplayCalc,\n\t\t/*\n\t\t * TODO: Actions domain controllers\n\t\t */\n\t\tActionTypes,\n\t\tActionData,\n\t\tActionSettings,\n\t\tActionEditActive,\n\t\tActionEmailFromSetting,\n\t\tActionAddTypes,\n\t\tActionTypeDrag,\n\t\tActionDroppable,\n\t\tActionFilterTypes,\n\t\tActionNewsletterList,\n\t\tActionDeleteFieldListener,\n\t\tActionCollectPaymentFields,\n\t\tActionCollectPaymentCalculations,\n\t\tActionCollectPaymentFixed,\n\t\tActionCollectPayment,\n\n\t\t/*\n\t\t * TODO: Settings domain controllers\n\t\t */\n\t\tSettingTypes,\n\t\tSettingData,\n\t\tFormSettings,\n\t\tSettingsEditActive,\n\t\tSettingsClickEdit,\n\t\tAdvancedCalculations\n\t\t\n\t) {\n\t\tvar controller = Marionette.Object.extend( {\n\t\t\tinitialize: function() {\n\t\t\t\t/*\n\t\t\t\t * Application controllers\n\t\t\t\t */\n\t\t\t\tnew FormContentFilters();\n\t\t\t\tnew FormContentGutterFilters();\n\t\t\t\tnew Hotkeys();\n\t\t\t\tnew Remote();\n\t\t\t\tnew Drawer();\n\t\t\t\tnew DrawerConfig();\n\t\t\t\tnew DomainConfig();\n\t\t\t\tnew DrawerToggleSettingGroup();\n\t\t\t\tnew PreviewLink();\n\t\t\t\tnew AppMenuButtons();\n\t\t\t\tnew AppTrackChanges();\n\t\t\t\tnew AppUndoChanges();\n\t\t\t\tnew AppPublishResponse();\n\t\t\t\tnew AppChangeDomain();\n\t\t\t\tnew CleanState();\n\t\t\t\tnew CoreUndo();\n\t\t\t\tnew CloneModelDeep();\n\t\t\t\tnew ItemControls();\n\t\t\t\tnew ConfirmPublish();\n\t\t\t\tnew RTE();\n\t\t\t\tnew SettingFieldSelect();\n\t\t\t\tnew SettingFieldList();\n\t\t\t\tnew SettingHTML();\n\t\t\t\tnew SettingColor();\n\t\t\t\tnew SettingMedia();\n\t\t\t\tnew ChangeMenu();\n\t\t\t\tnew AppMobile();\n\t\t\t\tnew AppNotices();\n\t\t\t\tnew AppUnloadCheck();\n\t\t\t\tnew UpdateDB();\n\t\t\t\tnew CloneCollectionDeep();\n\t\t\t\tnew TrackKeyDown();\n\t\t\t\tnew PerfectScroll();\n\t\t\t\tnew GetNewSettingGroupCollection();\n\t\t\t\t// new Pushstate();\n\t\t\t\t/*\n\t\t\t\t * Fields domain controllers\n\t\t\t\t * \n\t\t\t\t * Field-specific controllers should be loaded before our field type controller.\n\t\t\t\t * This ensures that any 'init' hooks are properly registered.\n\t\t\t\t */\n\t\t\t\tnew Fieldset();\n\t\t\t\tnew OptionRepeater();\n\n\t\t\t\tnew FieldTypes();\n\t\t\t\tnew FieldTypeDrag();\n\t\t\t\tnew FieldStagingDrag();\n\t\t\t\tnew StagedFieldsData();\n\t\t\t\tnew StagedFieldsSortable();\n\t\t\t\tnew DrawerFilterFieldTypes();\n\t\t\t\tnew MainContentFieldsSortable();\n\t\t\t\tnew ChangeSettingDefault();\n\t\t\t\tnew ToggleSetting();\n\t\t\t\tnew DrawerSettingChildView();\n\t\t\t\tnew FieldsEditActive();\n\t\t\t\tnew FieldSettings();\n\t\t\t\tnew FieldCreditCard();\n\t\t\t\tnew FieldList();\n\t\t\t\tnew FieldPassword;\n\t\t\t\tnew FieldQuantity();\n\t\t\t\tnew FieldShipping();\n\t\t\t\tnew FieldKey();\n\t\t\t\tnew Notices();\n\t\t\t\tnew FieldsMobile();\n\t\t\t\tnew SavedFields();\n\t\t\t\tnew FieldDatepicker();\n\t\t\t\tnew FieldDisplayCalc();\n\t\t\t\t/*\n\t\t\t\t * TODO: Actions domain controllers\n\t\t\t\t */\n\t\t\t\tnew ActionNewsletterList();\n\t\t\t\tnew ActionDeleteFieldListener();\n\t\t\t\tnew ActionCollectPaymentCalculations();\n\t\t\t\tnew ActionCollectPayment();\t\t\t\t\n\t\t\t\tnew ActionTypes();\n\t\t\t\tnew ActionData();\n\t\t\t\tnew ActionSettings();\n\t\t\t\tnew ActionEditActive();\n\t\t\t\tnew ActionEmailFromSetting();\n\t\t\t\tnew ActionAddTypes();\n\t\t\t\tnew ActionTypeDrag();\n\t\t\t\tnew ActionDroppable();\n\t\t\t\tnew ActionFilterTypes();\n\t\t\t\tnew ActionCollectPaymentFields();\n\t\t\t\tnew ActionCollectPaymentFixed();\n\n\t\t\t\t/*\n\t\t\t\t * TODO: Settings domain controllers\n\t\t\t\t */\n\t\t\t\tnew SettingTypes();\n\t\t\t\tnew FormSettings();\n\t\t\t\tnew AdvancedCalculations();\n\t\t\t\tnew SettingData();\n\t\t\t\tnew SettingsEditActive();\n\t\t\t\tnew SettingsClickEdit();\n\t\t\t\t\n\t\t\t\t/*\n\t\t\t\t * Data controllers need to be set after every other controller has been setup, even if they aren't domain-specific.\n\t\t\t\t * AppData() was after FormData();\n\t\t\t\t */\n\t\t\t\tnew AppData();\n\t\t\t\tnew FieldData();\n\t\t\t\tnew FormData();\n\t\t\t\tnew MergeTags();\n\t\t\t\tnew MergeTagsBox();\n\t\t\t\tnew ItemSettingFill();\n\t\t\t}\n\t\t});\n\n\t\treturn controller;\n} );\n\n","define( 'views/fields/fieldItem',['views/app/itemControls'], function( itemControlsView ) {\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-main-content-field',\n\t\tdoingShortcut: false,\n\n\t\tregions: {\n\t\t\titemControls: '.nf-item-controls'\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.model.on( 'change:editActive', this.render, this );\n\t\t\tthis.model.on( 'change:label', this.render, this );\n\t\t\tthis.model.on( 'change:required', this.render, this );\n\t\t\tthis.model.on( 'change:id', this.render, this );\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change:editActive', this.render );\n\t\t\tthis.model.off( 'change:label', this.render );\n\t\t\tthis.model.off( 'change:required', this.render );\n\t\t\tthis.model.off( 'change:id', this.render );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\n\t\t\tthis.itemControls.show( new itemControlsView( { model: this.model } ) );\n\t\t\tjQuery( this.el ).disableSelection();\n\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tjQuery( this.el ).on( 'taphold', function( e, touch ) {\n\t\t\t\t\tif ( ! jQuery( e.target ).hasClass( 'nf-edit-settings' ) ) {\n\t\t\t\t\t\tjQuery( this ).addClass( 'ui-sortable-helper drag-selected' );\n\t\t\t\t\t\tjQuery( this ).ClassyWiggle( 'start', { degrees: ['.65', '1', '.65', '0', '-.65', '-1', '-.65', '0'], delay: 50 } );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\n\t\ttemplateHelpers: function () {\n\t    \treturn {\n\t    \t\trenderClasses: function() {\n\t    \t\t\tvar classes = 'nf-field-wrap';\n\t    \t\t\tif ( this.editActive ) {\n\t    \t\t\t\tclasses += ' active';\n\t    \t\t\t}\n\t    \t\t\treturn classes;\n\t    \t\t},\n\t    \t\trenderRequired: function() {\n\t    \t\t\tif ( 1 == this.required ) {\n\t    \t\t\t\treturn '<span class=\"required\">*</span>';\n\t    \t\t\t} else {\n\t    \t\t\t\treturn '';\n\t    \t\t\t}\n\t    \t\t},\n\t    \t\tgetFieldID: function() {\n\t\t\t\t\tif ( jQuery.isNumeric( this.id ) ) {\n\t\t\t\t\t\treturn 'field-' + this.id;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this.id;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\trenderIcon: function() {\n\t    \t\t\tvar type, icon;\n\n\t\t\t\t\ttype = nfRadio.channel( 'fields' ).request( 'get:type', this.type );\n\n\t\t\t\t\ticon = document.createElement( 'span' );\n\t\t\t\t\ticon.classList.add( 'fa', 'fa-' + type.get( 'icon' ) );\n\n\t\t\t\t\treturn icon.outerHTML;\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\n\t\tevents: {\n\t\t\t'mouseover .nf-item-control': 'mouseoverItemControl',\n\t\t\t'mousedown': 'maybeShortcut',\n\t\t\t'click': 'maybeClickEdit',\n\t\t\t'singletap': 'maybeTapEdit',\n\t\t\t'swipeleft': 'swipeLeft',\n\t\t\t'swiperight': 'swipeRight',\n\t\t\t'tapend': 'tapend'\n\t\t},\n\n\t\tmaybeClickEdit: function( e ) {\n\t\t\tif ( this.doingShortcut ) {\n\t\t\t\tthis.doingShortcut = false;\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( ( jQuery( e.target ).parent().hasClass( 'nf-fields-sortable' ) || jQuery( e.target ).parent().hasClass( 'nf-field-wrap' ) || jQuery( e.target ).hasClass( 'nf-field-wrap' ) ) && ! nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tjQuery( ':focus' ).blur();\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', e, this.model );\n\t\t\t}\n\t\t},\n\n\t\tmaybeShortcut: function( e ) {\n\t\t\tvar keys = nfRadio.channel( 'app' ).request( 'get:keydown' );\n\t\t\t/*\n\t\t\t * If the shift key isn't held down, return.\n\t\t\t */\n\t\t\tif ( -1 == keys.indexOf( 16 ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t/*\n\t\t\t * If we are pressing D, delete this field.\n\t\t\t */\n\t\t\tif ( -1 != keys.indexOf( 68 ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:delete', e, this.model );\n\t\t\t\tthis.doingShortcut = true;\n\t\t\t\treturn false;\n\t\t\t} else if ( -1 != keys.indexOf( 67 ) ) {\n\t\t\t\tthis.doingShortcut = true;\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:duplicate', e, this.model );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\n\t\tmaybeTapEdit: function( e ) {\n\t\t\tif ( jQuery( e.target ).parent().hasClass( 'nf-fields-sortable' ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', e, this.model );\n\t\t\t}\n\t\t},\n\n\t\tswipeLeft: function( e, touch ) {\n\t\t\tjQuery( touch.startEvnt.target ).closest( 'div' ).find( '.nf-item-duplicate' ).show();\n\t\t\tjQuery( touch.startEvnt.target ).closest( 'div' ).find( '.nf-item-delete' ).show();\n\t\t},\n\n\t\tswipeRight: function( e, touch ) {\n\t\t\tjQuery( touch.startEvnt.target ).closest( 'div' ).find( '.nf-item-duplicate' ).hide();\n\t\t\tjQuery( touch.startEvnt.target ).closest( 'div' ).find( '.nf-item-delete' ).hide();\n\t\t},\n\n\t\ttapend: function( e, touch ) {\n\t\t\tjQuery( this.el ).ClassyWiggle( 'stop' );\n\t\t\tjQuery( this.el ).removeClass( 'ui-sortable-helper drag-selected' );\n\t\t},\n\n\t\tremove: function(){\n\t\t\tif ( nfRadio.channel( 'fields' ).request( 'get:removing' ) ) {\n\t\t\t\tthis.$el.hide( 'clip', function(){\n\t\t\t\t\tjQuery( this ).remove();\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.$el.remove();\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'fields' ).request( 'set:removing', false );\n\t\t},\n\n\t\tmouseoverItemControl: function( e ) {\n\t\t\tjQuery( this.el ).find( '.nf-item-control' ).css( 'display', '' );\n\t\t}\n\n\t});\n\n\treturn view;\n} );\n\n","define( 'views/fields/mainContentEmpty',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-main-content-fields-empty',\n\n\t\tonBeforeDestroy: function() {\n\t\t\tjQuery( this.el ).parent().removeClass( 'nf-fields-empty-droppable' ).droppable( 'destroy' );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tif ( jQuery( this.el ).parent().hasClass( 'ui-sortable' ) ) {\n\t\t\t\tjQuery( this.el ).parent().sortable( 'destroy' );\n\t\t\t}\n\t\t\tjQuery( this.el ).parent().addClass( 'nf-fields-empty-droppable' );\n\t\t\tjQuery( this.el ).parent().droppable( {\n\t\t\t\taccept: function( draggable ) {\n\t\t\t\t\tif ( jQuery( draggable ).hasClass( 'nf-stage' ) || jQuery( draggable ).hasClass( 'nf-field-type-button' ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tactiveClass: 'nf-droppable-active',\n\t\t\t\thoverClass: 'nf-droppable-hover',\n\t\t\t\ttolerance: 'pointer',\n\t\t\t\tover: function( e, ui ) {\n\t\t\t\t\tui.item = ui.draggable;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'over:fieldsSortable', ui );\n\t\t\t\t},\n\t\t\t\tout: function( e, ui ) {\n\t\t\t\t\tui.item = ui.draggable;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'out:fieldsSortable', ui );\n\t\t\t\t},\n\t\t\t\tdrop: function( e, ui ) {\n\t\t\t\t\tui.item = ui.draggable;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'receive:fieldsSortable', ui );\n\t\t\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t\t\tfieldCollection.trigger( 'reset', fieldCollection );\n\t\t\t\t},\n\t\t\t} );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Renders our form title.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/formTitle',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-header-form-title',\n\n\t\tinitialize: function() {\n\t\t\t// When we change the model (to disable it, for example), re-render.\n\t\t\tthis.model.on( 'change:title', this.render, this );\n\t\t},\n\n\t\t/**\n\t\t * These functions are available to templates, and help us to remove logic from template files.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return Object\n\t\t */\n\t\ttemplateHelpers: function() {\n\t\t\tvar that = this;\n\t    \treturn {\n\t    \t\trenderTitle: function(){\n\t    \t\t\tvar formData = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\t    \t\t\treturn _.escape( formData.get( 'settings' ).get( 'title' ) );\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn view;\n} );\n","/**\n * Return views that might be used in extensions.\n * These are un-instantiated views.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/loadViews',[ 'views/fields/fieldItem', 'views/fields/mainContentEmpty', 'views/app/formTitle' ], function( fieldItemView, mainContentEmptyView, FormTitleView ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Reply to requests for our field item view.\n\t\t\tnfRadio.channel( 'views' ).reply( 'get:fieldItem', this.getFieldItem );\n\t\t\n\t\t\t// Reply to requests for our empty content view.\n\t\t\tnfRadio.channel( 'views' ).reply( 'get:mainContentEmpty', this.getMainContentEmpty );\n\t\t\n\t\t\t// Reply to requests for our form title view.\n\t\t\tnfRadio.channel( 'views' ).reply( 'get:formTitle', this.getFormTitle );\n\t\t},\n\n\t\tgetFieldItem: function( model ) {\n\t\t\treturn fieldItemView;\n\t\t},\n\n\t\tgetMainContentEmpty: function() {\n\t\t\treturn mainContentEmptyView;\n\t\t},\n\n\t\tgetFormTitle: function() {\n\t\t\treturn FormTitleView;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","var nfRadio = Backbone.Radio;\n\njQuery( document ).ready( function( $ ) {\n\trequire( ['views/app/builder', 'controllers/loadControllers', 'views/loadViews'], function( BuilderView, LoadControllers, LoadViews ) {\n\n\t\tvar NinjaForms = Marionette.Application.extend( {\n\n\t\t\tinitialize: function( options ) {\n\n\t\t\t\tvar that = this;\n\t\t\t\tMarionette.Renderer.render = function(template, data){\n\t\t\t\t\tvar template = that.template( template );\n\t\t\t\t\treturn template( data );\n\t\t\t\t};\n\n\t\t\t\t// Trigger an event before we load our controllers.\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'before:loadControllers', this );\n\t\t\t\t// Load our controllers.\n\t\t\t\tvar loadControllers = new LoadControllers();\n\t\t\t\t// Trigger an event after we load our controllers.\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'after:loadControllers', this );\n\n\t\t\t\t// Trigger an event before we load un-instantiated views\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'before:loadViews', this );\n\t\t\t\tvar loadViews = new LoadViews();\n\t\t\t\t// Trigger an event after we load un-instantiated views.\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'after:loadViews', this );\n\n\t\t\t\tnfRadio.channel( 'app' ).reply( 'get:template', this.template );\n\t\t\t},\n\n\t\t\tonStart: function() {\n\t\t\t\tvar builderView = new BuilderView();\n\t\t\t\t// Trigger our after start event.\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'after:appStart', this );\n\n\t\t\t\t/*\n\t\t\t\t * If we're on the new forms builder, open the add fields drawer.\n\t\t\t\t */\n\t\t\t\tif ( 0 == nfAdmin.formID ) {\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'addField' );\n\t\t\t\t}\n\t\t\t},\n\n\t\t\ttemplate: function( template ) {\n\t\t\t\treturn _.template( $( template ).html(),  {\n\t\t\t\t\tevaluate:    /<#([\\s\\S]+?)#>/g,\n\t\t\t\t\tinterpolate: /\\{\\{\\{([\\s\\S]+?)\\}\\}\\}/g,\n\t\t\t\t\tescape:      /\\{\\{([^\\}]+?)\\}\\}(?!\\})/g,\n\t\t\t\t\tvariable:    'data'\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t\n\t\tvar ninjaForms = new NinjaForms();\n\t\tninjaForms.start();\n\t} );\n} );\ndefine(\"main\", function(){});\n\n"]}