{"version":3,"sources":["../../../config-wrap-start-default.js","../lib/almond.js","models/fieldErrorModel.js","models/fieldErrorCollection.js","models/fieldModel.js","models/fieldCollection.js","models/formErrorModel.js","models/formErrorCollection.js","models/formModel.js","models/formCollection.js","controllers/formData.js","controllers/fieldError.js","controllers/changeField.js","controllers/changeEmail.js","controllers/fieldCheckbox.js","controllers/fieldCheckboxList.js","controllers/fieldRadio.js","controllers/fieldNumber.js","controllers/mirrorField.js","controllers/confirmField.js","controllers/updateFieldModel.js","controllers/submitButton.js","controllers/submitDebug.js","controllers/getFormErrors.js","controllers/validateRequired.js","controllers/submitError.js","controllers/actionRedirect.js","controllers/actionSuccess.js","controllers/fieldSelect.js","controllers/coreSubmitResponse.js","controllers/fieldProduct.js","controllers/fieldTotal.js","controllers/fieldQuantity.js","models/calcModel.js","models/calcCollection.js","controllers/calculations.js","controllers/fieldDate.js","controllers/fieldRecaptcha.js","controllers/fieldHTML.js","controllers/helpText.js","controllers/fieldTextareaRTE.js","controllers/fieldStarRating.js","controllers/fieldTerms.js","controllers/formContentFilters.js","views/fieldItem.js","views/beforeField.js","views/fieldErrorItem.js","views/fieldErrorCollection.js","views/inputLimit.js","views/afterField.js","views/fieldLayout.js","controllers/loadViews.js","controllers/formErrors.js","controllers/submit.js","views/fieldCollection.js","controllers/defaultFilters.js","controllers/uniqueFieldError.js","controllers/loadControllers.js","views/beforeForm.js","views/formErrorItem.js","views/formErrorCollection.js","views/honeyPot.js","views/afterFormContent.js","views/beforeFormContent.js","views/formLayout.js","views/afterForm.js","views/mainLayout.js","main.js"],"names":["requirejs","require","define","undef","hasProp","obj","prop","hasOwn","call","normalize","name","baseName","nameParts","nameSegment","mapValue","foundMap","lastIndex","foundI","foundStarMap","starI","i","j","part","baseParts","split","map","config","starMap","charAt","length","nodeIdCompat","jsSuffixRegExp","test","replace","slice","concat","splice","join","indexOf","substring","makeRequire","relName","forceSync","args","aps","arguments","push","req","apply","makeNormalize","makeLoad","depName","value","defined","callDep","waiting","defining","main","Error","splitPrefix","prefix","index","makeConfig","makeMap","handlers","Object","prototype","hasOwnProperty","plugin","parts","f","n","pr","p","exports","e","module","id","uri","deps","callback","cjsModule","ret","usingExports","callbackType","load","undefined","alt","setTimeout","cfg","_defined","amd","jQuery","model","Backbone","Model","extend","errorModel","collection","Collection","fieldErrorCollection","defaults","placeholder","label_pos","classes","reRender","mirror_field","confirm_field","clean","disabled","visible","invalid","initialize","this","set","options","formModel","get","listenTo","nfRadio","channel","resetModel","bind","changeModel","changeValue","trigger","formLoaded","beforeSubmit","addWrapperClass","cl","removeWrapperClass","setInvalid","fieldModel","comparator","models","on","fieldCollection","validateFields","_","each","showFields","invoke","hideFields","FieldCollection","ErrorCollection","beforeForm","afterForm","beforeFields","afterFields","wrapper_class","element_class","hp","fieldErrors","extra","setting","formContentData","formContentLoadFilters","request","sortedArray","without","first","reply","getFieldByKey","addError","removeError","getExtra","addExtra","removeExtra","getForm","key","findWhere","msg","errors","add","remove","extraData","FormModel","FormCollection","controller","Marionette","nfForms","getForms","getField","form","fieldErrorModel","getError","targetID","targetError","changeField","blurField","el","val","radioChannel","emailReg","errorID","onChangeModelValue","emailKeyup","onBlurField","fieldID","emailChange","changeEmailErrorMsg","keyCode","registerRenderClasses","validateRequired","validateModelData","beforeUpdateField","getCalcValue","checked","addClass","closest","find","removeClass","calcValue","customClasses","customLabelClasses","maybeChecked","default_value","register","renderOptions","renderOtherText","selected","filter","opt","savedVal","Array","isArray","html","valueFound","option","isSelected","template","show_other","data","currentValue","calc_value","tmp_opt","Number","calc","parent","optionArray","valueIndex","clone","changeModelValue","updateCheckedClass","attr","maybeMinDefault","validateMinMax","min","$el","parseFloat","max","step","fieldNumberNumMinError","fieldNumberNumMaxError","testValue","Math","round","testStep","fieldNumberIncrementBy","listeningModel","registerMirror","targetModel","registerConfirm","confirmKeyup","confirmModel","formModal","registerConfirmListeners","confirmID","confirmFieldErrorMsg","compareValue","confirmValue","updateField","submitButton","bound","registerHandlers","click","resetLabel","maybeEnable","maybeDisable","processingLabel","size","response","submitDebug","textStatus","jqXHR","formID","debug","debugMessages","document","createElement","message","messageText","createTextNode","appendChild","console","style","log","getFormErrors","error","field","validateKeyup","customReqValidation","defaultReqValidation","maskPlaceholder","trim","valid","maybeError","validateRequiredField","submitErrors","fields","slug","last","show","actionRedirect","halt","redirect","window","location","actions","actionSubmit","success_message","form_id","top_of_success_message","offset","top","bottom_of_success_message","outerHeight","bottom_of_screen","scrollTop","height","top_of_screen","the_element_is_visible","animate","renderOtherAttributes","label","type","otherAttributes","multiSize","multi_size","settings","clear_complete","reset","hide_complete","renderProductQuantity","renderProduct","product_type","product_use_quantity","that","product_price","product_quantity","totalModel","productTotals","registerShipping","onFormLoaded","onChangeProduct","onChangeQuantity","shippingModel","shippingCost","fieldModels","productFields","quantityFields","productID","product","productPrice","updateTotal","productQuantity","newTotal","productField","quantity","toFixed","registerQuantity","changeCalc","targetCalcModel","CalcModel","dec","toString","parseInt","getCalc","CalcCollection","calcs","displayFields","registerCalcs","resetCalcs","nfFrontEnd","use_merge_tags","calculations","fieldType","initDisplayField","updateDisplayFields","init","calcCollection","calcModel","setupCalc","eq","eqValues","match","RegExp","updateCalcFields","replaceKey","mexp","eval","isNumeric","tag","reTag","calcTag","reCalcTag","replaceAllKeys","re","calcName","applyLocaleFormatting","number","splitNumber","nfi18n","thousands_sep","formattedNumber","decimal_point","initDatepicker","view","dateFormat","convertDateFormat","dateObject","pikadayResponsive","format","outputFormat","pikadayOptions","yearRange","getYearRange","minDate","getMinDate","maxDate","getMaxDate","firstDay","startOfWeek","setDate","moment","yearRangeStart","yearRangeEnd","Date","initRecaptcha","resetRecaptcha","updateResponse","recaptchaID","grecaptcha","htmlFields","trackedMergeTags","Radio","setupFieldMergeTagTracking","mergeTags","mergeTag","fieldKey","updateFieldMergeTags","htmlFieldModel","initHelpText","jBox","theme","content","initTextareaRTEs","clickExtra","meta_image_frame","currentContext","summernote","icons","align","alignCenter","alignJustify","alignLeft","alignRight","indent","outdent","bold","caret","close","code","eraser","italic","link","unlink","magic","minus","orderedlist","redo","square","table","underline","undo","unorderedlist","linkButton","context","mediaButton","toolbar","userSettings","uid","buttons","codemirror","lineNumbers","prettifyHtml","callbacks","onChange","linkMenu","next","replaceWith","class","innerHTML","ui","linkDropdown","buttonGroup","button","className","contents","tooltip","fieldTextareaRTEInsertLink","clickLinkButton","toggle","dropdown","children","render","fieldTextareaRTEInsertMedia","openMediaManager","open","wp","media","frames","title","fieldTextareaRTESelectAFile","text","media_attachment","state","toJSON","insertMedia","range","target","focus","textEl","urlEl","isNewWindowEl","hasClass","url","isNewWindow","filename","initRating","renderRatings","rating","default","num","htmlFragment","createRange","createContextualFragment","keyUpExtra","currentTarget","addOption","new_option","viewFilters","loadFilters","addViewFilter","addLoadFilter","getViewFilters","getLoadFilters","priority","ItemView","tagName","toggleAriaInvalid","JSON","stringify","onRender","unwrap","setElement","mask","isInteger","isFinite","floor","currencySymbol","autoNumericOptions","digitGroupSeparator","decimalCharacter","autoN_el","AutoNumeric","templateHelpers","renderElement","tmpl","element_templates","renderLabel","renderLabelClasses","renderPlaceholder","customPlaceholder","renderWrapClass","wrapClass","parentType","old_classname","customWrapClass","renderClasses","maybeDisabled","disable_input","maybeDisableAutocomplete","disable_browser_autocomplete","maybeInputLimit","input_limit_type","input_limit","getHelpText","help_text","maybeRenderHelp","check_text_par","innerText","textContent","icon","classList","setAttribute","outerHTML","renderDescText","desc_text","check","checkText","descriptionText","fieldDescription","renderCurrencyFormatting","replacedDecimal","replacedThousands","currency_symbol","events","change .nf-element","keyup .nf-element","click .nf-element","click .extra","blur .nf-element","fieldChange","fieldKeyup","fieldClick","extraClick","fieldBlur","onAttach","fieldErrorItem","CollectionView","childView","updateCount","count","regex","words","wordCount","charCount","limit","currentCount","InputLimitView","changeError","errorEl","errorCollectionView","inputLimitEl","inputLimitView","fieldItem","beforeField","afterField","LayoutView","regions","getTemplate","renderContainerClass","containerClass","desc_pos","container_class","fieldItemView","fieldLayoutView","getFieldItem","getFieldLayout","errorMsg","formErrorsCorrectErrors","omit","registerSubmitHandler","submit","validate","blockingFormErrors","fieldDataDefaults","formData","action","security","ajaxNonce","ajax","adminAjax","cache","success","parseJSON","errorThrown","responseText","fieldLayout","FieldCollectionView","registerDefaultDataFilter","defaultFormContentLoad","defaultFormContentView","currentFieldCollection","resetFields","FormData","FieldError","ChangeField","ChangeEmail","FieldCheckbox","FieldCheckboxList","FieldRadio","FieldNumber","MirrorField","ConfirmField","UpdateFieldModel","SubmitButton","SubmitDebug","GetFormErrors","ValidateRequired","SubmitError","ActionRedirect","ActionSuccess","FieldSelect","CoreSubmitResponse","FieldProduct","FieldTotal","FieldQuantity","Calculations","FieldDate","FieldRecaptcha","FieldHTML","HelpText","FieldTextareaRTE","FieldStarRating","FieldTerms","FormContentFilters","LoadViews","FormErrors","Submit","DefaultFilters","UniqueFieldError","formErrorItem","keyup .nf-field-hp","change .nf-field-hp","honeypotHoneypotError","HoneyPot","onShow","renderFieldsMarkedRequired","requiredFields","required","fieldsMarkedRequired","AfterFormContent","BeforeFormContent","beforeFormContent","formContent","afterFormContent","getEl","hide","formContentViewFilters","formContentView","BeforeForm","FormLayout","AfterForm","responseMsg","formLayout","originalVal","fn","prev","result","change","ready","$","formCollection","LoadControllers","mainLayout","empty","NinjaForms","Application","forms","Renderer","urlParameters","object","compact","search","item","nf_resume","restart","onStart","layoutView","evaluate","interpolate","escape","variable","ninjaForms","start"],"mappings":"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","file":"front-end.js","sourcesContent":["(function () {\n","/**\n * @license almond 0.3.1 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/jrburke/almond for details\n */\n//Going sloppy to avoid 'use strict' string cost, but strict practices should\n//be followed.\n/*jslint sloppy: true */\n/*global setTimeout: false */\n\nvar requirejs, require, define;\n(function (undef) {\n    var main, req, makeMap, handlers,\n        defined = {},\n        waiting = {},\n        config = {},\n        defining = {},\n        hasOwn = Object.prototype.hasOwnProperty,\n        aps = [].slice,\n        jsSuffixRegExp = /\\.js$/;\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    /**\n     * Given a relative module name, like ./something, normalize it to\n     * a real name that can be mapped to a path.\n     * @param {String} name the relative name\n     * @param {String} baseName a real name that the name arg is relative\n     * to.\n     * @returns {String} normalized name\n     */\n    function normalize(name, baseName) {\n        var nameParts, nameSegment, mapValue, foundMap, lastIndex,\n            foundI, foundStarMap, starI, i, j, part,\n            baseParts = baseName && baseName.split(\"/\"),\n            map = config.map,\n            starMap = (map && map['*']) || {};\n\n        //Adjust any relative paths.\n        if (name && name.charAt(0) === \".\") {\n            //If have a base name, try to normalize against it,\n            //otherwise, assume it is a top-level require that will\n            //be relative to baseUrl in the end.\n            if (baseName) {\n                name = name.split('/');\n                lastIndex = name.length - 1;\n\n                // Node .js allowance:\n                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n                }\n\n                //Lop off the last part of baseParts, so that . matches the\n                //\"directory\" and not name of the baseName's module. For instance,\n                //baseName of \"one/two/three\", maps to \"one/two/three.js\", but we\n                //want the directory, \"one/two\" for this normalization.\n                name = baseParts.slice(0, baseParts.length - 1).concat(name);\n\n                //start trimDots\n                for (i = 0; i < name.length; i += 1) {\n                    part = name[i];\n                    if (part === \".\") {\n                        name.splice(i, 1);\n                        i -= 1;\n                    } else if (part === \"..\") {\n                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {\n                            //End of the line. Keep at least one non-dot\n                            //path segment at the front so it can be mapped\n                            //correctly to disk. Otherwise, there is likely\n                            //no path mapping for a path starting with '..'.\n                            //This can still fail, but catches the most reasonable\n                            //uses of ..\n                            break;\n                        } else if (i > 0) {\n                            name.splice(i - 1, 2);\n                            i -= 2;\n                        }\n                    }\n                }\n                //end trimDots\n\n                name = name.join(\"/\");\n            } else if (name.indexOf('./') === 0) {\n                // No baseName, so this is ID is resolved relative\n                // to baseUrl, pull off the leading dot.\n                name = name.substring(2);\n            }\n        }\n\n        //Apply map config if available.\n        if ((baseParts || starMap) && map) {\n            nameParts = name.split('/');\n\n            for (i = nameParts.length; i > 0; i -= 1) {\n                nameSegment = nameParts.slice(0, i).join(\"/\");\n\n                if (baseParts) {\n                    //Find the longest baseName segment match in the config.\n                    //So, do joins on the biggest to smallest lengths of baseParts.\n                    for (j = baseParts.length; j > 0; j -= 1) {\n                        mapValue = map[baseParts.slice(0, j).join('/')];\n\n                        //baseName segment has  config, find if it has one for\n                        //this name.\n                        if (mapValue) {\n                            mapValue = mapValue[nameSegment];\n                            if (mapValue) {\n                                //Match, update name to the new value.\n                                foundMap = mapValue;\n                                foundI = i;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (foundMap) {\n                    break;\n                }\n\n                //Check for a star map match, but just hold on to it,\n                //if there is a shorter segment match later in a matching\n                //config, then favor over this star map.\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\n                    foundStarMap = starMap[nameSegment];\n                    starI = i;\n                }\n            }\n\n            if (!foundMap && foundStarMap) {\n                foundMap = foundStarMap;\n                foundI = starI;\n            }\n\n            if (foundMap) {\n                nameParts.splice(0, foundI, foundMap);\n                name = nameParts.join('/');\n            }\n        }\n\n        return name;\n    }\n\n    function makeRequire(relName, forceSync) {\n        return function () {\n            //A version of a require function that passes a moduleName\n            //value for items that may need to\n            //look up paths relative to the moduleName\n            var args = aps.call(arguments, 0);\n\n            //If first arg is not require('string'), and there is only\n            //one arg, it is the array form without a callback. Insert\n            //a null so that the following concat is correct.\n            if (typeof args[0] !== 'string' && args.length === 1) {\n                args.push(null);\n            }\n            return req.apply(undef, args.concat([relName, forceSync]));\n        };\n    }\n\n    function makeNormalize(relName) {\n        return function (name) {\n            return normalize(name, relName);\n        };\n    }\n\n    function makeLoad(depName) {\n        return function (value) {\n            defined[depName] = value;\n        };\n    }\n\n    function callDep(name) {\n        if (hasProp(waiting, name)) {\n            var args = waiting[name];\n            delete waiting[name];\n            defining[name] = true;\n            main.apply(undef, args);\n        }\n\n        if (!hasProp(defined, name) && !hasProp(defining, name)) {\n            throw new Error('No ' + name);\n        }\n        return defined[name];\n    }\n\n    //Turns a plugin!resource to [plugin, resource]\n    //with the plugin being undefined if the name\n    //did not have a plugin prefix.\n    function splitPrefix(name) {\n        var prefix,\n            index = name ? name.indexOf('!') : -1;\n        if (index > -1) {\n            prefix = name.substring(0, index);\n            name = name.substring(index + 1, name.length);\n        }\n        return [prefix, name];\n    }\n\n    /**\n     * Makes a name map, normalizing the name, and using a plugin\n     * for normalization if necessary. Grabs a ref to plugin\n     * too, as an optimization.\n     */\n    makeMap = function (name, relName) {\n        var plugin,\n            parts = splitPrefix(name),\n            prefix = parts[0];\n\n        name = parts[1];\n\n        if (prefix) {\n            prefix = normalize(prefix, relName);\n            plugin = callDep(prefix);\n        }\n\n        //Normalize according\n        if (prefix) {\n            if (plugin && plugin.normalize) {\n                name = plugin.normalize(name, makeNormalize(relName));\n            } else {\n                name = normalize(name, relName);\n            }\n        } else {\n            name = normalize(name, relName);\n            parts = splitPrefix(name);\n            prefix = parts[0];\n            name = parts[1];\n            if (prefix) {\n                plugin = callDep(prefix);\n            }\n        }\n\n        //Using ridiculous property names for space reasons\n        return {\n            f: prefix ? prefix + '!' + name : name, //fullName\n            n: name,\n            pr: prefix,\n            p: plugin\n        };\n    };\n\n    function makeConfig(name) {\n        return function () {\n            return (config && config.config && config.config[name]) || {};\n        };\n    }\n\n    handlers = {\n        require: function (name) {\n            return makeRequire(name);\n        },\n        exports: function (name) {\n            var e = defined[name];\n            if (typeof e !== 'undefined') {\n                return e;\n            } else {\n                return (defined[name] = {});\n            }\n        },\n        module: function (name) {\n            return {\n                id: name,\n                uri: '',\n                exports: defined[name],\n                config: makeConfig(name)\n            };\n        }\n    };\n\n    main = function (name, deps, callback, relName) {\n        var cjsModule, depName, ret, map, i,\n            args = [],\n            callbackType = typeof callback,\n            usingExports;\n\n        //Use name if no relName\n        relName = relName || name;\n\n        //Call the callback to define the module, if necessary.\n        if (callbackType === 'undefined' || callbackType === 'function') {\n            //Pull out the defined dependencies and pass the ordered\n            //values to the callback.\n            //Default to [require, exports, module] if no deps\n            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;\n            for (i = 0; i < deps.length; i += 1) {\n                map = makeMap(deps[i], relName);\n                depName = map.f;\n\n                //Fast path CommonJS standard dependencies.\n                if (depName === \"require\") {\n                    args[i] = handlers.require(name);\n                } else if (depName === \"exports\") {\n                    //CommonJS module spec 1.1\n                    args[i] = handlers.exports(name);\n                    usingExports = true;\n                } else if (depName === \"module\") {\n                    //CommonJS module spec 1.1\n                    cjsModule = args[i] = handlers.module(name);\n                } else if (hasProp(defined, depName) ||\n                           hasProp(waiting, depName) ||\n                           hasProp(defining, depName)) {\n                    args[i] = callDep(depName);\n                } else if (map.p) {\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\n                    args[i] = defined[depName];\n                } else {\n                    throw new Error(name + ' missing ' + depName);\n                }\n            }\n\n            ret = callback ? callback.apply(defined[name], args) : undefined;\n\n            if (name) {\n                //If setting exports via \"module\" is in play,\n                //favor that over return value and exports. After that,\n                //favor a non-undefined return value over exports use.\n                if (cjsModule && cjsModule.exports !== undef &&\n                        cjsModule.exports !== defined[name]) {\n                    defined[name] = cjsModule.exports;\n                } else if (ret !== undef || !usingExports) {\n                    //Use the return value from the function.\n                    defined[name] = ret;\n                }\n            }\n        } else if (name) {\n            //May just be an object definition for the module. Only\n            //worry about defining if have a module name.\n            defined[name] = callback;\n        }\n    };\n\n    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\n        if (typeof deps === \"string\") {\n            if (handlers[deps]) {\n                //callback in this case is really relName\n                return handlers[deps](callback);\n            }\n            //Just return the module wanted. In this scenario, the\n            //deps arg is the module name, and second arg (if passed)\n            //is just the relName.\n            //Normalize module name, if it contains . or ..\n            return callDep(makeMap(deps, callback).f);\n        } else if (!deps.splice) {\n            //deps is a config object, not an array.\n            config = deps;\n            if (config.deps) {\n                req(config.deps, config.callback);\n            }\n            if (!callback) {\n                return;\n            }\n\n            if (callback.splice) {\n                //callback is an array, which means it is a dependency list.\n                //Adjust args if there are dependencies\n                deps = callback;\n                callback = relName;\n                relName = null;\n            } else {\n                deps = undef;\n            }\n        }\n\n        //Support require(['a'])\n        callback = callback || function () {};\n\n        //If relName is a function, it is an errback handler,\n        //so remove it.\n        if (typeof relName === 'function') {\n            relName = forceSync;\n            forceSync = alt;\n        }\n\n        //Simulate async callback;\n        if (forceSync) {\n            main(undef, deps, callback, relName);\n        } else {\n            //Using a non-zero value because of concern for what old browsers\n            //do, and latest browsers \"upgrade\" to 4 if lower value is used:\n            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\n            //If want a value immediately, use require('id') instead -- something\n            //that works in almond on the global level, but not guaranteed and\n            //unlikely to work in other AMD implementations.\n            setTimeout(function () {\n                main(undef, deps, callback, relName);\n            }, 4);\n        }\n\n        return req;\n    };\n\n    /**\n     * Just drops the config on the floor, but returns req in case\n     * the config return value is used.\n     */\n    req.config = function (cfg) {\n        return req(cfg);\n    };\n\n    /**\n     * Expose module registry for debugging and tooling\n     */\n    requirejs._defined = defined;\n\n    define = function (name, deps, callback) {\n        if (typeof name !== 'string') {\n            throw new Error('See almond README: incorrect module build, no module name');\n        }\n\n        //This module may not have dependencies\n        if (!deps.splice) {\n            //deps is not an array, so probably means\n            //an object literal or factory function for\n            //the value. Adjust args.\n            callback = deps;\n            deps = [];\n        }\n\n        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\n            waiting[name] = [name, deps, callback];\n        }\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n}());\n\ndefine(\"../lib/almond\", function(){});\n\n","define( 'models/fieldErrorModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\n\t} );\n\t\n\treturn model;\n} );\n","define( 'models/fieldErrorCollection',['models/fieldErrorModel'], function( errorModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: errorModel\n\t} );\n\treturn collection;\n} );\n","define( 'models/fieldModel',['models/fieldErrorCollection'], function( fieldErrorCollection ) {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tplaceholder: '',\n\t\t\tvalue: '',\n\t\t\tlabel_pos: '',\n\t\t\tclasses: 'ninja-forms-field',\n\t\t\treRender: false,\n\t\t\tmirror_field: false,\n\t\t\tconfirm_field: false,\n\t\t\tclean: true,\n\t\t\tdisabled: '',\n\t\t\tvisible: true,\n\t\t\tinvalid: false\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.set( 'formID', this.collection.options.formModel.get( 'id' ) );\n\t\t\tthis.listenTo( nfRadio.channel( 'form-' + this.get( 'formID' ) ), 'reset', this.resetModel );\n\n    \t\tthis.bind( 'change', this.changeModel, this );\n    \t\tthis.bind( 'change:value', this.changeValue, this );\n    \t\tthis.set( 'errors', new fieldErrorCollection() );\n\n    \t\t/*\n\t\t\t * Trigger an init event on two channels:\n\t\t\t * \n\t\t\t * fields\n\t\t\t * field-type\n\t\t\t *\n\t\t\t * This lets specific field types modify model attributes before anything uses them.\n\t\t\t */\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'init:model', this );\n\t\t\tnfRadio.channel( this.get( 'type' ) ).trigger( 'init:model', this );\n\t\t\tnfRadio.channel( 'fields-' + this.get( 'type' ) ).trigger( 'init:model', this );\n\n\t\t\tif( 'undefined' != this.get( 'parentType' ) ){\n\t\t\t\tnfRadio.channel( this.get( 'parentType' ) ).trigger( 'init:model', this );\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * When we load our form, fire another event for this field.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'form-' + this.get( 'formID' ) ), 'loaded', this.formLoaded );\n\t\t\n\t\t\t/*\n\t\t\t * Before we submit our form, send out a message so that this field can be modified if necessary.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'form-' + this.get( 'formID' ) ), 'before:submit', this.beforeSubmit );\n\t\t},\n\n\t\tchangeModel: function() {\n\t\t\tnfRadio.channel( 'field-' + this.get( 'id' ) ).trigger( 'change:model', this );\n\t\t\tnfRadio.channel( this.get( 'type' ) ).trigger( 'change:model', this );\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'change:model', this );\n\t\t},\n\n\t\tchangeValue: function() {\n\t\t\tnfRadio.channel( 'field-' + this.get( 'id' ) ).trigger( 'change:modelValue', this );\n\t\t\tnfRadio.channel( this.get( 'type' ) ).trigger( 'change:modelValue', this );\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'change:modelValue', this );\n\t\t},\n\n\t\taddWrapperClass: function( cl ) {\n\t\t\tthis.set( 'addWrapperClass', cl );\n\t\t},\n\n\t\tremoveWrapperClass: function( cl ) {\n\t\t\tthis.set( 'removeWrapperClass', cl );\n\t\t},\n\n\t\tsetInvalid: function( invalid ) {\n\t\t\tthis.set( 'invalid', invalid );\n\t\t},\n\n\t\tformLoaded: function() {\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'formLoaded', this );\n\t\t\tnfRadio.channel( 'fields-' + this.get( 'type' ) ).trigger( 'formLoaded', this );\n\t\t},\n\n\t\tbeforeSubmit: function( formModel ) {\n\t\t\tnfRadio.channel( this.get( 'type' ) ).trigger( 'before:submit', this );\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'before:submit', this );\n\t\t}\n\n\t} );\n\n\treturn model;\n} );\n\n","define( 'models/fieldCollection',['models/fieldModel'], function( fieldModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: fieldModel,\n\t\tcomparator: 'order',\n\n\t\tinitialize: function( models, options ) {\n\t\t\tthis.options = options;\n            this.on( 'reset', function( fieldCollection ){\n                nfRadio.channel( 'fields' ).trigger( 'reset:collection', fieldCollection );\n            }, this );\n\t\t},\n\n\t\tvalidateFields: function() {\n\t\t\t_.each( this.models, function( fieldModel ) {\n\t\t\t\tnfRadio.channel( 'submit' ).trigger( 'validate:field', fieldModel );\n\t\t\t}, this );\n\t\t},\n\n\t\tshowFields: function() {\n\t\t\tthis.invoke( 'set', { visible: true } );\n            this.invoke( function() {\n                this.trigger( 'change:value', this );\n            });\n\t\t},\n\n\t\thideFields: function() {\n\t\t\tthis.invoke( 'set', { visible: false } );\n            this.invoke( function() {\n                this.trigger( 'change:value', this );\n            });\n\t\t}\n\t} );\n\treturn collection;\n} );\n\n","define( 'models/formErrorModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\n\t} );\n\t\n\treturn model;\n} );\n","define( 'models/formErrorCollection',['models/formErrorModel'], function( errorModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: errorModel\n\t} );\n\treturn collection;\n} );\n","define( 'models/formModel',[\n\t'models/fieldCollection',\n\t'models/formErrorCollection'\n\t], function(\n\t\tFieldCollection,\n\t\tErrorCollection\n\t) {\n\tvar model = Backbone.Model.extend({\n\t\tdefaults: {\n\t\t\tbeforeForm: '',\n\t\t\tafterForm: '',\n\t\t\tbeforeFields: '',\n\t\t\tafterFields: '',\n\t\t\twrapper_class: '',\n\t\t\telement_class: '',\n\t\t\thp: '',\n\t\t\tfieldErrors: {},\n\t\t\textra: {}\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\t// Loop over settings and map to attributes\n\t\t\t_.each( this.get( 'settings' ), function( value, setting ) {\n\t\t\t\tthis.set( setting, value );\n\t\t\t}, this );\n\n\t\t\tthis.set( 'loadedFields', this.get( 'fields' ) );\n\t\t\tthis.set( 'fields', new FieldCollection( this.get( 'fields' ), { formModel: this } ) );\n\t\t\tthis.set( 'errors', new ErrorCollection() );\n\n\t\t\t/*\n\t\t\t * Send out a radio message so that anyone who wants to filter our content data can register their filters.\n\t\t\t */\n\t\t\tnfRadio.channel( 'form' ).trigger( 'before:filterData', this );\n\n\t\t\t/*\n\t\t\t * Set our formContentData to our form setting 'formContentData'\n\t\t\t */\n\t\t\tvar formContentData = this.get( 'formContentData' );\n\n\t\t\t/*\n\t\t\t * The formContentData variable used to be fieldContentsData.\n\t\t\t * If we don't have a 'formContentData' setting, check to see if we have an old 'fieldContentsData'.\n\t\t\t * \n\t\t\t * TODO: This is for backwards compatibility and should be removed eventually. \n\t\t\t */\n\t\t\tif ( ! formContentData ) {\n\t\t\t\tformContentData = this.get( 'fieldContentsData' );\n\t\t\t}\n\t\t\t\n\t\t\tvar formContentLoadFilters = nfRadio.channel( 'formContent' ).request( 'get:loadFilters' );\n\t\t\t/* \n\t\t\t* Get our first filter, this will be the one with the highest priority.\n\t\t\t*/\n\t\t\tvar sortedArray = _.without( formContentLoadFilters, undefined );\n\t\t\tvar callback = _.first( sortedArray );\n\t\t\tformContentData = callback( formContentData, this, this );\n\t\t\t\n\t\t\tthis.set( 'formContentData', formContentData );\n\n\t\t\tnfRadio.channel( 'forms' ).trigger( 'init:model', this );\n\t\t\tnfRadio.channel( 'form-' + this.get( 'id' ) ).trigger( 'init:model', this );\n\n\t\t\t// Fields\n\t\t\tnfRadio.channel( 'form-' + this.get( 'id' ) ).reply( 'get:fieldByKey', this.getFieldByKey, this );\n\n\t\t\t// Form Errors\n\t\t\tnfRadio.channel( 'form-' + this.get( 'id' ) ).reply( 'add:error',    this.addError, this    );\n\t\t\tnfRadio.channel( 'form-' + this.get( 'id' ) ).reply( 'remove:error', this.removeError, this );\n\n\t\t\t// Extra Data\n\t\t\tnfRadio.channel( 'form-' + this.get( 'id' ) ).reply( 'get:extra',    this.getExtra,    this );\n\t\t\tnfRadio.channel( 'form-' + this.get( 'id' ) ).reply( 'add:extra',    this.addExtra,    this );\n\t\t\tnfRadio.channel( 'form-' + this.get( 'id' ) ).reply( 'remove:extra', this.removeExtra, this );\n\t\t\n\t\t\t// Respond to requests to get this model.\n\t\t\tnfRadio.channel( 'form-' + this.get( 'id' ) ).reply( 'get:form', \t this.getForm, \t   this );\n\n\t\t\tnfRadio.channel( 'form' ).trigger( 'loaded', this );\n\t\t\tnfRadio.channel( 'form' ).trigger( 'after:loaded', this );\n\t\t\tnfRadio.channel( 'form-' + this.get( 'id' ) ).trigger( 'loaded', \t this );\n\t\t},\n\n\t\t/*\n\t\t |--------------------------------------------------------------------------\n\t\t | Fields\n\t\t |--------------------------------------------------------------------------\n\t\t */\n\n\t\tgetFieldByKey: function( key ) {\n\t\t\treturn this.get( 'fields' ).findWhere( { key: key } );\n\t\t},\n\n\t\t/*\n\t\t |--------------------------------------------------------------------------\n\t\t | Form Errors\n\t\t |--------------------------------------------------------------------------\n\t\t */\n\n\t\taddError: function( id, msg ) {\n\t\t\tvar errors = this.get( 'errors' );\n\t\t\terrors.add( { id: id, msg: msg } );\n\t\t\tnfRadio.channel( 'form-' + this.get( 'id' ) ).trigger( 'add:error', this, id, msg );\n\t\t},\n\n\t\tremoveError: function( id ) {\n\t\t\tvar errors = this.get( 'errors' );\n\t\t\tvar errorModel = errors.get( id );\n\t\t\terrors.remove( errorModel );\n\t\t\tnfRadio.channel( 'form-' + this.get( 'id' ) ).trigger( 'remove:error', this, id );\n\t\t},\n\n\t\t/*\n\t\t |--------------------------------------------------------------------------\n\t\t | Extra Data\n\t\t |--------------------------------------------------------------------------\n\t\t */\n\n\t\tgetExtra: function( key ) {\n\t\t\tvar extraData = this.get( 'extra' );\n\t\t\tif( 'undefined' == typeof key ) return extraData;\n\t\t\treturn extraData[ key ];\n\t\t},\n\n\t\taddExtra: function( key, value ) {\n\t\t\tvar extraData = this.get( 'extra' );\n\t\t\textraData[ key ] = value;\n\t\t\tnfRadio.channel( 'form-' + this.get( 'id' ) ).trigger( 'add:extra', this, key, value );\n\t\t},\n\n\t\tremoveExtra: function( key ) {\n\t\t\tvar extraData = this.get( 'extra' );\n\t\t\tdelete extraData[ key ];\n\t\t\tnfRadio.channel( 'form-' + this.get( 'id' ) ).trigger( 'remove:extra', this, key );\n\t\t},\n\n\t\t/*\n\t\t |--------------------------------------------------------------------------\n\t\t | Get this form\n\t\t |--------------------------------------------------------------------------\n\t\t */\n\t\tgetForm: function() {\n\t\t\treturn this;\n\t\t}\n\t} );\n\n\treturn model;\n} );\n","define( 'models/formCollection',['models/formModel'], function( formModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: formModel\n\t} );\n\treturn collection;\n} );\n","/*\n * Handles setting up our form.\n *\n * Holds a collection of our fields.\n * Replies to requests for field data.\n * Updates field models.\n */\ndefine('controllers/formData',['models/formModel', 'models/formCollection', 'models/fieldCollection', 'models/formErrorCollection'], function( FormModel, FormCollection, FieldCollection, ErrorCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\n\t\t\t/*\n\t\t\t * Setup our field collections.\n\t\t\t */\n\t\t\tvar that = this;\n\n\t\t\t/*\n\t\t\t * Initialize our form collection (incase we have multiple forms on the page)\n\t\t\t */\n\t\t\tthis.collection = new FormCollection( nfForms );\n\n\t\t\tnfRadio.channel( 'forms' ).trigger( 'loaded', this.collection );\n\t\t\tnfRadio.channel( 'app' ).trigger( 'forms:loaded', this.collection );\n\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:form', this.getForm, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:forms', this.getForms, this );\n\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:field', this.getField, this );\n\t\t},\n\n\t\tgetForm: function( id ) {\n\t\t\treturn this.collection.get( id );\n\t\t},\n\n\t\tgetForms: function() {\n\t\t\treturn this.collection;\n\t\t},\n\n\t\tgetField: function( id ) {\n\t\t\tvar model = false;\n\t\t\t\n\t\t\t_.each( this.collection.models, function( form ) {\n\t\t\t\tif ( ! model ) {\n\t\t\t\t\tmodel = form.get( 'fields' ).get( id );\t\n\t\t\t\t}\t\t\t\n\t\t\t} );\n\t\t\treturn model;\n\t\t}\n\t});\n\n\treturn controller;\n} );\n\n","define('controllers/fieldError',['models/fieldErrorModel'], function( fieldErrorModel ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'fields' ).reply( 'add:error', this.addError );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'remove:error', this.removeError );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:error', this.getError );\n\t\t},\n\n\t\taddError: function( targetID, id, msg ) {\n\t\t\tvar model = nfRadio.channel( 'fields' ).request( 'get:field', targetID );\n\n\t\t\tif( 'undefined' == typeof model ) return;\n\n\t\t\tvar errors = model.get( 'errors' );\n\t\t\terrors.add( { 'id': id, 'msg' : msg } );\n\t\t\tmodel.set( 'errors', errors );\n\t\t\tmodel.trigger( 'change:errors', model );\n\t\t\tmodel.set( 'clean', false );\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'add:error', model, id, msg );\n\t\t},\n\n\t\tremoveError: function( targetID, id ) {\n\t\t\tvar model = nfRadio.channel( 'fields' ).request( 'get:field', targetID );\n\n\t\t\tif( 'undefined' == typeof model ) return;\n\n\t\t\tvar errors = model.get( 'errors' );\n\t\t\tvar targetError = errors.get( id );\n\t\t\tif ( 'undefined' != typeof targetError ) {\n\t\t\t\terrors.remove( targetError );\n\t\t\t\tmodel.set( 'errors', errors );\n\t\t\t\tmodel.trigger( 'change:errors', model );\n\t\t\t\tnfRadio.channel( 'fields' ).trigger( 'remove:error', model, id );\n\t\t\t}\n\t\t},\n\n\t\tgetError: function( targetID, id ) {\n\t\t\tvar model = nfRadio.channel( 'fields' ).request( 'get:field', targetID );\n\t\t\tvar errors = model.get( 'errors' );\n\t\t\tvar targetError = errors.get( id );\n\t\t\tif ( 'undefined' != targetError ) {\n\t\t\t\treturn targetError;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Controller responsible for replying to a Radio request stating that a field has been changed.\n *\n * This controller sends out a message to the field-specific channel, the field type channel,\n * and the public fields channel so that the data model can be updated.\n */\n\ndefine('controllers/changeField',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * Reply to our request for changing a field.\n\t\t\t */\n\t\t\tnfRadio.channel( 'nfAdmin' ).reply( 'change:field', this.changeField );\n\n\t\t\t/*\n\t\t\t * If we blur our field, set the model attribute of 'clean' to false.\n\t\t\t * 'clean' tracks whether or not the user has every interacted with this element.\n\t\t\t * Some validation, like required, uses this to decide whether or not to add an error.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'blur:field', this.blurField );\n\t\t},\n\n\t\tchangeField: function( el, model ) {\n\t\t\t// Get our current value.\n\t\t\tvar value = nfRadio.channel( model.get( 'type' ) ).request( 'before:updateField', el, model );\n\t\t\tvalue = ( 'undefined' != typeof value ) ? value : nfRadio.channel( model.get( 'parentType' ) ).request( 'before:updateField', el, model );\n\t\t\tvalue = ( 'undefined' != typeof value ) ? value : jQuery( el ).val();\n\n\t\t\t// Set our 'isUpdated' flag to false.\n\t\t\tmodel.set( 'isUpdated', false );\n\n\t\t\t// Set our 'clean' flag to false.\n\t\t\tmodel.set( 'clean', false );\n\n\t\t\t/*\n\t\t\t * Send out a message saying that we've changed a field.\n\t\t\t * The first channel is field id/key specific.\n\t\t\t * The second channel is the field type, i.e. text, email, radio\n\t\t\t * The third channel is a generic 'field' channel.\n\t\t\t *\n\t\t\t * If the submitted value you wish to store in the data model isn't the same as the value received above,\n\t\t\t * you can set that model in the actions below and set the 'isUpdated' model attribute to true.\n\t\t\t * i.e. model.set( 'isUpdated', true );\n\t\t\t */\n\t\t\tnfRadio.channel( 'field-' + model.get( 'id' ) ).trigger( 'change:field', el, model );\n\t\t\tnfRadio.channel( model.get( 'type' ) ).trigger( 'change:field', el, model );\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'change:field', el, model );\n\n\t\t\t/*\n\t\t\t * Send a request out on our nfAdmin channel to update our field model.\n\t\t\t * If the field model has a 'isUpdated' property of false, nothing will be updated.\n\t\t\t */\n\t\t\tnfRadio.channel( 'nfAdmin' ).request( 'update:field', model, value );\n\t\t},\n\n\t\tblurField: function( el, model ) {\n\t\t\t// Set our 'clean' flag to false.\n\t\t\tmodel.set( 'clean', false );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","define('controllers/changeEmail',[], function() {\n\tvar radioChannel = nfRadio.channel( 'email' );\n\t// var emailReg = /^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$/i;\n\tvar emailReg = /^.+@.+\\..+/i;\n\tvar errorID = 'invalid-email';\n\n\tvar controller = Marionette.Object.extend( {\n\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( radioChannel, 'change:modelValue', this.onChangeModelValue );\n\t\t\tthis.listenTo( radioChannel, 'keyup:field', this.emailKeyup );\n\t\t\tthis.listenTo( radioChannel, 'blur:field', this.onBlurField );\n\t\t},\n\n\t\tonChangeModelValue: function( model ) {\n\t\t\tvar value = model.get( 'value' );\n\t\t\tvar fieldID = model.get( 'id' );\n\t\t\tthis.emailChange( value, fieldID );\n\t\t},\n\n\t\tonBlurField: function( el, model ) {\n\t\t\tvar value = jQuery( el ).val();\n\t\t\tvar fieldID = model.get( 'id' );\n\t\t\tthis.emailChange( value, fieldID );\n\t\t},\n\n\t\temailChange: function( value, fieldID ) {\n\t\t\tif ( 0 < value.length ) {\n\t\t\t\tif( emailReg.test( value ) ) {\n\t\t\t\t\tnfRadio.channel( 'fields' ).request( 'remove:error', fieldID, errorID );\n\t\t\t\t} else {\n\t\t\t\t\tvar fieldModel = nfRadio.channel( 'fields' ).request( 'get:field', fieldID );\n\t\t\t\t\tvar formModel  = nfRadio.channel( 'app'    ).request( 'get:form',  fieldModel.get( 'formID' ) );\n\t\t\t\t\tnfRadio.channel( 'fields' ).request( 'add:error', fieldID, errorID, formModel.get( 'settings' ).changeEmailErrorMsg );\n\t\t\t\t}\t\t\t\t\n\t\t\t} else {\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'remove:error', fieldID, errorID );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * When a user types inside of an email field, track their keypresses and add the appropriate class.\n\t\t * If the value validates as an email, add a class of nf-pass\n\t\t * If the value does not validate as email, add a class of nf-fail\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  {object} el    Element that triggered the keyup event.\n\t\t * @param  {object} model Model connected to the element that triggered the event\n\t\t * @return {void}\n\t\t */\n\t\temailKeyup: function( el, model, keyCode ) {\n\t\t\t\n\t\t\t/*\n\t\t\t * If we pressed the 'tab' key to get to this field, return false.\n\t\t\t */\n\t\t\tif ( 9 == keyCode ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t/*\n\t\t\t * Get the current value from our element.\n\t\t\t */\n\t\t\tvar value = jQuery( el ).val();\n\n\t\t\t/*\n\t\t\t * Get our current ID\n\t\t\t */\n\t\t\tvar fieldID = model.get( 'id' );\n\n\t\t\t/*\n\t\t\t * Check our value to see if it is a valid email.\n\t\t\t */\n\t\t\n\t\t\t\n\t\t\tif ( 0 == value.length ) {\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'remove:error', fieldID, errorID );\n\t\t\t} else if ( ! emailReg.test( value ) && ! model.get( 'clean' ) ) {\n\n\t\t\t\tvar fieldModel = nfRadio.channel( 'fields' ).request( 'get:field', fieldID );\n\t\t\t\tvar formModel  = nfRadio.channel( 'app'    ).request( 'get:form',  fieldModel.get( 'formID' ) );\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'add:error', fieldID, errorID, formModel.get( 'settings' ).changeEmailErrorMsg );\n\n\t\t\t\tmodel.removeWrapperClass( 'nf-pass' );\n\t\t\t} else if ( emailReg.test( value ) ) {\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'remove:error', fieldID, errorID );\n\t\t\t\t/*\n\t\t\t\t * Add nf-pass class to the wrapper.\n\t\t\t\t */\n\t\t\t\tmodel.addWrapperClass( 'nf-pass' );\n\t\t\t\tmodel.set( 'clean', false );\n\t\t\t}\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","define('controllers/fieldCheckbox',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * When we init our checkbox model, register our renderClasses() function\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'checkbox' ), 'init:model', this.registerRenderClasses );\n\n\t\t\tnfRadio.channel( 'checkbox' ).reply( 'validate:required', this.validateRequired );\n\t\t\tnfRadio.channel( 'checkbox' ).reply( 'validate:modelData', this.validateModelData );\n            nfRadio.channel( 'checkbox' ).reply( 'before:updateField', this.beforeUpdateField, this );\n            nfRadio.channel( 'checkbox' ).reply( 'get:calcValue', this.getCalcValue, this );\n\t\t},\n\n\t\tbeforeUpdateField: function( el, model ) {\n\t\t\tvar checked = jQuery( el ).prop( 'checked' );\n\t\t\tif ( checked ) {\n\t\t\t\tvar value = 1;\n\t\t\t\tjQuery( el ).addClass( 'nf-checked' );\n\t\t\t\tjQuery( el ).closest( '.field-wrap' ).find( 'label[for=\"' + jQuery( el ).prop( 'id' ) + '\"]' ).addClass( 'nf-checked-label' );\n\t\t\t} else {\n\t\t\t\tvar value = 0;\n\t\t\t\tjQuery( el ).removeClass( 'nf-checked' );\n\t\t\t\tjQuery( el ).closest( '.field-wrap' ).find( 'label[for=\"' + jQuery( el ).prop( 'id' ) + '\"]' ).removeClass( 'nf-checked-label' );\n\t\t\t}\n\n\t\t\treturn value;\n\t\t},\n\n\t\tvalidateRequired: function( el, model ) {\n\t\t\treturn el[0].checked;\n\t\t},\n\n\t\tvalidateModelData: function( model ) {\n\t\t\treturn model.get( 'value' ) != 0;\n\t\t},\n\n\t\tgetCalcValue: function( fieldModel ) {\n\t\t\tif ( 1 == fieldModel.get( 'value' ) ) {\n\t\t\t\tcalcValue = fieldModel.get( 'checked_calc_value' );\n\t\t\t} else {\n\t\t\t\tcalcValue = fieldModel.get( 'unchecked_calc_value' );\n\t\t\t}\n\n\t\t\treturn calcValue;\n\t\t},\n\n\t\tregisterRenderClasses: function( model ) {\n\t\t\tif ( 'checked' == model.get( 'default_value' ) ) {\n\t\t\t\tmodel.set( 'value', 1 );\n\t\t\t} else {\n\t\t\t\tmodel.set( 'value', 0 );\n\t\t\t}\n\t\t\tmodel.set( 'customClasses', this.customClasses );\n\t\t\tmodel.set( 'customLabelClasses', this.customLabelClasses );\n\t\t\tmodel.set( 'maybeChecked', this.maybeChecked );\n\t\t},\n\n\t\tcustomClasses: function( classes ) {\n\t\t\tif ( 1 == this.value || ( this.clean && 'undefined' != typeof this.default_value && 'checked' == this.default_value ) ) {\n\t\t\t\tclasses += ' nf-checked';\n\t\t\t} else {\n\t\t\t\tclasses.replace( 'nf-checked', '' );\n\t\t\t}\n\t\t\treturn classes;\n\t\t},\n\n\t\tcustomLabelClasses: function( classes ) {\n\t\t\tif ( 1 == this.value || ( this.clean && 'undefined' != typeof this.default_value && 'checked' == this.default_value ) ) {\n\t\t\t\tclasses += ' nf-checked-label';\n\t\t\t} else {\n\t\t\t\tclasses.replace( 'nf-checked-label', '' );\n\t\t\t}\n\t\t\treturn classes;\n\t\t},\n\n\t\tmaybeChecked: function() {\n\t\t\tif ( 1 == this.value || ( this.clean && 'undefined' != typeof this.default_value && 'checked' == this.default_value ) ) {\n\t\t\t\treturn ' checked';\n\t\t\t} else {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","define('controllers/fieldCheckboxList',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'listcheckbox' ), 'init:model', this.register );\n            this.listenTo( nfRadio.channel( 'terms' ), 'init:model', this.register );\n            nfRadio.channel( 'listcheckbox' ).reply( 'before:updateField', this.beforeUpdateField, this );\n            nfRadio.channel( 'terms' ).reply( 'before:updateField', this.beforeUpdateField, this );\n            nfRadio.channel( 'listcheckbox' ).reply( 'get:calcValue', this.getCalcValue, this );\n            nfRadio.channel( 'terms' ).reply( 'get:calcValue', this.getCalcValue, this );\n        },\n\n        register: function( model ) {\n            model.set( 'renderOptions', this.renderOptions );\n            model.set( 'renderOtherText', this.renderOtherText );\n            model.set( 'selected', [] );\n\n            /*\n             * When we init a model, we need to set our 'value' to the selected option's value.\n             * This is the list equivalent of a 'default value'.\n             */ \n            if ( 0 != model.get( 'options' ).length ) {\n                var selected = _.filter( model.get( 'options' ), function( opt ) { return 1 == opt.selected } );\n                selected = _.map( selected, function( opt ) { return opt.value } );\n            }\n\n            /*\n            * This part is re-worked to take into account custom user-meta\n            * values for fields.\n             */\n\t        var savedVal = model.get( 'value' );\n\t        if( 'undefined' !== typeof savedVal && Array.isArray( savedVal ) ) {\n\t\t        model.set( 'value', savedVal );\n\t        } else if ( 'undefined' != typeof selected ) {\n\t\t        model.set( 'value', selected );\n\t        }\n        },\n\n        renderOptions: function() {\n            var html = '';\n\n            if ( '' == this.value || ( Array.isArray( this.value ) && 0 < this.value.length )\n                || 0 < this.value.length ) {\n                var valueFound = true;\n            } else {\n                var valueFound = false;\n            }\n\n            _.each( this.options, function( option, index ) {\n                if( Array.isArray( this.value ) ) {\n                \tif( Array.isArray( this.value[ 0 ] ) && -1 !== _.indexOf( this.value[ 0 ], option.value ) ) {\n                \t\tvalueFound = true;\n\t                }\n                    else if( _.indexOf( this.value, option.value ) ) {\n                        valueFound = true;\n\t                }\n                }\n\n                if ( option.value == this.value ) {\n                    valueFound = true;\n                }\n\n                /*\n                 * TODO: This is a bandaid fix for making sure that each option has a \"visible\" property.\n                 * This should be moved to creation so that when an option is added, it has a visible property by default.\n                 */\n                if ( 'undefined' == typeof option.visible ) {\n                    option.visible = true;\n                }\n\n                option.fieldID = this.id;\n                option.classes = this.classes;\n                option.index = index;\n\n                var selected = false;\n\t\t\t\t/*\n\t\t\t\t* This part has been re-worked to account for values passed in\n\t\t\t\t* via custom user-meta ( a la User Mgmt add-on)\n\t\t\t\t */\n\t            if( Array.isArray( this.value ) && 0 < this.value.length ) {\n\t            \tif ( -1 !== _.indexOf( this.value[ 0 ].split( ',' ), option.value )\n\t\t                || -1 !== _.indexOf( this.value, option.value ) ) {\n\t\t\t            selected = true;\n\t            \t}\n\t            } else if ( ! _.isArray( this.value ) && option.value == this.value ) {\n\t\t            selected = true;\n\t            } else if ( ( 1 == option.selected && this.clean ) && 'undefined' === typeof this.value ) {\n\t\t            selected = true;\n\t            }\n\n\n                // else if( ( option.selected && \"0\" != option.selected ) && this.clean ){\n\t            //     isSelected = true;\n\t            // } else {\n\t            //     var testValues = _.map( this.value, function( value ) {\n\t            //         return value.toString();\n\t            //     } );\n\t            //\n\t            //     option.isSelected = ( -1 != testValues.indexOf( option.value.toString() ) );\n\t            // }\n\t            option.selected = selected;\n\t            option.isSelected = selected;\n                var template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-field-listcheckbox-option' );\n                html += template( option );\n            }, this );\n\n            if ( 1 == this.show_other ) {\n                if ( 'nf-other' == this.value ) {\n                    valueFound = false;\n                }\n                var data = {\n                    fieldID: this.id,\n                    classes: this.classes,\n                    currentValue: this.value,\n                    renderOtherText: this.renderOtherText,\n                    valueFound: valueFound\n                };\n\n                var template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-field-listcheckbox-other' );\n                html += template( data );\n\n            }\n\n            return html;\n        },\n\n        renderOtherText: function() {\n            if ( 'nf-other' == this.currentValue || ! this.valueFound ) {\n                if ( 'nf-other' == this.currentValue ) {\n                    this.currentValue = '';\n                }\n                var data = {\n                    fieldID: this.fieldID,\n                    classes: this.classes,\n                    currentValue: this.currentValue\n                };\n                var template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-field-listcheckbox-other-text' );\n                return template( data );\n            }\n        },\n\n        getCalcValue: function( fieldModel ) {\n            var calc_value = 0;\n            var options = fieldModel.get( 'options' );\n            if ( 0 != options.length ) {\n                _.each( fieldModel.get( 'value' ), function( val ) {\n                    var tmp_opt = _.find( options, function( opt ) { return opt.value == val } );\n                    calc_value = Number( calc_value ) + Number( tmp_opt.calc );\n                } );\n            }\n            return calc_value;\n        },\n\n        beforeUpdateField: function( el, model ) {\n            var selected = model.get( 'value' ) || [];\n            if ( typeof selected == 'string' ) selected = [ selected ];\n\n            var value = jQuery( el ).val();\n            var checked = jQuery( el ).prop( 'checked' );\n            if ( checked ) {\n                selected.push( value );\n                jQuery( el ).addClass( 'nf-checked' );\n                jQuery( el ).parent().find( 'label[for=\"' + jQuery( el ).prop( 'id' ) + '\"]' ).addClass( 'nf-checked-label' );\n            } else {\n                jQuery( el ).removeClass( 'nf-checked' );\n                jQuery( el ).parent().find( 'label[for=\"' + jQuery( el ).prop( 'id' ) + '\"]' ).removeClass( 'nf-checked-label' );\n                var i = selected.indexOf( value );\n                if( -1 != i ){\n                    selected.splice( i, 1 );\n                } else if ( Array.isArray( selected ) ) {\n                \tvar optionArray = selected[0].split( ',' );\n                \tvar valueIndex = optionArray.indexOf( value );\n                \tif( -1 !== valueIndex) {\n                \t\toptionArray.splice( valueIndex, 1 );\n\t                }\n                \tselected = optionArray.join( ',' );\n                }\n            }\n\n            // if ( 1 == model.get( 'show_other' ) ) {\n            //     model.set( 'reRender', true );\n            // }\n\n            return _.clone( selected );\n        }\n    });\n\n    return controller;\n} );\n","define('controllers/fieldRadio',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'listradio' ), 'change:modelValue', this.changeModelValue );\n\t\t\tthis.listenTo( nfRadio.channel( 'listradio' ), 'init:model', this.register );\n\t\t\tnfRadio.channel( 'listradio' ).reply( 'get:calcValue', this.getCalcValue, this );\n\t\t\t\n\t\t\tthis.listenTo( nfRadio.channel( 'listradio' ), 'change:field', this.updateCheckedClass, this );\n\t\t},\n\n\t\tregister: function( model ) {\n\t\t\tmodel.set( 'renderOptions', this.renderOptions );\n\t\t\tmodel.set( 'renderOtherText', this.renderOtherText );\n\t\t\t/*\n\t\t\t * When we init a model, we need to set our 'value' to the selected option's value.\n\t\t\t * This is the list equivalent of a 'default value'.\n\t\t\t */ \n\t\t\tif ( 0 != model.get( 'options' ).length ) {\n\t\t\t\t/*\n\t\t\t\t * Check to see if we have a selected value.\n\t\t\t\t */\n\t\t\t\tvar selected = _.find( model.get( 'options' ), function( opt ) { return 1 == opt.selected } );\n\n\t\t\t\tif ( 'undefined' != typeof selected ) {\n\t\t\t\t\tmodel.set( 'value', selected.value );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tchangeModelValue: function( model ) {\n\t\t\tif ( 1 == model.get( 'show_other' ) ) {\n\t\t\t\t// model.set( 'reRender', true );\n\t\t\t\tmodel.trigger( 'reRender');\n\t\t\t}\n\t\t},\n\n\t\trenderOptions: function() {\n\t\t\tvar html = '';\n\t\t\tif ( '' == this.value ) {\n\t\t\t\tvar valueFound = true;\n\t\t\t} else {\n\t\t\t\tvar valueFound = false;\n\t\t\t}\n\t\t\t\n\t\t\t_.each( this.options, function( option, index ) {\n\t\t\t\tif ( option.value == this.value ) {\n\t\t\t\t\tvalueFound = true;\n\t\t\t\t}\n\n\t\t\t\t/*\n                 * TODO: This is a bandaid fix for making sure that each option has a \"visible\" property.\n                 * This should be moved to creation so that when an option is added, it has a visible property by default.\n                 */\n                if ( 'undefined' == typeof option.visible ) {\n                    option.visible = true;\n                }\n\n                option.selected = false;\n\t\t\t\toption.fieldID = this.id;\n\t\t\t\toption.classes = this.classes;\n\t\t\t\toption.currentValue = this.value;\n\t\t\t\toption.index = index;\n\n\t\t\t\t/*\n\t\t\t\t * If we haven't edited this field yet, use the default checked\n\t\t\t\t */\n\t\t\t\tif ( this.clean && 1 == this.selected ) {\n\t\t\t\t\toption.selected = true;\n\t\t\t\t} else if ( this.value == option.value ) {\n\t\t\t\t\toption.selected = true;\n\t\t\t\t} else {\n\t\t\t\t\toption.selected = false;\n\t\t\t\t}\n\n\t\t\t\tvar template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-field-listradio-option' );\n\n\t\t\t\thtml += template( option );\n\t\t\t}, this );\n\n\t\t\tif ( 1 == this.show_other ) {\n\t\t\t\tif ( 'nf-other' == this.value ) {\n\t\t\t\t\tvalueFound = false;\n\t\t\t\t}\n\t\t\t\tvar data = {\n\t\t\t\t\tfieldID: this.id,\n\t\t\t\t\tclasses: this.classes,\n\t\t\t\t\tcurrentValue: this.value,\n\t\t\t\t\trenderOtherText: this.renderOtherText,\n\t\t\t\t\tvalueFound: valueFound\n\t\t\t\t};\n\t\t\t\tvar template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-field-listradio-other' );\n\t\t\t\thtml += template( data );\n\t\t\t}\n\n\t\t\treturn html;\n\t\t},\n\n\t\trenderOtherText: function() {\n\t\t\tif ( 'nf-other' == this.currentValue || ! this.valueFound ) {\n\t\t\t\tif ( 'nf-other' == this.currentValue ) {\n\t\t\t\t\tthis.currentValue = '';\n\t\t\t\t}\n\t\t\t\tvar data = {\n\t\t\t\t\tfieldID: this.fieldID,\n\t\t\t\t\tclasses: this.classes,\n\t\t\t\t\tcurrentValue: this.currentValue\n\t\t\t\t};\n\t\t\t\tvar template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-field-listradio-other-text' );\n\t\t\t\treturn template( data );\n\t\t\t}\n\t\t},\n\n\t\tgetCalcValue: function( fieldModel ) {\n\t\t\t\n            /*\n             * Default to 0, in case we have no selection.\n             */\n            var calc_value = 0;\n            \n\t\t\tif ( 0 != fieldModel.get( 'options' ).length ) {\n\t\t\t\t/*\n\t\t\t\t * Check to see if we have a selected value.\n\t\t\t\t */\n\t\t\t\tvar selected = _.find( fieldModel.get( 'options' ), function( opt ) { return fieldModel.get( 'value' ) == opt.value } );\n\t\t\t\tif ( 'undefined' !== typeof selected ) {\n                    calc_value = selected.calc;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\treturn calc_value;\n\t\t},\n\n\t\tupdateCheckedClass: function( el, model ) {\n\t\t\tjQuery( '[name=\"' + jQuery( el ).attr( 'name' ) + '\"]' ).removeClass( 'nf-checked' );\n\t\t\tjQuery( el ).closest( 'ul' ).find( 'label' ).removeClass( 'nf-checked-label' );\n\t\t\tjQuery( el ).addClass( 'nf-checked' );\n\t\t\tjQuery( el ).closest( 'li' ).find( 'label[for=\"' + jQuery( el ).prop( 'id' ) + '\"]' ).addClass( 'nf-checked-label' );\n\n\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","define('controllers/fieldNumber',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'number' ), 'init:model', this.maybeMinDefault );\n            this.listenTo( nfRadio.channel( 'number' ), 'keyup:field', this.validateMinMax );\n        },\n\n        maybeMinDefault: function( model ) {\n\n            if( '' == model.get( 'value' ) ){\n                var min = model.get( 'num_min' );\n                model.set( 'value', min );\n            }\n        },\n\n        validateMinMax: function( el, model ) {\n            var $el = jQuery( el );\n            var value = parseFloat( $el.val() );\n            var min = $el.attr( 'min' );\n            var max = $el.attr( 'max' );\n            var step = parseFloat( $el.attr( 'step' ) );\n\n            if( min && value < min ){\n                var fieldModel = nfRadio.channel( 'fields' ).request( 'get:field', model.get( 'id' ) );\n                var formModel  = nfRadio.channel( 'app'    ).request( 'get:form',  fieldModel.get( 'formID' ) );\n                nfRadio.channel( 'fields' ).request( 'add:error', model.get( 'id' ), 'number-min', formModel.get( 'settings' ).fieldNumberNumMinError );\n            } else {\n                nfRadio.channel( 'fields' ).request( 'remove:error', model.get( 'id' ), 'number-min' );\n            }\n\n            if ( max && value > max ){\n                var fieldModel = nfRadio.channel( 'fields' ).request( 'get:field', model.get( 'id' ) );\n                var formModel  = nfRadio.channel( 'app'    ).request( 'get:form',  fieldModel.get( 'formID' ) );\n                nfRadio.channel( 'fields' ).request( 'add:error', model.get( 'id' ), 'number-max', formModel.get( 'settings' ).fieldNumberNumMaxError );\n            } else {\n                nfRadio.channel( 'fields' ).request( 'remove:error', model.get( 'id' ), 'number-max' );\n            }\n\n            var testValue = Math.round( parseFloat( value ) * 1000000000 );\n            var testStep = Math.round( parseFloat( step ) * 1000000000  );\n\n            if( value && 0 !== testValue % testStep ){\n                var fieldModel = nfRadio.channel( 'fields' ).request( 'get:field', model.get( 'id' ) );\n                var formModel  = nfRadio.channel( 'app'    ).request( 'get:form',  fieldModel.get( 'formID' ) );\n                nfRadio.channel( 'fields' ).request( 'add:error', model.get( 'id' ), 'number-step', formModel.get( 'settings' ).fieldNumberIncrementBy + step );\n            } else {\n                nfRadio.channel( 'fields' ).request( 'remove:error', model.get( 'id' ), 'number-step' );\n            }\n        }\n\n    });\n\n    return controller;\n} );\n","define( 'controllers/mirrorField',[], function() {\n\tvar radioChannel = nfRadio.channel( 'fields' );\n\n\tvar controller = Marionette.Object.extend( {\n\t\tlisteningModel: '',\n\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( radioChannel, 'init:model', this.registerMirror );\n\t\t},\n\n\t\tregisterMirror: function( model ) {\n\t\t\tif ( model.get( 'mirror_field' ) ) {\n\t\t\t\tthis.listeningModel = model;\n\t\t\t\tvar targetID = model.get( 'mirror_field' );\n\t\t\t\tthis.listenTo( nfRadio.channel( 'field-' + targetID ), 'change:modelValue', this.changeValue );\n\t\t\t}\n\t\t},\n\n\t\tchangeValue: function( targetModel ) {\n\t\t\tthis.listeningModel.set( 'value', targetModel.get( 'value' ) );\n\t\t\t// this.listeningModel.set( 'reRender', true );\n\t\t\tthis.listeningModel.trigger( 'reRender' );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","define( 'controllers/confirmField',[], function() {\n\tvar radioChannel = nfRadio.channel( 'fields' );\n\tvar errorID = 'confirm-mismatch';\n\n\tvar controller = Marionette.Object.extend( {\n\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( radioChannel, 'init:model', this.registerConfirm );\n\t\t\tthis.listenTo( radioChannel, 'keyup:field', this.confirmKeyup );\n\t\t},\n\n\t\tregisterConfirm: function( confirmModel ) {\n\t\t\tif ( ! confirmModel.get( 'confirm_field' ) ) return;\n\n\t\t\tthis.listenTo( nfRadio.channel( 'form' ), 'loaded', function( formModal ){\n\t\t\t\tthis.registerConfirmListeners( confirmModel );\n\t\t\t});\n\t\t},\n\n\t\tregisterConfirmListeners: function( confirmModel ) {\n\t\t\t\n\t\t\tvar targetModel = nfRadio.channel( 'form-' + confirmModel.get( 'formID' ) ).request( 'get:fieldByKey', confirmModel.get( 'confirm_field' ) );\n\n\t\t\t//TODO: Add better handling for password confirm fields on the front end.\n\t\t\tif( 'undefined' == typeof targetModel ) return;\n\n\t\t\ttargetModel.set( 'confirm_with', confirmModel.get( 'id' ) );\n\t\t\tthis.listenTo( nfRadio.channel( 'field-' + targetModel.get( 'id' ) ), 'change:modelValue', this.changeValue );\n\t\t\tthis.listenTo( nfRadio.channel( 'field-' + confirmModel.get( 'id' ) ), 'change:modelValue', this.changeValue );\n\t\t},\n\n\t\tchangeValue: function( model ) {\n\t\t\tif ( 'undefined' == typeof model.get( 'confirm_with' ) ) {\n\t\t\t\tvar confirmModel = model;\n\t\t\t\tvar targetModel = nfRadio.channel( 'form-' + model.get( 'formID' ) ).request( 'get:fieldByKey', confirmModel.get( 'confirm_field' ) );\n\t\t\t} else {\n\t\t\t\tvar targetModel = model;\n\t\t\t\tvar confirmModel = radioChannel.request( 'get:field', targetModel.get( 'confirm_with' ) );\n\t\t\t}\n\t\t\tvar targetID = targetModel.get( 'id' );\n\t\t\tvar confirmID = confirmModel.get( 'id' );\n\n\t\t\tif ( '' == confirmModel.get( 'value' ) || confirmModel.get( 'value' ) == targetModel.get( 'value' ) ) {\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'remove:error', confirmID, errorID );\n\t\t\t} else {\n\t\t\t\tvar fieldModel = nfRadio.channel( 'fields' ).request( 'get:field', confirmID );\n\t\t\t\tvar formModel  = nfRadio.channel( 'app'    ).request( 'get:form',  fieldModel.get( 'formID' ) );\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'add:error', confirmID, errorID, formModel.get( 'settings' ).confirmFieldErrorMsg );\n\t\t\t}\n\t\t},\n\t\t\n\t\tconfirmKeyup: function( el, model, keyCode ) {\n\n\t\t\tvar currentValue = jQuery( el ).val();\n\t\t\tif ( model.get( 'confirm_field' ) ) {\n\t\t\t\tvar confirmModel = model;\n\t\t\t\tvar confirmID = model.get( 'id' );\n\t\t\t\tvar targetModel = nfRadio.channel( 'form-' + model.get( 'formID' ) ).request( 'get:fieldByKey', confirmModel.get( 'confirm_field' ) );\n\t\t\t\tvar compareValue = targetModel.get( 'value' );\n\t\t\t\tvar confirmValue = currentValue;\n\t\t\t} else if ( model.get( 'confirm_with' ) ) {\n\t\t\t\tvar confirmModel = nfRadio.channel( 'fields' ).request( 'get:field', model.get( 'confirm_with' ) );\n\t\t\t\tvar confirmID = confirmModel.get( 'id' );\n\t\t\t\tvar confirmValue = confirmModel.get( 'value' );\n\t\t\t\tvar compareValue = confirmValue;\n\t\t\t}\n\n\t\t\tif ( 'undefined' !== typeof confirmModel ) {\n\t\t\t\tif ( '' == confirmValue ) {\n\t\t\t\t\tnfRadio.channel( 'fields' ).request( 'remove:error', confirmID, errorID );\n\t\t\t\t} else if ( currentValue == compareValue ) {\n\t\t\t\t\tnfRadio.channel( 'fields' ).request( 'remove:error', confirmID, errorID );\n\t\t\t\t} else {\n\t\t\t\t\tvar fieldModel = nfRadio.channel( 'fields' ).request( 'get:field', confirmID );\n\t\t\t\t\tvar formModel  = nfRadio.channel( 'app'    ).request( 'get:form',  fieldModel.get( 'formID' ) );\n\t\t\t\t\tnfRadio.channel( 'fields' ).request( 'add:error', confirmID, errorID, formModel.get( 'settings' ).confirmFieldErrorMsg );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","define('controllers/updateFieldModel',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'nfAdmin' ).reply( 'update:field', this.updateField );\n\t\t},\n\n\t\tupdateField: function( model, value ) {\n\t\t\tif ( ! model.get( 'isUpdated' ) ) {\n\t\t\t\tmodel.set( 'value', value );\n\t\t\t\tmodel.set( 'isUpdated', true );\n\t\t\t\t/*\n\t\t\t\t * If we're working with an array, it won't trigger a change event on the value attribute.\n\t\t\t\t * Instead, we have to manually trigger a change event.\n\t\t\t\t */ \n\t\t\t\tif ( _.isArray( value ) ) {\n\t\t\t\t\tmodel.trigger( 'change:value', model );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","define('controllers/submitButton',['controllers/submitButton'], function( submitButton ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tbound: {},\n\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'submit' ), 'init:model', this.registerHandlers );\n\t\t},\n\n\t\tregisterHandlers: function( fieldModel ) {\n\t\t\tif ( 'undefined' != typeof this.bound[ fieldModel.get( 'id' ) ] ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tthis.listenTo( nfRadio.channel( 'field-' + fieldModel.get( 'id' ) ), 'click:field', this.click, this );\n\t\t\t/*\n\t\t\t * Register an interest in the 'before:submit' event of our form.\n\t\t\t */\n\t\t\tfieldModel.listenTo( nfRadio.channel( 'form-' + fieldModel.get( 'formID' ) ), 'before:submit', this.beforeSubmit, fieldModel );\n\t\t\tfieldModel.listenTo( nfRadio.channel( 'form-' + fieldModel.get( 'formID' ) ), 'submit:failed', this.resetLabel, fieldModel );\n\t\t\tfieldModel.listenTo( nfRadio.channel( 'form-' + fieldModel.get( 'formID' ) ), 'submit:response', this.resetLabel, fieldModel );\n\t\t\tfieldModel.listenTo( nfRadio.channel( 'form-' + fieldModel.get( 'formID' ) ), 'enable:submit', this.maybeEnable, fieldModel );\n\t\t\tfieldModel.listenTo( nfRadio.channel( 'form-' + fieldModel.get( 'formID' ) ), 'disable:submit', this.maybeDisable, fieldModel );\n\t\t\tfieldModel.listenTo( nfRadio.channel( 'form-' + fieldModel.get( 'formID' ) ), 'processingLabel', this.processingLabel, fieldModel );\n\n\t\t\tfieldModel.listenTo( nfRadio.channel( 'fields' ), 'add:error', this.maybeDisable, fieldModel );\n\t\t\tfieldModel.listenTo( nfRadio.channel( 'fields' ), 'remove:error', this.maybeEnable, fieldModel );\n\t\t\t\n\t\t\tthis.bound[ fieldModel.get( 'id') ] = true;\n\t\t},\n\n\t\tclick: function( e, fieldModel ) {\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:form', fieldModel.get( 'formID' ) );\n\t\t\tnfRadio.channel( 'form-' + fieldModel.get( 'formID' ) ).request( 'submit', formModel );\n\t\t},\n\n\t\tbeforeSubmit: function() {\n\t\t\tthis.set( 'disabled', true );\n\t\t\tnfRadio.channel( 'form-' + this.get( 'formID' ) ).trigger( 'processingLabel', this );\n\t\t},\n\n\t\tmaybeDisable: function( fieldModel ) {\n\n\t\t\tif( 'undefined' != typeof fieldModel && fieldModel.get( 'formID' ) != this.get( 'formID' ) ) return;\n\n\t\t\tthis.set( 'disabled', true );\n\t\t\tthis.trigger( 'reRender' );\n\t\t},\n\n\t\tmaybeEnable: function( fieldModel ) {\n\t\t\t/*\n\t\t\t * If the field reporting the error is not on the same form as the submit button, return false;\n\t\t\t */\n\t\t\tif ( 'undefined' != typeof fieldModel && fieldModel.get( 'formID' ) != this.get( 'formID' ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:form', this.get( 'formID' ) );\n\t\t\tif ( 0 == _.size( formModel.get( 'fieldErrors' ) ) ) {\n\t\t\t\tthis.set( 'disabled', false );\n\t\t\t\tthis.trigger( 'reRender' );\n\t\t\t}\n\t\t},\n\n\t\tprocessingLabel: function() {\n\t\t\tif ( this.get( 'label' ) == this.get( 'processing_label' ) ) return false;\n\n\t\t\tthis.set( 'oldLabel', this.get( 'label' ) );\n\t\t\tthis.set( 'label', this.get( 'processing_label' ) );\n\t\t\tthis.trigger( 'reRender' );\n\t\t},\n\n\t\tresetLabel: function( response ) {\n\t\t\tif ( 'undefined' != typeof this.get( 'oldLabel' ) ) {\n\t\t\t\tthis.set( 'label', this.get( 'oldLabel' ) );\n\t\t\t}\n\t\t\tthis.set( 'disabled', false );\n\t\t\tthis.trigger( 'reRender' );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","define('controllers/submitDebug',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'forms' ), 'submit:response', this.submitDebug );\n        },\n\n        submitDebug: function( response, textStatus, jqXHR, formID ) {\n\n            if( 'undefined' == typeof response.debug ) return;\n\n            /* Form Debug Messages */\n            if( 'undefined' != typeof response.debug.form ) {\n                var debugMessages = document.createElement( 'span' );\n                _.each(response.debug.form, function (message, index) {\n                    var messageText = document.createTextNode( message );\n                    debugMessages.appendChild( messageText );\n                    debugMessages.appendChild(\n                        document.createElement( 'br' )\n                    );\n                });\n                jQuery('.nf-debug-msg').html( debugMessages );\n            }\n\n            /* Console Debug Messages */\n            if( 'undefined' != typeof response.debug.console ) {\n                var style = '';\n                console.log( '%c%s', style, 'NINJA SUPPORT' );\n                _.each(response.debug.console, function (message, index) {\n                    console.log( message );\n                });\n                console.log( '%c%s', style, 'END NINJA SUPPORT' );\n            }\n        }\n\n    });\n\n    return controller;\n} );\n\n","define('controllers/getFormErrors',[], function() {\n\tvar radioChannel = nfRadio.channel( 'fields' );\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function( model ) {\n\t\t\tnfRadio.channel( 'form' ).reply( 'get:errors', this.getFormErrors );\n\t\t},\n\n\t\tgetFormErrors: function( formID ) {\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:form', formID );\n\t\t\tvar errors = false;\n\t\t\t\n\t\t\tif ( formModel ) {\n\t\t\t\t/*\n\t\t\t\t * Check to see if we have any errors on our form model.\n\t\t\t\t */\n\t\t\t\tif ( 0 !== formModel.get( 'errors' ).length ) {\n\t\t\t\t\t_.each( formModel.get( 'errors' ).models, function( error ) {\n\t\t\t\t\t\terrors = errors || {};\n\t\t\t\t\t\terrors[ error.get( 'id' ) ] = error.get( 'msg' );\n\t\t\t\t\t} );\t\t\t\t\t\t\n\t\t\t\t}\n\n\t\t\t\t_.each( formModel.get( 'fields' ).models, function( field ) {\n\t\t\t\t\tif ( field.get( 'type' ) != 'submit' && field.get( 'errors' ).length > 0 ) {\n\t\t\t\t\t\terrors = errors || {};\n\t\t\t\t\t\terrors[ field.get( 'id' ) ] = field.get( 'errors' );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t\treturn errors;\n\t\t},\n\t});\n\n\treturn controller;\n} );\n","define('controllers/validateRequired',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'blur:field', this.validateRequired );\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'change:field', this.validateRequired );\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'keyup:field', this.validateKeyup );\n\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'change:modelValue', this.validateModelData );\n\t\t\tthis.listenTo( nfRadio.channel( 'submit' ), 'validate:field', this.validateModelData );\n\t\t},\n\t\t\n\t\tvalidateKeyup: function( el, model, keyCode ) {\n\t\t\tif ( 1 != model.get( 'required' ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( ! model.get( 'clean' ) ) {\n\t\t\t\tthis.validateRequired( el, model );\n\t\t\t}\n\t\t},\n\n\t\tvalidateRequired: function( el, model ) {\n\t\t\tif ( 1 != model.get( 'required' ) || ! model.get( 'visible' ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tvar currentValue = jQuery( el ).val();\n\t\t\tvar customReqValidation = nfRadio.channel( model.get( 'type' ) ).request( 'validate:required', el, model );\n\t\t\tvar defaultReqValidation = true;\n\n\t\t\tvar maskPlaceholder = model.get( 'mask' );\n\t\t\tif ( maskPlaceholder ) {\n\t\t\t\tmaskPlaceholder = maskPlaceholder.replace( /9/g, '_' );\n\t\t\t\tmaskPlaceholder = maskPlaceholder.replace( /a/g, '_' );\n\t\t\t\tmaskPlaceholder = maskPlaceholder.replace( /\\*/g, '_' );\n\t\t\t}\n\n            // If the field has a mask...\n            // AND that mask is equal to the current value...            \n            if ( maskPlaceholder && currentValue === maskPlaceholder ) {\n                // If we have a pre-existing error...\n                if ( 0 < model.get( 'errors' ).length ) {\n                    // Persist that error.\n                    defaultReqValidation = false;\n                }\n            }\n            // If our value is an empty string...\n            if ( ! jQuery.trim( currentValue ) ) {\n                // Throw an error.\n                defaultReqValidation = false;\n            }\n\n\t\t\tif ( 'undefined' !== typeof customReqValidation ) {\n\t\t\t\tvar valid = customReqValidation;\n\t\t\t} else {\n\t\t\t\tvar valid = defaultReqValidation;\n\t\t\t}\n\n\t\t\tthis.maybeError( valid, model );\n\t\t},\n\n\t\tvalidateModelData: function( model ) {\n\n\t\t\tif ( 1 != model.get( 'required' ) || ! model.get( 'visible' ) || model.get( 'clean' ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * If we already have a required error on this model, return false\n\t\t\t */\n\t\t\tif ( model.get( 'errors' ).get( 'required-error' ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tcurrentValue = model.get( 'value' );\n\n\t\t\tvar defaultReqValidation = true;\n\n\t\t\tif ( ! jQuery.trim( currentValue ) ) {\n\t\t\t\tdefaultReqValidation = false;\n\t\t\t}\n\n\t\t\tvar customReqValidation = nfRadio.channel( model.get( 'type' ) ).request( 'validate:modelData', model );\n\t\t\tif ( 'undefined' !== typeof customReqValidation ) {\n\t\t\t\tvar valid = customReqValidation;\n\t\t\t} else {\n\t\t\t\tvar valid = defaultReqValidation;\n\t\t\t}\n\n\t\t\tthis.maybeError( valid, model );\n\n\t\t},\n\n\t\tmaybeError: function( valid, model ) {\n\t\t\tif ( ! valid ) {\n\n\t\t\t\tvar formModel  = nfRadio.channel( 'form-' + model.get( 'formID' ) ).request( 'get:form' );\n\n\t\t\t\tif( 'undefined' != typeof formModel ) {\n\t\t\t\t\tnfRadio.channel('fields').request('add:error', model.get('id'), 'required-error', formModel.get('settings').validateRequiredField);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'remove:error', model.get( 'id' ), 'required-error' );\n\t\t\t}\t\t\t\n\t\t}\n\t});\n\n\treturn controller;\n} );\n\n","define('controllers/submitError',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'forms' ), 'submit:response', this.submitErrors );\n\t\t},\n\n\t\tsubmitErrors: function( response, textStatus, jqXHR, formID ) {\n\n\t\t\tif ( _.size( response.errors.fields ) > 0 ) {\n\t\t\t\t_.each( response.errors.fields, function( data, fieldID ) {\n                    if ( typeof( data ) === 'object' ) {\n                        nfRadio.channel( 'fields' ).request( 'add:error', fieldID, data.slug, data.message );\n                    } else {\n                        nfRadio.channel( 'fields' ).request( 'add:error', fieldID, 'required-error', data );\n                    }\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tif ( _.size( response.errors.form ) > 0 ) {\n\t\t\t\t_.each( response.errors.form, function( msg, errorID ) {\n\t\t\t\t\tnfRadio.channel( 'form-' + formID ).request( 'remove:error', errorID );\n\t\t\t\t\tnfRadio.channel( 'form-' + formID ).request( 'add:error', errorID, msg );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tif ( 'undefined' != typeof response.errors.last ) {\n\t\t\t\tif( 'undefined' != typeof response.errors.last.message ) {\n\t\t\t\t\tvar style = 'background: rgba( 255, 207, 115, .5 ); color: #FFA700; display: block;';\n\t\t\t\t\tconsole.log( '%c NINJA FORMS SUPPORT: SERVER ERROR', style );\n\t\t\t\t\tconsole.log( response.errors.last.message );\n\t\t\t\t\tconsole.log( '%c END SERVER ERROR MESSAGE', style );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * TODO: This needs to be re-worked for backbone. It's not dynamic enough.\n\t\t\t */\n\t\t\t/*\n\t\t\t * Re-show any hidden fields during a form submission re-start.\n\t\t\t */\n\t\t\tjQuery( '#nf-form-' + formID + '-cont .nf-field-container' ).show();\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n\n","define('controllers/actionRedirect',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'forms' ), 'submit:response', this.actionRedirect );\n\t\t},\n\n\t\tactionRedirect: function( response ) {\n\n\t\t\tif ( 'undefined' != typeof response.data.halt && 'undefined' != typeof response.data.halt.redirect && '' != response.data.halt.redirect ) {\n\t\t\t\twindow.location = response.data.halt.redirect;\n\t\t\t}\n\n\t\t\tif ( _.size( response.errors ) == 0 && 'undefined' != typeof response.data.actions ) {\n\n\t\t\t\tif ( 'undefined' != typeof response.data.actions.redirect && '' != response.data.actions.redirect ) {\n\t\t\t\t\twindow.location = response.data.actions.redirect;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","define('controllers/actionSuccess',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'forms' ), 'submit:response', this.actionSubmit );\n\t\t},\n\n\t\tactionSubmit: function( response ) {\n\t\t\tif ( _.size( response.errors ) == 0 && 'undefined' != typeof response.data.actions ) {\n\t\t\t\tif ( 'undefined' != typeof response.data.actions.success_message && '' != response.data.actions.success_message ) {\n\t\t\t\t\tvar form_id = response.data.form_id;\n\t\t\t\t\tvar success_message = jQuery( '#nf-form-' + form_id + '-cont .nf-response-msg' );\n\t\t\t\t\t\n\t\t\t\t\tsuccess_message.html( response.data.actions.success_message ).show();\n\t\t\t\t\t\n\t\t\t\t\t//Let's check if the success message is already fully visible in the viewport without scrolling\n\t\t\t\t\tvar top_of_success_message = success_message.offset().top;\n\t\t\t\t\tvar bottom_of_success_message = success_message.offset().top + success_message.outerHeight();\n\t\t\t\t\tvar bottom_of_screen = jQuery(window).scrollTop() + jQuery(window).height();\n\t\t\t\t\tvar top_of_screen = jQuery(window).scrollTop();\n\n\t\t\t\t\tvar the_element_is_visible = ((bottom_of_screen > bottom_of_success_message) && (top_of_screen < top_of_success_message));\n\n\t\t\t\t\tif(!the_element_is_visible){\n\t\t\t\t\t\t//The element isn't visible, so let's scroll to the success message as in the previous release, but with a short animation\n\t\t\t\t\t\tjQuery('html, body').animate({\n\t\t\t\t\t\t\tscrollTop: ( success_message.offset().top - 50 )\n\t\t\t\t\t\t}, 300 );\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n\n","define('controllers/fieldSelect',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'init:model', function( model ){\n\t\t\t\tif( 'list' == model.get( 'parentType' ) ) this.register( model );\n\t\t\t}, this );\n\n\t\t\tnfRadio.channel( 'listselect' ).reply( 'get:calcValue', this.getCalcValue, this );\n\t\t\tnfRadio.channel( 'listmultiselect' ).reply( 'get:calcValue', this.getCalcValue, this );\n\t\t},\n\n\t\tregister: function( model ) {\n\t\t\tmodel.set( 'renderOptions', this.renderOptions );\n\t\t\tmodel.set( 'renderOtherAttributes', this.renderOtherAttributes );\n\t\t\t/*\n\t\t\t * When we init a model, we need to set our 'value' to the selected option's value.\n\t\t\t * This is the list equivalent of a 'default value'.\n\t\t\t */ \n\t\t\tif ( 0 != model.get( 'options' ).length ) {\n\t\t\t\t//Check to see if there is a value set for the field\n\t\t\t\tvar savedVal = model.get( 'value' );\n\n\t\t\t\t/*\n\t\t\t\t * Check to see if this is a multi-select list.\n\t\t\t\t */\n\t\t\t\tif ( 'listmultiselect' == model.get( 'type' ) ) {\n\t\t\t\t\t/*\n\t\t\t\t\t * We're using a multi-select, so we need to check out any selected options and add them together.\n\t\t\t\t\t */\n\t\t\t\t\tvar selected = _.filter( model.get( 'options' ), function( opt ) { return 1 == opt.selected } );\n\t\t\t\t\tselected = _.map( selected, function( opt ) { return opt.value } );\n\t\t\t\t\tvar value = selected;\n\t\t\t\t} else if ( 'listradio' !== model.get( 'type' ) ) {\n\t\t\t\t\t/*\n\t\t\t\t\t * Check to see if we have a selected value.\n\t\t\t\t\t */\n\t\t\t\t\tvar selected = _.find( model.get( 'options' ), function( opt ) { return 1 == opt.selected } );\n\t\t\t\t\t/*\n\t\t\t\t\t * We don't have a selected value, so use our first option.\n\t\t\t\t\t */\n\t\t\t\t\tif ( 'undefined' == typeof selected ) {\n\t\t\t\t\t\tselected = _.first( model.get( 'options' ) );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( 'undefined' != typeof selected\n\t\t\t\t\t\t&& 'undefined' != typeof selected.value ) {\n\t\t\t\t\t\tvar value = selected.value;\n\t\t\t\t\t} else if ( 'undefined' != typeof selected ) {\n\t\t\t\t\t\tvar value = selected.label;\n\t\t\t\t\t}\t\n\t\t\t\t}\n\n\t\t\t\t/*\n\t            * This part is re-worked to take into account custom user-meta\n\t            * values for fields.\n\t             */\n\t\t\t\tif( 'undefined' !== typeof savedVal && '' !== savedVal\n\t\t\t\t\t&& Array.isArray( savedVal ) ) {\n\t\t\t\t\tmodel.set( 'value', savedVal );\n\t\t\t\t} else if ( 'undefined' != typeof selected ) {\n\t\t\t\t\tmodel.set( 'value', value );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\trenderOptions: function() {\n\t\t\tvar html = '';\n\n\t\t\t_.each( this.options, function( option ) {\n\t\t\t\t/*\n\t\t\t\t* This part has been re-worked to account for values passed in\n\t\t\t\t* via custom user-meta ( a la User Mgmt add-on)\n\t\t\t\t */\n\t\t\t\tif ( _.isArray( this.value ) ) {\n                    // If we have a multiselect list...\n                    // AND it has selected values...\n\t\t\t\t\tif( 'listmultiselect' === this.type && 0 < this.value.length &&\n\t\t\t\t\t\t-1 != _.indexOf( this.value[ 0 ].split( ',' ), option.value ) ) {\n\t\t\t\t\t\tvar selected = true;\n\t\t\t\t\t} else if( -1 != _.indexOf( this.value, option.value ) ) {\n\t\t\t\t\t\tvar selected = true;\n\t\t\t\t\t}\n\t\t\t\t} else if ( ! _.isArray( this.value ) && option.value == this.value ) {\n\t\t\t\t\tvar selected = true;\n\t\t\t\t} else if ( ( 1 == option.selected && this.clean )\n\t\t\t\t\t&& 'undefined' === typeof this.value ) {\n\t\t\t\t\tvar selected = true;\n\t\t\t\t} else {\n\t\t\t\t\tvar selected = false;\n\t\t\t\t}\n\n\t\t\t\t/*\n                 * TODO: This is a bandaid fix for making sure that each option has a \"visible\" property.\n                 * This should be moved to creation so that when an option is added, it has a visible property by default.\n                 */\n                if ( 'undefined' == typeof option.visible ) {\n                    option.visible = true;\n                }\n\n\t\t\t\toption.selected = selected;\n\t\t\t\toption.fieldID = this.id;\n\t\t\t\toption.classes = this.classes;\n\t\t\t\toption.currentValue = this.value;\n\n\t\t\t\tvar template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-field-listselect-option' );\n\t\t\t\thtml += template( option );\n\t\t\t}, this );\n\n\t\t\treturn html;\n\t\t},\n\n\t\trenderOtherAttributes: function() {\n\t\t\tvar otherAttributes = '';\n\n\t\t\tif( 'listmultiselect' == this.type ){\n\t\t\t\totherAttributes = otherAttributes + ' multiple';\n\n\t\t\t\tvar multiSize = this.multi_size || 5;\n\t\t\t\totherAttributes = otherAttributes + ' size=\"' + multiSize + '\"';\n\t\t\t}\n\n\t\t\treturn otherAttributes;\n\t\t},\n\n\t\tgetCalcValue: function( fieldModel ) {\n\t\t\tvar calc_value = 0;\n\t\t\tvar options = fieldModel.get( 'options' );\n\t\t\tif ( 0 != options.length ) {\n\t\t\t\t/*\n\t\t\t\t * Check to see if this is a multi-select list.\n\t\t\t\t */\n\t\t\t\tif ( 'listmultiselect' == fieldModel.get( 'type' ) ) {\n\t\t\t\t\t/*\n\t\t\t\t\t * We're using a multi-select, so we need to check out any selected options and add them together.\n\t\t\t\t\t */\n\t\t\t\t\t_.each( fieldModel.get( 'value' ), function( val ) {\n\t\t\t\t\t\tvar tmp_opt = _.find( options, function( opt ) { return opt.value == val } );\n\t\t\t\t\t\tcalc_value += tmp_opt.calc;\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\t/*\n\t\t\t\t\t * We are using a single select, so our selected option is in the 'value' attribute.\n\t\t\t\t\t */\n\t\t\t\t\tvar selected = _.find( options, function( opt ) { return fieldModel.get( 'value' ) == opt.value } );\n\t\t\t\t\t/*\n\t\t\t\t\t * We don't have a selected value, so use our first option.\n\t\t\t\t\t */\n\t\t\t\t\tif ( 'undefined' == typeof selected ) {\n\t\t\t\t\t\tselected = fieldModel.get( 'options' )[0];\n\t\t\t\t\t}\t\t\n\t\t\t\t\tcalc_value  = selected.calc;\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn calc_value;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n\n","define('controllers/coreSubmitResponse',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'forms' ), 'submit:response', this.actionSubmit );\n\t\t},\n\n\t\tactionSubmit: function( response ) {\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:form', response.data.form_id );\n\t\t\t/*\n\t\t\t * If we have errors, don't hide or clear.\n\t\t\t */\n\t\t\tif ( 0 != _.size( response.errors ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( 1 == response.data.settings.clear_complete ) {\n\t\t\t\t// nfRadio.channel( 'form-' + response.data.form_id ).trigger( 'reset' );\n\t\t\t\tformModel.get( 'fields' ).reset( formModel.get( 'loadedFields' ) );\n\t\t\t}\n\n\t\t\tif ( 1 == response.data.settings.hide_complete ) {\n\t\t\t\t/**\n\t\t\t\t * TODO: This needs to be re-worked for backbone. It's not dynamic enough.\n\t\t\t\t */\n\t\t\t\tformModel.trigger( 'hide' );\n\t\t\t\t// jQuery( '.nf-fields' ).hide();\n\t\t\t\t// jQuery( '.nf-form-title' ).hide();\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","define('controllers/fieldProduct',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'product' ), 'init:model', this.register );\n            nfRadio.channel( 'product' ).reply( 'get:calcValue', this.getCalcValue, this );\n        },\n\n        register: function( model ) {\n            model.set( 'renderProductQuantity', this.renderProductQuantity );\n            model.set( 'renderProduct', this.renderProduct );\n            model.set( 'renderOptions', this.renderOptions );\n        },\n\n        renderProduct: function(){\n            switch( this.product_type ) {\n                case 'user':\n                    var template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-field-textbox' );\n                    return template( this );\n                    break;\n                case 'hidden':\n                    var template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-field-hidden' );\n                    return template( this );\n                    break;\n\n                case 'dropdown':\n                    var template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-product-dropdown' );\n                    return template( this );\n                    break;\n                default:\n                    var template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-product-single' );\n                    return template( this );\n            }\n        },\n\n        renderProductQuantity: function(){\n            if ( 1 == this.product_use_quantity ) {\n                var template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-product-quantity' );\n                return template( this );\n            }\n        },\n\n        renderOptions: function() {\n            var that = this;\n            var html = '';\n            _.each( this.options, function( option ) {\n                if ( 1 == option.selected ) {\n                    var selected = true;\n                } else {\n                    var selected = false;\n                }\n\n                option.selected = selected;\n                option.fieldID = that.id;\n                option.classes = that.classes;\n                option.currentValue = that.value;\n\n                var template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-product-' + that.product_type + '-option' );\n                html += template( option );\n            } );\n\n            return html;\n        },\n\n        getCalcValue: function( fieldModel ) {\n\n            var product_price = fieldModel.get( 'product_price' );\n            var product_quantity = fieldModel.get( 'value' );\n\n            return product_price * product_quantity;\n        }\n    });\n\n    return controller;\n} );\n\n","define('controllers/fieldTotal',[], function() {\n    var controller = Marionette.Object.extend( {\n\n        totalModel: {},\n\n        productTotals: {},\n\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'total' ), 'init:model', this.register );\n            this.listenTo( nfRadio.channel( 'shipping' ), 'init:model', this.registerShipping );\n        },\n\n        register: function( totalModel ){\n            this.totalModel = totalModel;\n\n            var formID = totalModel.get( 'formID' );\n            this.listenTo( nfRadio.channel( 'form-' + formID ), 'loaded', this.onFormLoaded );\n\n            this.listenTo( nfRadio.channel( 'product' ), 'change:modelValue', this.onChangeProduct );\n            this.listenTo( nfRadio.channel( 'quantity' ), 'change:modelValue', this.onChangeQuantity );\n        },\n\n        registerShipping: function( shippingModel ){\n            this.shippingCost = shippingModel.get( 'shipping_cost' );\n        },\n\n        onFormLoaded: function( formModel ){\n\n            var fieldModels = formModel.get( 'fields' ).models;\n\n            var productFields = {};\n            var quantityFields = {};\n\n            for( var model in fieldModels ){\n\n                var field = fieldModels[ model ];\n                var fieldID = field.get( 'id' );\n\n                // TODO: Maybe use switch\n                if( 'product' == field.get( 'type' ) ){\n                    productFields[ fieldID ] = field;\n                } else if( 'quantity' == field.get( 'type' ) ){\n                    var productID = field.get( 'product_assignment' );\n                    quantityFields[ productID ] = field;\n                }\n            }\n\n            for( var productID in productFields ){\n\n                var product = productFields[ productID ];\n\n                var productPrice = Number( product.get( 'product_price' ) );\n\n                if( quantityFields[ productID ] ){\n\n                    productPrice *= quantityFields[ productID ].get( 'value' );\n\n                } else if( 1 == product.get( 'product_use_quantity' ) ){\n\n                    productPrice *= product.get( 'value' );\n\n                }\n\n                this.productTotals[ productID ] = productPrice;\n            }\n\n            this.updateTotal();\n        },\n\n        onChangeProduct: function( model ){\n            var productID = model.get( 'id' );\n            var productPrice = Number( model.get( 'product_price' ) );\n            var productQuantity = Number( model.get( 'value' ) );\n            var newTotal = productQuantity * productPrice;\n            this.productTotals[ productID ] = newTotal;\n\n            this.updateTotal();\n        },\n\n        onChangeQuantity: function( model ){\n            var productID = model.get( 'product_assignment' );\n            var productField = nfRadio.channel( 'fields' ).request( 'get:field', productID );\n            var productPrice = Number( productField.get( 'product_price' ) );\n\n            var quantity = Number( model.get( 'value' ) );\n\n            var newTotal = quantity * productPrice;\n\n            this.productTotals[ productID ] = newTotal;\n\n            this.updateTotal();\n        },\n\n        updateTotal: function(){\n\n            var newTotal = 0;\n\n            for( var product in this.productTotals ){\n                newTotal += Number( this.productTotals[ product ] );\n            }\n\n            if( newTotal && this.shippingCost ) {\n                // Only add shipping if there is a cost.\n                newTotal += Number(this.shippingCost);\n            }\n\n            this.totalModel.set( 'value', newTotal.toFixed( 2 ) );\n            this.totalModel.trigger( 'reRender' );\n        }\n    });\n\n    return controller;\n});\n","define('controllers/fieldQuantity',[], function() {\n    var controller = Marionette.Object.extend( {\n\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'quantity' ), 'init:model', this.registerQuantity );\n        },\n\n        registerQuantity: function( model ){\n            var productID = model.get( 'product_assignment' );\n            var product = nfRadio.channel( 'fields' ).request( 'get:field', productID );\n\n            if( product ) {\n                product.set('product_use_quantity', 0);\n            }\n        },\n\n    });\n\n    return controller;\n});\n","/**\n * Model that represents a calculation.\n *\n * On init, we trigger a radio message so that controllers can do things when a calc model inits.\n */\ndefine( 'models/calcModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tinitialize: function() {\n\t\t\t// Set our form id\n\t\t\tthis.set( 'formID', this.collection.options.formModel.get( 'id' ) );\n\t\t\t// Set our initial fields object to empty. This will hold our key/value pairs.\n\t\t\tthis.set( 'fields', {} );\n\t\t\t// Trigger a radio message to let controllers know we've inited this model.\n\t\t\tnfRadio.channel( 'calc' ).trigger( 'init:model', this );\n\t\t\t// When we change the value of this calculation, send out a radio message\n\t\t\tthis.on( 'change:value', this.changeValue, this );\n\t\t},\n\n\t\t/**\n\t\t * Trigger a radio message when a field present in our calculation changes\n\t\t *\n\t\t * The listener that triggers/calls this function is in controllers/calculations\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tchangeField: function( fieldModel ) {\n\t\t\tnfRadio.channel( 'calc' ).trigger( 'change:field', this, fieldModel );\n\t\t},\n\n\t\tchangeCalc: function( targetCalcModel ) {\n\t\t\tnfRadio.channel( 'calc' ).trigger( 'change:calc', this, targetCalcModel );\n\t\t},\n\n\t\tchangeValue: function() {\n\t\t\tnfRadio.channel( 'calc' ).trigger( 'change:value', this );\n\t\t}\n\t} );\n\n\treturn model;\n} );\n\n","define( 'models/calcCollection',['models/calcModel'], function( CalcModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: CalcModel,\n\t\tcomparator: 'order',\n\n\t\tinitialize: function( models, options ) {\n\t\t\tthis.options = options;\n            _.each( models, function( model ) {\n            \tif( 'undefined' == typeof model.dec ) return;\n                if ( '' === model.dec.toString().trim() ) model.dec = 2;\n                model.dec = parseInt( model.dec );\n            } );\n\t\t\t/*\n\t\t\t * Respond to requests for our calc model\n\t\t\t */\n\t\t\tnfRadio.channel( 'form-' + options.formModel.get( 'id' ) ).reply( 'get:calc', this.getCalc, this );\n\t\t},\n\n\t\tgetCalc: function( key ) {\n\t\t\treturn this.findWhere( { name: key } );\n\t\t}\n\t} );\n\treturn collection;\n} );\n","/**\n * Controller responsible for keeping up with calculations.\n */\ndefine('controllers/calculations',['models/calcCollection'], function( CalcCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.calcs = {};\n\t\t\tthis.displayFields = {};\n\t\t\t// When our form initialises, check to see if there are any calculations that need to be tracked.\n\t\t\tthis.listenTo( nfRadio.channel( 'form' ), 'loaded', this.registerCalcs );\n            \n            // When our collection gets reset, reset calculation tracking as well.\n            this.listenTo( nfRadio.channel( 'fields' ), 'reset:collection', this.resetCalcs );\n\n\t\t\t// When a calc model is initialised, run a setup function.\n\t\t\t// this.listenTo( nfRadio.channel( 'calc' ), 'init:model', this.setupCalc );\n\n\t\t\t// When a field referenced by a calc model changes, update our calc.\n\t\t\tthis.listenTo( nfRadio.channel( 'calc' ), 'change:field', this.changeField );\n\n\t\t\t// When a calculation referenced by a calc model changes, update our calc.\n\t\t\tthis.listenTo( nfRadio.channel( 'calc' ), 'change:calc', this.changeCalc );\n\n\t\t\t/*\n\t\t\t * Listen to our field model init for fields that want to display calc values.\n\t\t\t * If that field has a calc merge tag, replace it with the default calc value.\n\t\t\t */\n\t\t\tvar that = this;\n\t\t\t_.each( nfFrontEnd.use_merge_tags.calculations, function( fieldType ) {\n\t\t\t\tthat.listenTo( nfRadio.channel( 'fields-' + fieldType ), 'init:model', that.initDisplayField );\n\t\t\t} );\n\t\t\t\n\t\t\t// When we change our calc value, update any display fields.\n\t\t\tthis.listenTo( nfRadio.channel( 'calc' ), 'change:value', this.updateDisplayFields );\n\n\t\t\t// Set an init variable so that we only call reRender on the display field on change, not on init.\n\t\t\tthis.init = {};\n\t\t},\n        \n        /**\n         * Passthrough function to reset tracking of calculations when the fieldCollection is reset.\n         * \n         * @since 3.2\n         * @param backbone.collection fieldCollection\n         * @return void\n         */\n        resetCalcs: function( fieldCollection ) {\n            if( 'undefined' != typeof( fieldCollection.options.formModel ) ) {\n                this.registerCalcs( fieldCollection.options.formModel );  \n            }\n        },\n\n\t\t/**\n\t\t * When our form loads, create a collection out of any calculations.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model formModel\n\t\t * @return void\n\t\t */\n\t\tregisterCalcs: function( formModel ) {\n\t\t\tvar calcCollection = new CalcCollection( formModel.get( 'settings' ).calculations, { formModel: formModel } );\n\t\t\tthis.calcs[ formModel.get( 'id' ) ] = calcCollection;\n\t\t\tvar that = this;\n\n\t\t\t_.each( calcCollection.models, function( calcModel ) {\n\t\t\t\t/*\n\t\t\t\t * We set a property on our init variable for the calc model we're looping over.\n\t\t\t\t * This property is set to true so that when we make changes to the calc model on the next line\n\t\t\t\t * the field view doesn't try to redraw itself.\n\t\t\t\t * If we don't do this, the 'reRender' attribute of the model will be set before the view is initialized,\n\t\t\t\t * which means that setting 'reRender' to true will never re-render the view.\n\t\t\t\t */\n\t\t\t\tthat.init[ calcModel.get( 'name' ) ] = true;\n\t\t\t\t// Setup our calculation models with initial values and register listeners for calc-related fields.\n\t\t\t\tthat.setupCalc( calcModel );\n\t\t\t} );\n\t\t},\n\n\t\t/**\n\t\t * When a calculation model is instantiated from the registerCalcs function:\n\t\t *\n\t\t * Use a regex to get an array of the field keys\n\t\t * Setup an initial key/values array\n\t\t * Check for any references to other calculations\n\t\t * Set the initial value of our calculation\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model calcModel\n\t\t * @return void\n\t\t */\n\t\tsetupCalc: function( calcModel ) {\n\t\t\t// Setup our that var so we can access 'this' context in our loop.\n\t\t\tvar that = this;\n\t\t\t// Get our equation\n\t\t\tvar eq = calcModel.get( 'eq' );\n\t\t\t// We want to keep our original eq intact, so we use a different var for string replacment.\n\t\t\tvar eqValues = eq;\n            // Store the name for debugging later.\n            var calcName = calcModel.get( 'name' );\n\n\t\t\t/* TODO:\n\t\t\t * It might be possible to refactor these two if statements.\n\t\t\t * The difficulty is that each has a different method of retreiving the specific data model.\n\t\t\t */\n\t\t\t// Check to see if we have any field merge tags in our equation.\n\t\t\tvar fields = eq.match( new RegExp( /{field:(.*?)}/g ) );\n\t\t\tif ( fields ) {\n\t\t\t\t/*\n\t\t\t\t * fields is now an array of field keys that looks like:\n\t\t\t\t * ['{field:key'], ['{field:key'], etc.\n\t\t\t\t *\n\t\t\t\t * We need to run a function with each of our field keys to setup our field key array and hook up our field change listner.\n\t\t\t\t */\n\t\t\t\t\n\t\t\t\tfields = fields.map( function( field ) {\n\t\t\t\t\t// field will be {field:key}\n\t\t\t\t\tvar key = field.replace( ':calc}', '' ).replace( '}', '' ).replace( '{field:', '' );\n\n\t\t\t\t\t// Get our field model\n\t\t\t\t\tfieldModel = nfRadio.channel( 'form-' + calcModel.get( 'formID' ) ).request( 'get:fieldByKey', key );\n\n                    if( 'undefined' == typeof fieldModel ) return;\n\n                    fieldModel.set( 'clean', false );\n\n\t\t\t\t\t// Register a listener in our field model for value changes.\n\t\t\t\t\tfieldModel.on( 'change:value', calcModel.changeField, calcModel );\n\t\t\t\t\t// Get our calc value from our field model.\n\t\t\t\t\tvar calcValue = that.getCalcValue( fieldModel );\n\t\t\t\t\t// Add this field to our internal key/value object.\n\t\t\t\t\tthat.updateCalcFields( calcModel, key, calcValue );\n\t\t\t\t\t// Update the string tracking our merged eq with the calc value.\n\t\t\t\t\teqValues = that.replaceKey( 'field', key, calcValue, eqValues );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// Check to see if we have any calc merge tags in our equation.\n\t\t\tvar calcs = eq.match( new RegExp( /{calc:(.*?)}/g ) );\n\t\t\tif ( calcs ) {\n\t\t\t\t/*\n\t\t\t\t * calcs is now an array of calc keys that looks like:\n\t\t\t\t * ['{calc:key'], ['{calc:key'], etc.\n\t\t\t\t *\n\t\t\t\t * We need to run a function with each of our calc keys to setup our calc key array and hook up our calc change listner.\n\t\t\t\t */\n\t\t\t\t\n\t\t\t\tcalcs = calcs.map( function( calc ) {\n\t\t\t\t\t// calc will be {calc:name}\n\t\t\t\t\tvar name = calc.replace( '}', '' ).replace( '{calc:', '' );\n\t\t\t\t\t// Get our calc model\n\t\t\t\t\tvar targetCalcModel = calcModel.collection.findWhere( { name: name } );\n\n\t\t\t\t\tif( 'undefined' == typeof targetCalcModel ) return;\n\n\t\t\t\t\t// Listen for changes on our calcluation, since we need to update our calc when it changes.\n\t\t\t\t\ttargetCalcModel.on( 'change:value', calcModel.changeCalc, calcModel );\n\t\t\t\t\t// // Get our calc value from our calc model.\n\t\t\t\t\tvar calcValue = targetCalcModel.get( 'value' );\n\t\t\t\t\t// Update the string tracking our merged eq with the calc value.\n\t\t\t\t\teqValues = that.replaceKey( 'calc', name, calcValue, eqValues );\n\t\t\t\t} );\n\n\t\t\t}\n\n            // Scrub unmerged tags (ie deleted/nox-existent fields/calcs, etc).\n            eqValues = eqValues.replace( /{([a-zA-Z0-9]|:|_|-)*}/g, 0 );\n\n            // Scrub line breaks.\n            eqValues = eqValues.replace( /\\r?\\n|\\r/g, '' );\n\t\t\t// Evaluate the equation and update the value of this model.\n\t\t\ttry {\n\t\t\t\tcalcModel.set( 'value', Number( mexp.eval( eqValues ) ).toFixed( calcModel.get( 'dec' ) ) );\n\t\t\t} catch( e ) {\n                //console.log( calcName );\n\t\t\t\tconsole.log( e );\n\t\t\t}\n            \n            // If for whatever reason, we got NaN, reset that to 0.\n            if( calcModel.get( 'value' ) === 'NaN' ) calcModel.set( 'value', '0' );\n\n\t\t\t// Debugging console statement.\n\t\t\t// console.log( eqValues + ' = ' + calcModel.get( 'value' ) );\n\t\t},\n\n\t\t/**\n\t\t * Update an item in our key/value pair that represents our fields and calc values.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tcalcModel\n\t\t * @param  string \t\t\tkey\n\t\t * @param  string \t\t\tcalcValue\n\t\t * @return void\n\t\t */\n\t\tupdateCalcFields: function( calcModel, key, calcValue ) {\n\t\t\tvar fields = calcModel.get( 'fields' );\n\t\t\tfields[ key ] = calcValue;\n\t\t\tcalcModel.set( 'fields', fields );\n\t\t},\n\n\t\t/**\n\t\t * Get a calc value from a field model.\n\t\t *\n\t\t * Sends a request to see if there's a special calc value\n\t\t * Uses the value of the field if there is not.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model fieldModel\n\t\t * @return value\n\t\t */\n\t\tgetCalcValue: function( fieldModel ) {\n\t\t\t/*\n\t\t\t * Send out a request on the field type and parent type channel asking if they need to modify the calc value.\n\t\t\t * This is helpful for fields like lists that can have a different calc_value than selected value.\n\t\t\t */\n\t\t\tvar value = nfRadio.channel( fieldModel.get( 'type' ) ).request( 'get:calcValue', fieldModel );\n\n\t\t\t// If value is 'undefined', then we got no response. Set value to field model value.\n\t\t\tif ( 'undefined' == typeof value ) {\n\t\t\t\tif ( jQuery.isNumeric( fieldModel.get( 'value' ) ) ) {\n\t\t\t\t\tvalue = fieldModel.get( 'value' );\n\t\t\t\t} else {\n\t\t\t\t\tvalue = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( ! fieldModel.get( 'visible' ) ) {\n\t\t\t\tvalue = 0;\n\t\t\t}\n\n\t\t\treturn ( jQuery.isNumeric( value ) ) ? value : 0;\n\t\t},\n\n\t\t/**\n\t\t * Replace instances of key with calcValue. This is used to replace one key at a time.\n\t\t *\n\t\t * If no eq is passed, use calcModel eq.\n\t\t *\n\t\t * Returns a string with instances of key replaced with calcValue.\n\t\t * \n\t\t * @since  version\n\t\t * @param  string \tkey       \n\t\t * @param  string \tcalcValue \n\t\t * @param  string \teq        \n\t\t * @return string \teq      \n\t\t */\n\t\treplaceKey: function( type, key, calcValue, eq ) {\n\t\t\teq = eq || calcModel.get( 'eq' );\n\n\t\t\ttag = '{' + type + ':' + key + '}';\n\t\t\tvar reTag = new RegExp( tag, 'g' );\n\n\t\t\tcalcTag = '{' + type + ':' + key + ':calc}';\n\t\t\tvar reCalcTag = new RegExp( calcTag, 'g' );\n\n\t\t\teq = eq.replace( reTag, calcValue );\n\t\t\teq = eq.replace( reCalcTag, calcValue );\n\n\t\t\treturn eq;\n\t\t},\n\n\t\t/**\n\t\t * Takes a calcModel and returns a string eq with all keys replaced by their appropriate calcValues.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tcalcModel\n\t\t * @return string\t\t\teq\n\t\t */\n\t\treplaceAllKeys: function( calcModel ) {\n\t\t\tvar eq = calcModel.get( 'eq' );\n\t\t\tvar that = this;\n\t\t\t_.each( calcModel.get( 'fields' ), function( value, key ) {\n\t\t\t\teq = that.replaceKey( 'field', key, value, eq );\n\t\t\t} );\n\n\t\t\t// If we have any calc merge tags, replace those as well.\n\t\t\tvar calcs = eq.match( new RegExp( /{calc:(.*?)}/g ) );\n\t\t\tif ( calcs ) {\n\t\t\t\t_.each( calcs, function( calc ) {\n\t\t\t\t\t// calc will be {calc:key}\n\t\t\t\t\tvar name = calc.replace( '}', '' ).replace( '{calc:', '' );\n\t\t\t\t\tvar targetCalcModel = calcModel.collection.findWhere( { name: name } );\n                    if( 'undefined' == typeof targetCalcModel ) return;\n\t\t\t\t\tvar re = new RegExp( calc, 'g' );\n\t\t\t\t\teq = eq.replace( re, targetCalcModel.get( 'value' ) );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn eq;\n\t\t},\n\n\t\t/**\n\t\t * Function that's called when a field within the calculation changes.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model calcModel\n\t\t * @param  backbone.model fieldModel\n\t\t * @return void\n\t\t */\n\t\tchangeField: function( calcModel, fieldModel ) {\n\t\t\tvar key = fieldModel.get( 'key' );\n\t\t\tvar value = this.getCalcValue( fieldModel );\n\t\t\tthis.updateCalcFields( calcModel, key, value );\n\t\t\tvar eqValues = this.replaceAllKeys( calcModel );\n\n            // Scrub unmerged tags (ie deleted/nox-existent fields/calcs, etc).\n            eqValues = eqValues.replace( /{([a-zA-Z0-9]|:|_|-)*}/g, '0' );\n\n            eqValues = eqValues.replace( /\\r?\\n|\\r/g, '' );\n            try {\n\t\t\t     calcModel.set( 'value', Number( mexp.eval( eqValues ) ).toFixed( calcModel.get( 'dec' ) ) );\n            } catch( e ) {\n                console.log( e );\n            }\n            if( calcModel.get( 'value' ) === 'NaN' ) calcModel.set( 'value', '0' );\n\n\t\t\t// Debugging console statement.\n\t\t\t// console.log( eqValues + ' = ' + calcModel.get( 'value' ) );\t\t\n\t\t},\n\n\t\tinitDisplayField: function( fieldModel ) {\n\n\t\t\tif( ! fieldModel.get( 'default' ) || 'string' != typeof fieldModel.get( 'default' ) ) return;\n\n\t\t\tvar calcs = fieldModel.get( 'default' ).match( new RegExp( /{calc:(.*?)}/g ) );\n\t\t\tif ( calcs ) {\n\t\t\t\t_.each( calcs, function( calcName ) {\n\t\t\t\t\tcalcName = calcName.replace( '{calc:', '' ).replace( '}', '' ).replace( ':2', '' );\n\t\t\t\t\tthis.displayFields[ calcName ] = this.displayFields[ calcName ] || [];\n\t\t\t\t\tthis.displayFields[ calcName ].push( fieldModel );\n\t\t\t\t}, this );\n\t\t\t}\n\t\t},\n\n\t\tupdateDisplayFields: function( calcModel ) {\n\t\t\tvar that = this;\n\t\t\tif ( 'undefined' != typeof this.displayFields[ calcModel.get( 'name' ) ] ) {\n\t\t\t\t_.each( this.displayFields[ calcModel.get( 'name' ) ], function( fieldModel ) {\n\t\t\t\t\tvar value = fieldModel.get( 'default' );\n\t\t\t\t\tvar calcs = value.match( new RegExp( /{calc:(.*?)}/g ) );\n\t\t\t\t\t_.each( calcs, function( calc ) {\n//\t\t\t\t\t\tvar rounding = false;\n\t\t\t\t\t\t// calc will be {calc:key} or {calc:key:2}\n\t\t\t\t\t\tvar name = calc.replace( '}', '' ).replace( '{calc:', '' ).replace( ':2', '' );\n\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * TODO: Bandaid for rounding calculations to two decimal places when displaying the merge tag.\n\t\t\t\t\t\t * Checks to see if we have a :2. If we do, remove it and set our rounding variable to true.\n\t\t\t\t\t\t */\n//\t\t\t\t\t\tif ( -1 != name.indexOf( ':2' ) ) {\n//\t\t\t\t\t\t\trounding = true;\n//\t\t\t\t\t\t\tname = name.replace( ':2', '' );\n//\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar calcModel = that.calcs[ fieldModel.get( 'formID' ) ].findWhere( { name: name } );\n\t\t\t\t\t\tvar re = new RegExp( calc, 'g' );\n\t\t\t\t\t\tvar calcValue = calcModel.get( 'value' ) ;\n//\t\t\t\t\t\tif ( rounding ) {\n//\t\t\t\t\t\t\tcalcValue = calcValue.toFixed( 2 );\n//\t\t\t\t\t\t\trounding = false;\n//\t\t\t\t\t\t}\n                        if( 'undefined' != typeof( calcValue ) ) {\n                            calcValue = that.applyLocaleFormatting( calcValue );\n                        }\n\t\t\t\t\t\tvalue = value.replace( re, calcValue );\n\t\t\t\t\t} );\n\t\t\t\t\tfieldModel.set( 'value', value );\n\t\t\t\t\tif ( ! that.init[ calcModel.get( 'name' ) ] ) {\n\t\t\t\t\t\t// fieldModel.set( 'reRender', true );\n\t\t\t\t\t\tfieldModel.trigger( 'reRender' );\n\t\t\t\t\t}\n\t\t\t\t\tthat.init[ calcModel.get( 'name' ) ] = false;\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\n\t\tgetCalc: function( name, formID ) {\n\t\t\treturn this.calcs[ formID ].findWhere( { name: name } );\n\t\t},\n\n\t\tchangeCalc: function( calcModel, targetCalcModel ) {\n\t\t\tvar eqValues = this.replaceAllKeys( calcModel );\n\t\t\teqValues = eqValues.replace( '[', '' ).replace( ']', '' );\n            eqValues = eqValues.replace( /\\r?\\n|\\r/g, '' );\n            try {\n\t\t\t     calcModel.set( 'value', Number( mexp.eval( eqValues ) ).toFixed( calcModel.get( 'dec' ) ) );\n            } catch( e ) {\n                console.log( e );\n            }\n            if( calcModel.get( 'value' ) === 'NaN' ) calcModel.set( 'value', '0' );\n\t\t},\n        \n        /**\n         * Function to apply Locale Formatting to Calculations\n         * @since Version 3.1\n         * @param Str number\n         * \n         * @return Str\n         */\n        applyLocaleFormatting: function( number ) {\n            \n            // Split our string on the decimal to preserve context.\n            var splitNumber = number.split('.');\n            // If we have more than one element (if we had a decimal point)...\n            if ( splitNumber.length > 1 ) {\n                // Update the thousands and remerge the array.\n                splitNumber[ 0 ] = splitNumber[ 0 ].replace( /\\B(?=(\\d{3})+(?!\\d))/g, nfi18n.thousands_sep );\n                var formattedNumber = splitNumber.join( nfi18n.decimal_point );\n            }\n            // Otherwise (we had no decimal point)...\n            else {\n                // Update the thousands.\n                var formattedNumber = number.replace( /\\B(?=(\\d{3})+(?!\\d))/g, nfi18n.thousands_sep );\n            }\n            return formattedNumber;\n        }\n\t});\n\n\treturn controller;\n} );\n\n","define('controllers/fieldDate',[], function() {\n    var controller = Marionette.Object.extend({\n\n        initialize: function () {\n            this.listenTo( nfRadio.channel( 'date' ), 'render:view', this.initDatepicker );\n        },\n\n        initDatepicker: function ( view ) {\n\n            var dateFormat = view.model.get( 'date_format' );\n\n            // For \"default\" date format, convert PHP format to JS compatible format.\n            if( 'default' == dateFormat ){\n                dateFormat = this.convertDateFormat( nfi18n.dateFormat );\n            }\n\n            var el = jQuery( view.el ).find( '.nf-element' )[0];\n            var dateObject = pikadayResponsive( el, {\n                format: dateFormat,\n                outputFormat: dateFormat,\n                classes: jQuery( el ).attr( \"class\" ),\n                placeholder: view.model.get( 'placeholder' ),\n                pikadayOptions: {\n                    yearRange:  this.getYearRange( view.model ),\n                    minDate: this.getMinDate( view.model ),\n                    maxDate: this.getMaxDate( view.model ),\n                    firstDay: parseInt( nfi18n.startOfWeek )\n                }\n            } );\n            if ( 1 == view.model.get( 'date_default' ) ) {\n               dateObject.setDate( moment() );\n            }\n\n            nfRadio.channel( 'pikaday' ).trigger( 'init', dateObject, view.model );\n        },\n\n        getYearRange: function( fieldModel ) {\n            var yearRange      = 10;\n            var yearRangeStart = fieldModel.get( 'year_range_start' );\n            var yearRangeEnd   = fieldModel.get( 'year_range_end'   );\n\n            if( yearRangeStart && yearRangeEnd ){\n                return [ yearRangeStart, yearRangeEnd ];\n            } else if( yearRangeStart ) {\n                yearRangeEnd = yearRangeStart + yearRange;\n                return [ yearRangeStart, yearRangeEnd ];\n            } else if( yearRangeEnd ) {\n                yearRangeStart = yearRangeEnd - yearRange;\n                return [ yearRangeStart, yearRangeEnd ];\n            }\n\n            return yearRange;\n        },\n\n        getMinDate: function( fieldModel ) {\n            var minDate = null;\n            var yearRangeStart = fieldModel.get( 'year_range_start' );\n\n            if( yearRangeStart ) {\n                return new Date( yearRangeStart, 0, 1 );\n            }\n\n            return minDate;\n        },\n\n        getMaxDate: function( fieldModel ) {\n            var maxDate = null;\n            var yearRangeEnd   = fieldModel.get( 'year_range_end' );\n\n            if( yearRangeEnd ) {\n                return new Date( yearRangeEnd, 11, 31 );\n            }\n\n            return maxDate;\n        },\n        \n        convertDateFormat: function( dateFormat ) {\n            // http://php.net/manual/en/function.date.php\n            // https://github.com/dbushell/Pikaday/blob/master/README.md#formatting\n            // Note: Be careful not to add overriding replacements. Order is important here.\n\n            /** Day */\n            dateFormat = dateFormat.replace( 'D', 'ddd' ); // @todo Ordering issue?\n            dateFormat = dateFormat.replace( 'd', 'DD' );\n            dateFormat = dateFormat.replace( 'l', 'dddd' );\n            dateFormat = dateFormat.replace( 'j', 'D' );\n            dateFormat = dateFormat.replace( 'N', '' ); // Not Supported\n            dateFormat = dateFormat.replace( 'S', '' ); // Not Supported\n            dateFormat = dateFormat.replace( 'w', 'd' );\n            dateFormat = dateFormat.replace( 'z', '' ); // Not Supported\n\n            /** Week */\n            dateFormat = dateFormat.replace( 'W', 'W' );\n\n            /** Month */\n            dateFormat = dateFormat.replace( 'M', 'MMM' ); // \"M\" before \"F\" or \"m\" to avoid overriding.\n            dateFormat = dateFormat.replace( 'F', 'MMMM' );\n            dateFormat = dateFormat.replace( 'm', 'MM' );\n            dateFormat = dateFormat.replace( 'n', 'M' );\n            dateFormat = dateFormat.replace( 't', '' );  // Not Supported\n\n            // Year\n            dateFormat = dateFormat.replace( 'L', '' ); // Not Supported\n            dateFormat = dateFormat.replace( 'o', 'YYYY' );\n            dateFormat = dateFormat.replace( 'Y', 'YYYY' );\n            dateFormat = dateFormat.replace( 'y', 'YY' );\n\n            // Time - Not supported\n            dateFormat = dateFormat.replace( 'a', '' );\n            dateFormat = dateFormat.replace( 'A', '' );\n            dateFormat = dateFormat.replace( 'B', '' );\n            dateFormat = dateFormat.replace( 'g', '' );\n            dateFormat = dateFormat.replace( 'G', '' );\n            dateFormat = dateFormat.replace( 'h', '' );\n            dateFormat = dateFormat.replace( 'H', '' );\n            dateFormat = dateFormat.replace( 'i', '' );\n            dateFormat = dateFormat.replace( 's', '' );\n            dateFormat = dateFormat.replace( 'u', '' );\n            dateFormat = dateFormat.replace( 'v', '' );\n\n            // Timezone - Not supported\n            dateFormat = dateFormat.replace( 'e', '' );\n            dateFormat = dateFormat.replace( 'I', '' );\n            dateFormat = dateFormat.replace( 'O', '' );\n            dateFormat = dateFormat.replace( 'P', '' );\n            dateFormat = dateFormat.replace( 'T', '' );\n            dateFormat = dateFormat.replace( 'Z', '' );\n\n            // Full Date/Time - Not Supported\n            dateFormat = dateFormat.replace( 'c', '' );\n            dateFormat = dateFormat.replace( 'r', '' );\n            dateFormat = dateFormat.replace( 'u', '' );\n\n            return dateFormat;\n        }\n    });\n\n    return controller;\n});\n\n","define('controllers/fieldRecaptcha',[], function() {\n    var controller = Marionette.Object.extend({\n\n        initialize: function () {\n            this.listenTo( nfRadio.channel( 'recaptcha' ), 'init:model',      this.initRecaptcha  );\n            this.listenTo( nfRadio.channel( 'forms' ),     'submit:response', this.resetRecaptcha );\n        },\n\n       \tinitRecaptcha: function ( model ) {\n       \t\tnfRadio.channel( 'recaptcha' ).reply( 'update:response', this.updateResponse, this, model.id );\n        },\n\n        updateResponse: function( response, fieldID ) {\n        \tvar model = nfRadio.channel( 'fields' ).request( 'get:field', fieldID );\n\t\t\tmodel.set( 'value', response );\n            nfRadio.channel( 'fields' ).request( 'remove:error', model.get( 'id' ), 'required-error' );\n        },\n\n        resetRecaptcha: function() {\n\t\t\tvar recaptchaID = 0;\n\t\t\tjQuery( '.g-recaptcha' ).each( function() {\n\t\t\t\ttry {\n\t\t\t\t\tgrecaptcha.reset( recaptchaID );\n\t\t\t\t} catch( e ){\n\t\t\t\t\tconsole.log( 'Notice: Error trying to reset grecaptcha.' );\n\t\t\t\t}\n\t\t\t\trecaptchaID++;\n\t\t\t} );\n        }\n    });\n\n    return controller;\n} );\n","define('controllers/fieldHTML',[], function() {\n    var controller = Marionette.Object.extend({\n\n        htmlFields: [],\n        trackedMergeTags: [],\n\n        initialize: function () {\n            this.listenTo( Backbone.Radio.channel( 'fields-html' ), 'init:model', this.setupFieldMergeTagTracking );\n        },\n\n        setupFieldMergeTagTracking: function( fieldModel ) {\n            this.htmlFields.push( fieldModel );\n\n            var formID = fieldModel.get( 'formID' );\n\n            this.listenTo( nfRadio.channel( 'form-' + formID ), 'init:model', function( formModel ){\n\n                var mergeTags = fieldModel.get( 'default' ).match( new RegExp( /{field:(.*?)}/g ) );\n                if ( ! mergeTags ) return;\n\n                _.each( mergeTags, function( mergeTag ) {\n                    var fieldKey = mergeTag.replace( '{field:', '' ).replace( '}', '' );\n                    var fieldModel = formModel.get( 'fields' ).findWhere({ key: fieldKey });\n                    if( 'undefined' == typeof fieldModel ) return;\n\n                    this.trackedMergeTags.push( fieldModel );\n                    this.listenTo( nfRadio.channel( 'field-' + fieldModel.get( 'id' ) ), 'change:modelValue', this.updateFieldMergeTags );\n                }, this );\n\n                // Let's get this party started!\n                this.updateFieldMergeTags();\n            }, this );\n        },\n\n        updateFieldMergeTags: function( fieldModel ) {\n            _.each( this.htmlFields, function( htmlFieldModel ){\n                var value = htmlFieldModel.get( 'default' );\n               _.each( this.trackedMergeTags, function( fieldModel ){\n                    var mergeTag = '{field:' + fieldModel.get( 'key' ) + '}';\n                    value = value.replace( mergeTag, fieldModel.get( 'value' ) );\n               }, this ) ;\n               htmlFieldModel.set( 'value', value );\n               htmlFieldModel.trigger( 'reRender' );\n            }, this );\n        }\n\n    });\n\n    return controller;\n});\n\n","/**\n * When a form is loaded, enable any help text that appears on the page.\n */\ndefine('controllers/helpText',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'form' ), 'render:view', this.initHelpText );\n\n\t\t\tnfRadio.channel( 'form' ).reply( 'init:help', this.initHelpText );\n\t\t},\n\n\t\tinitHelpText: function( view ) {\n\t\t\tjQuery( view.el ).find( '.nf-help' ).each( function() {\n\t\t\t\tvar jBox = jQuery( this ).jBox( 'Tooltip', {\n\t\t\t\t\ttheme: 'TooltipBorder',\n\t\t\t\t\tcontent: jQuery( this ).data( 'text' )\n\t\t\t\t});\n\t\t\t} );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * When a form is loaded, enable any rtes in textareas.\n */\ndefine('controllers/fieldTextareaRTE',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'textarea' ), 'render:view', this.initTextareaRTEs );\n\t\t\tthis.listenTo( nfRadio.channel( 'textarea' ), 'click:extra', this.clickExtra );\n\n\t\t\t// Instantiates the variable that holds the media library frame.\n\t\t\tthis.meta_image_frame;\n\n\t\t\tthis.currentContext = {};\n\n\t\t\tif( 'undefined' == typeof jQuery.summernote ) return;\n\n\t\t\tjQuery.summernote.options.icons = {\n\t\t        'align': 'dashicons dashicons-editor-alignleft',\n\t\t        'alignCenter': 'dashicons dashicons-editor-aligncenter',\n\t\t        'alignJustify': 'dashicons dashicons-editor-justify',\n\t\t        'alignLeft': 'dashicons dashicons-editor-alignleft',\n\t\t        'alignRight': 'dashicons dashicons-editor-alignright',\n\t\t        'indent': 'dashicons dashicons-editor-indent',\n\t\t        'outdent': 'dashicons dashicons-editor-outdent',\n\t\t        // 'arrowsAlt': 'dashicons fa-arrows-alt',\n\t\t        'bold': 'dashicons dashicons-editor-bold',\n\t\t        'caret': 'dashicons dashicons-arrow-down',\n\t\t        // 'circle': 'dashicons fa-circle',\n\t\t        'close': 'dashicons dashicons-dismiss',\n\t\t        'code': 'dashicons dashicons-editor-code',\n\t\t        'eraser': 'dashicons dashicons-editor-removeformatting',\n\t\t        // 'font': 'dashicons fa-font',\n\t\t        // 'frame': 'dashicons fa-frame',\n\t\t        'italic': 'dashicons dashicons-editor-italic',\n\t\t        'link': 'dashicons dashicons-admin-links',\n\t\t        'unlink': 'dashicons dashicons-editor-unlink',\n\t\t        'magic': 'dashicons dashicons-editor-paragraph',\n\t\t        // 'menuCheck': 'dashicons fa-check',\n\t\t        'minus': 'dashicons dashicons-minus',\n\t\t        'orderedlist': 'dashicons dashicons-editor-ol',\n\t\t        // 'pencil': 'dashicons fa-pencil',\n\t\t        // 'picture': 'dashicons fa-picture-o',\n\t\t        // 'question': 'dashicons fa-question',\n\t\t        'redo': 'dashicons dashicons-redo',\n\t\t        'square': 'dashicons fa-square',\n\t\t        // 'strikethrough': 'dashicons fa-strikethrough',\n\t\t        // 'subscript': 'dashicons fa-subscript',\n\t\t        // 'superscript': 'dashicons fa-superscript',\n\t\t        'table': 'dashicons dashicons-editor-table',\n\t\t        // 'textHeight': 'dashicons fa-text-height',\n\t\t        // 'trash': 'dashicons fa-trash',\n\t\t        'underline': 'dashicons dashicons-editor-underline',\n\t\t        'undo': 'dashicons dashicons-undo',\n\t\t        'unorderedlist': 'dashicons dashicons-editor-ul',\n\t\t        // 'video': 'dashicons fa-youtube-play'\n\t\t      };\n\n\t\t},\n\n\t\tinitTextareaRTEs: function( view ) {\n\t\t\tif ( 1 != view.model.get( 'textarea_rte' ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t/*\n\t\t\t * Custom Button for links\n\t\t\t */\n\t\t\tvar that = this;\n\t\t\t// var linkButton = this.linkButton();\n\t\t\tvar linkButton = function( context ) {\n\t\t\t\treturn that.linkButton( context );\n\t\t\t}\n\t\t\tvar mediaButton = function( context ) {\n\t\t\t\treturn that.mediaButton( context );\n\t\t\t}\n\n\t\t\tvar toolbar = [\n\t\t\t\t[ 'paragraphStyle', ['style'] ],\n\t\t\t\t[ 'fontStyle', [ 'bold', 'italic', 'underline','clear' ] ],\n\t\t\t\t[ 'lists', [ 'ul', 'ol' ] ],\n\t\t\t    [ 'paragraph', [ 'paragraph' ] ],\n\t\t\t    [ 'customGroup', [ 'linkButton', 'unlink' ] ],\n\t\t\t    [ 'table', [ 'table' ] ],\n\t\t\t    [ 'actions', [ 'undo', 'redo' ] ],\n\t\t\t];\n\n\t\t\tif ( 1 == view.model.get( 'textarea_media' ) && 0 != userSettings.uid ) {\n\t\t\t\ttoolbar.push( [ 'tools', [ 'mediaButton' ] ] );\n\t\t\t}\n\n\t\t\tjQuery( view.el ).find( '.nf-element' ).summernote( {\n\t\t\t\ttoolbar: toolbar,\n\t\t\t\tbuttons: {\n\t\t\t\t\tlinkButton: linkButton,\n\t\t\t\t\tmediaButton: mediaButton\n\t\t\t\t},\n\t\t\t\theight: 150,   //set editable area's height\n\t\t\t\tcodemirror: { // codemirror options\n\t\t\t\t    theme: 'monokai',\n\t\t\t\t    lineNumbers: true\n\t\t\t\t},\n\t\t\t\tprettifyHtml: true,\n\t\t\t\tcallbacks: {\n\t\t\t\t\tonChange: function( e ) {\n\t\t\t\t\t\tview.model.set( 'value', jQuery( this ).summernote( 'code' ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tvar linkMenu = jQuery( view.el ).find( '.link-button' ).next( '.dropdown-menu' ).find( 'button' );\n\t\t\tlinkMenu.replaceWith(function () {\n\t\t\t    return jQuery( '<div/>', {\n\t\t\t        class: jQuery( linkMenu ).attr( 'class' ),\n\t\t\t        html: this.innerHTML\n\t\t\t    } );\n\t\t\t} );\n\t\t},\n\n\t\tlinkButton: function( context ) {\n\t\t\tvar that = this;\n\t\t\tvar ui = jQuery.summernote.ui;\n\t\t\tvar linkButton = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-rte-link-button' );\n\t\t\tvar linkDropdown = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-rte-link-dropdown' );\n\t\t\treturn ui.buttonGroup([\n\t\t\t\tui.button({\n\t            className: 'dropdown-toggle link-button',\n\t            contents: linkButton({}),\n\t            tooltip: nfi18n.fieldTextareaRTEInsertLink,\n\t            click: function( e ) {\n\t            \tthat.clickLinkButton( e, context );\n\t            },\n\t            data: {\n\t              toggle: 'dropdown'\n\t            }\n\t          }),\n\t\t\t\tui.dropdown([\n\t            ui.buttonGroup({\n\t              children: [\n\t                ui.button({\n\t                  contents: linkDropdown({}),\n\t                  tooltip: ''\n\t                }),\n\t              ]\n\t            })\n\t          ])\n\t\t\t]).render();\n\t\t},\n\n\t\tmediaButton: function( context ) {\n\t\t\tvar that = this;\n\t\t\tvar ui = jQuery.summernote.ui;\n\t\t\tvar mediaButton = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-rte-media-button' );\n\t\t\treturn ui.button({\n\t            className: 'dropdown-toggle',\n\t            contents: mediaButton({}),\n\t            tooltip: nfi18n.fieldTextareaRTEInsertMedia,\n\t            click: function( e ) {\n\t            \tthat.openMediaManager( e, context );\n\t            }\n\t          }).render();\n\t\t},\n\n\t\topenMediaManager: function( e, context ) {\n\t\t\tcontext.invoke( 'editor.saveRange' );\n\t\t\t// If the frame already exists, re-open it.\n\t\t\tif ( this.meta_image_frame ) {\n\t\t\t\tthis.meta_image_frame.open();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Sets up the media library frame\n\t\t\tthis.meta_image_frame = wp.media.frames.meta_image_frame = wp.media({\n\t\t\t\ttitle: nfi18n.fieldTextareaRTESelectAFile,\n\t\t\t\tbutton: { text:  'insert' }\n\t\t\t});\n\n\t\t\tvar that = this;\n\n\t\t\t// Runs when an image is selected.\n\t\t\tthis.meta_image_frame.on('select', function(){\n\n\t\t\t\t// Grabs the attachment selection and creates a JSON representation of the model.\n\t\t\t\tvar media_attachment = that.meta_image_frame.state().get('selection').first().toJSON();\n\t\t\t\tthat.insertMedia( media_attachment, context );\n\t\t\t});\n\n\t\t\t// Opens the media library frame.\n\t\t\tthis.meta_image_frame.open();\n\t\t},\n\n\t\tclickLinkButton: function ( e, context ) {\n\t\t\tvar range = context.invoke( 'editor.createRange' );\n\t\t\tcontext.invoke( 'editor.saveRange' );\n\t\t\tvar text = range.toString()\n\t\t\tthis.currentContext = context;\n\n\t\t\tjQuery( e.target ).closest( '.note-customGroup > .note-btn-group' ).on ('hide.bs.dropdown', function ( e ) {\n\t\t\t\treturn false;\n\t\t\t});\n\n\t\t\tjQuery( e.target ).closest( '.note-customGroup > .note-btn-group' ).on ('shown.bs.dropdown', function ( e ) {\n\t\t\t\tjQuery( e.target ).parent().parent().find( '.link-text' ).val( text );\n\t\t\t\tjQuery( e.target ).parent().parent().find( '.link-url' ).focus();\n\t\t\t});\n\t\t},\n\n\t\tclickExtra: function( e ) {\n\t\t\tvar textEl = jQuery( e.target ).parent().find( '.link-text' );\n\t\t\tvar urlEl = jQuery( e.target ).parent().find( '.link-url' );\n\t\t\tvar isNewWindowEl = jQuery( e.target ).parent().find( '.link-new-window' );\n\t\t\tthis.currentContext.invoke( 'editor.restoreRange' );\n\t\t\tif ( jQuery( e.target ).hasClass( 'insert-link' ) ) {\n\t\t\t\tvar text = textEl.val();\n\t\t\t\tvar url = urlEl.val();\n\t\t\t\tvar isNewWindow = ( isNewWindowEl.prop( 'checked' ) ) ? true: false;\n\t\t\t\tif ( 0 != text.length && 0 != url.length ) {\n\t\t\t\t\tthis.currentContext.invoke( 'editor.createLink', { text:text, url: url, isNewWindow: isNewWindow } );\n\t\t\t\t}\n\t\t\t}\n\t\t\ttextEl.val( '' );\n\t\t\turlEl.val( '' );\n\t\t\tisNewWindowEl.prop( 'checked', false );\n\t\t\tjQuery( e.target ).closest( 'div.note-btn-group.open' ).removeClass( 'open' );\n\t\t},\n\n\t\tinsertMedia: function( media, context ) {\n\t\t\tcontext.invoke( 'editor.restoreRange' );\n\t\t\tif ( 'image' == media.type ) {\n\t\t\t\tcontext.invoke( 'editor.insertImage', media.url );\n\t\t\t} else {\n\t\t\t\tcontext.invoke( 'editor.createLink', { text: media.filename, url: media.url } );\n\t\t\t}\n\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","define('controllers/fieldStarRating',[], function() {\n    var controller = Marionette.Object.extend( {\n\n        initialize: function() {\n        \tthis.listenTo( nfRadio.channel( 'starrating' ), 'init:model', this.register );\n            this.listenTo( nfRadio.channel( 'starrating' ), 'render:view', this.initRating );\n        },\n\n        register: function( model ) {\n\t\t\tmodel.set( 'renderRatings', this.renderRatings );\n\t\t},\n\n        initRating: function( view ){\n            jQuery( view.el ).find( '.starrating' ).rating();\n        },\n\n        renderRatings: function() {\n\n        \tvar html = document.createElement( 'span' );\n        \tfor (var i = 0; i <= this.default - 1; i++) {\n                var template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-field-starrating-star' );\n                var num = i + 1;\n                var htmlFragment = template( { id: this.id, classes: this.classes, num: num } );\n                html.appendChild(\n                    document.createRange().createContextualFragment( htmlFragment )\n                );\n        \t}\n        \treturn html.innerHTML;\n        }\n\n    });\n\n    return controller;\n});\n\n","define('controllers/fieldTerms',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'terms' ), 'init:model', this.register );\n        },\n\n        register: function( model ) {\n            // nfRadio.channel( 'field-' + this.model.get( 'id' ) ).trigger( 'click:extra', e, this.model );\n            this.listenTo( nfRadio.channel( 'field-' + model.get( 'id' ) ), 'click:extra', this.clickExtra );\n            this.listenTo( nfRadio.channel( 'field-' + model.get( 'id' ) ), 'keyup:field', this.keyUpExtra );\n        },\n        \n        clickExtra: function( e, model ) {\n            var el = jQuery( e.currentTarget );\n            var value = el.parent().find( '.extra-value' ).val();\n            this.addOption( model, value );\n        },\n\n        keyUpExtra: function( el, model, keyCode ) {\n            if( 13 != keyCode ) return;\n            this.addOption( model, el.val() );\n        },\n\n        addOption: function( model, value ) {\n            if( ! value ) return;\n            var options = model.get( 'options' );\n            var new_option = {\n                label: value,\n                value: value,\n                selected: 0,\n            };\n            options.push( new_option );\n\n            var selected = model.get( 'value' );\n            selected.push( value );\n\n            // model.set( 'reRender', true );\n            model.trigger( 'reRender' );\n        }\n        \n    });\n\n    return controller;\n} );\n","/**\n * Before we display our form content, ask if anyone wants to give us a different view.\n * Before we do anything with the data, pass it through any loading filters.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2016 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/formContentFilters',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * Init our fieldContent view and load filter arrays.\n\t\t\t */\n\t\t\tthis.viewFilters = [];\n\t\t\tthis.loadFilters = [];\n\n\t\t\t/*\n\t\t\t * Listen for requests to add new formContent filters.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'add:viewFilter', this.addViewFilter, this );\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'add:loadFilter', this.addLoadFilter, this );\n\n\t\t\t/*\n\t\t\t * Listen for requests to get our formContent filters.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'get:viewFilters', this.getViewFilters, this );\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'get:loadFilters', this.getLoadFilters, this );\n\n\t\t\t/*\n\t\t\t * -- DEPRECATED RADIO REPLIES --\n\t\t\t * \n\t\t\t * The 'fieldContents' channel has been deprecated as of 3.0 (it was present in the RC) in favour of 'formContent'.\n\t\t\t * Listen for requests to add new fieldContent filters.\n\t\t\t * \n\t\t\t * TODO: These radio listeners on the 'fieldContents' channels are here for backwards compatibility and should be removed eventually.\n\t\t\t */\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'add:viewFilter', this.addViewFilter, this );\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'add:loadFilter', this.addLoadFilter, this );\n\n\t\t\t/*\n\t\t\t * Listen for requests to get our fieldContent filters.\n\t\t\t * TODO: Remove eventually.\n\t\t\t */\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'get:viewFilters', this.getViewFilters, this );\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'get:loadFilters', this.getLoadFilters, this );\n\t\t\n\t\t\t/*\n\t\t\t * -- END DEPRECATED --\n\t\t\t */\n\t\t},\n\n\t\taddViewFilter: function( callback, priority ) {\n\t\t\tthis.viewFilters[ priority ] = callback;\n\t\t},\n\n\t\tgetViewFilters: function() {\n\t\t\treturn this.viewFilters;\n\t\t},\n\n\t\taddLoadFilter: function( callback, priority ) {\n\t\t\tthis.loadFilters[ priority ] = callback;\n\t\t},\n\n\t\tgetLoadFilters: function() {\n\t\t\treturn this.loadFilters;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","define( 'views/fieldItem',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\n\t\tinitialize: function() {\n    \t\tthis.listenTo( this.model, 'reRender', this.render, this );\n    \t\tthis.listenTo( this.model, 'change:addWrapperClass', this.addWrapperClass, this );\n    \t\tthis.listenTo( this.model, 'change:removeWrapperClass', this.removeWrapperClass, this );\n    \t\tthis.listenTo( this.model, 'change:invalid', this.toggleAriaInvalid, this );\n\n    \t\tthis.template = '#tmpl-nf-field-' + this.model.get( 'wrap_template' );\n\t\t},\n\n\t\ttest: function( model ) {\n\t\t\tconsole.log( 'firing from trigger 1' );\n\t\t},\n\n\t\taddWrapperClass: function() {\n\t\t\tvar cl = this.model.get( 'addWrapperClass' );\n\t\t\tif ( '' != cl ) {\n\t\t\t\tjQuery( this.el ).addClass( cl );\n\t\t\t\tthis.model.set( 'addWrapperClass', '' );\n\t\t\t}\n\t\t},\n\n\t\tremoveWrapperClass: function() {\n\t\t\tvar cl = this.model.get( 'removeWrapperClass' );\n\t\t\tif ( '' != cl ) {\n\t\t\t\tjQuery( this.el ).removeClass( cl );\n\t\t\t\tthis.model.set( 'removeWrapperClass', '' );\n\t\t\t}\n\t\t},\n\n\t\ttoggleAriaInvalid: function() {\n\t\t\tvar invalid = this.model.get( 'invalid' );\n\t\t\tjQuery( '[aria-invalid]', this.el ).attr( 'aria-invalid', JSON.stringify( invalid ) );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\n\t   \t\t/*\n    \t\t * If we have an input mask, init that mask.\n    \t\t * TODO: Move this to a controller so that the logic isn't in the view.\n    \t\t */\n    \t\tif ( 'undefined' != typeof this.model.get( 'mask' ) && '' != jQuery.trim( this.model.get( 'mask' ) ) ) {\n    \t\t\tif ( 'custom' == this.model.get( 'mask') ) {\n    \t\t\t\tvar mask = this.model.get( 'custom_mask' );\n    \t\t\t} else {\n    \t\t\t\tvar mask = this.model.get( 'mask' );\n    \t\t\t}\n\n\t\t\t\t/* POLYFILL */ Number.isInteger = Number.isInteger || function(value) { return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value; };\n    \t\t\tif ( Number.isInteger( mask ) ) {\n    \t\t\t\tmask = mask.toString();\n    \t\t\t}\n\n\t\t\t\tif ( 'currency' == mask ) {\n\t\t\t\t\tvar form = nfRadio.channel( 'app' ).request( 'get:form', this.model.get( 'formID' ) );\n\n\t\t\t\t\tvar thousands_sep = form.get( 'thousands_sep' );\n\t\t\t\t\t/*\n\t\t\t\t\t * TODO: if we have a &nbsp; , replace it with a string with a space.\n\t\t\t\t\t */\n\t\t\t\t\tif ( '&nbsp;' == thousands_sep ) {\n\t\t\t\t\t\tthousands_sep = ' ';\n\t\t\t\t\t}\n\t\t\t\t\tvar currencySymbol = jQuery( '<div/>' ).html( form.get( 'currencySymbol' ) ).text();\n\t\t\t\t\tthousands_sep = jQuery( '<div/>' ).html( thousands_sep ).text();\n\t\t\t\t\tvar decimal_point = jQuery( '<div/>' ).html( form.get( 'decimal_point' ) ).text();\n\t\t\t\t\t\n\t\t\t\t\t/*\n\t\t\t\t\t * TODO: Currently, these options use the plugin-wide defaults for locale.\n\t\t\t\t\t * When per-form locales are implemented, these will need to be revisited.\n\t\t\t\t\t */\n\t\t\t\t\tvar autoNumericOptions = {\n\t\t\t\t\t    digitGroupSeparator        : thousands_sep,\n\t\t\t\t\t    decimalCharacter           : decimal_point,\n\t\t\t\t\t    currencySymbol             : currencySymbol\n\t\t\t\t\t};\n\n\t\t\t\t\t// Initialization\n\t\t\t\t\tvar autoN_el = jQuery(jQuery( this.el ).find( '.nf-element' )[ 0 ]);\n\t\t\t\t\tnew AutoNumeric( jQuery( this.el ).find( '.nf-element' )[ 0 ], autoNumericOptions );\n\t\t\t\t\t// update the value for the model so it gets saved to\n\t\t\t\t\t// the database properly\n\t\t\t\t\tvar context = this;\n\t\t\t\t\tautoN_el.on( 'change', function( e ) {\n\t\t\t\t\t\tcontext.model.set( 'value', e.target.value );\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\tjQuery( this.el ).find( '.nf-element' ).mask( mask );\n\t\t\t\t} \t\t\t\n\t   \t\t}\n\n\t\t\tnfRadio.channel( this.model.get( 'type' ) ).trigger( 'render:view', this );\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'render:view', this );\n\t\t},\n\n\t\ttemplateHelpers: function () {\n\t\t\tvar that = this;\n\t    \treturn {\n\n\t\t\t\trenderElement: function(){\n\t\t\t\t\tvar tmpl = _.find( this.element_templates, function( tmpl ) {\n\t\t\t\t\t\tif ( 0 < jQuery( '#tmpl-nf-field-' + tmpl ).length ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t\tvar template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-field-' + tmpl );\n\t\t\t\t\treturn template( this );\n\t\t\t\t},\n\n\t\t\t\trenderLabel: function() {\n\t\t\t\t\tvar template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-field-label' );\n\t\t\t\t\treturn template( this );\n\t\t\t\t},\n\n\t\t\t\trenderLabelClasses: function () {\n\t\t\t\t\tvar classes = '';\n\t\t\t\t\tif ( 'undefined' != typeof this.customLabelClasses ) {\n\t\t\t\t\t\tclasses = this.customLabelClasses( classes );\n\t\t\t\t\t}\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\n\t\t\t\trenderPlaceholder: function() {\n\t\t\t\t\tvar placeholder = this.placeholder;\n\n\t\t\t\t\tif ( 'undefined' != typeof this.customPlaceholder ) {\n\t\t\t\t\t\tplaceholder = this.customPlaceholder( placeholder );\n\t\t\t\t\t}\n\n\t\t\t\t\tif( '' != jQuery.trim( placeholder ) ) {\n\t\t\t\t\t\treturn 'placeholder=\"' + placeholder + '\"';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\trenderWrapClass: function() {\n\t\t\t\t\tvar wrapClass = 'field-wrap ' + this.type + '-wrap';\n\n\t\t\t\t\t// Check if type and parentType are different. If, so\n\t\t\t\t\t// then add appropriate parentType wrap class\n\t\t\t\t\tif ( this.type !== this.parentType ) {\n\t\t\t\t\t\twrapClass = wrapClass + ' ' + this.parentType + '-wrap';\n\t\t\t\t\t}\n\t\t\t\t\t// If we have an old_classname defined, output wrap class for backward compatibility\n\t\t\t\t\tif ( 'undefined' != typeof this.old_classname && 0 < jQuery.trim( this.old_classname ).length ) {\n\t\t\t\t\t\twrapClass += ' ' + this.old_classname + '-wrap';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( 'undefined' != typeof customWrapClass ) {\n\t\t\t\t\t\twrapClass = customWrapClass( wrapClass );\n\t\t\t\t\t}\n\n\t\t\t\t\treturn wrapClass;\n\t\t\t\t},\n\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tvar classes = this.classes;\n\n\t\t\t\t\tif ( this.error ) {\n\t\t\t\t\t\tclasses += ' nf-error';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclasses = classes.replace( 'nf-error', '' );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( 'undefined' != typeof this.element_class && 0 < jQuery.trim( this.element_class ).length ) {\n\t\t\t\t\t\tclasses += ' ' + this.element_class;\n\t\t\t\t\t}\n\n\t\t\t\t\t/*\n\t\t\t\t\t * If we have a function for adding extra classes, add those.\n\t\t\t\t\t */\n\n\t\t\t\t\tif ( 'undefined' != typeof this.customClasses ) {\n\t\t\t\t\t\tclasses = this.customClasses( classes );\n\t\t\t\t\t}\n\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\n\t\t\t\tmaybeDisabled: function() {\n\t\t\t\t\tif ( 1 == this.disable_input ) {\n\t\t\t\t\t\treturn 'disabled';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tmaybeDisableAutocomplete: function() {\n\t\t\t\t\tif ( 1 == this.disable_browser_autocomplete ) {\n\t\t\t\t\t\treturn 'autocomplete=\"off\"';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tmaybeInputLimit: function() {\n\t\t\t\t\tif ( 'characters' == this.input_limit_type && '' != jQuery.trim( this.input_limit ) ) {\n\t\t\t\t\t\treturn 'maxlength=\"' + this.input_limit + '\"';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tgetHelpText: function() {\n\t\t\t\t\t// this.help_text = jQuery( this.help_text ).html();\n\t\t\t\t\treturn ( 'undefined' != typeof this.help_text ) ? this.help_text.replace(/\"/g, \"&quot;\") : '';\n\t\t\t\t},\n\n\t\t\t\tmaybeRenderHelp: function() {\n\n\t\t\t\t\t// use jQuery().text() to make sure help_text has actual\n\t\t\t\t\t// text and not just HTML tags.\n\t\t\t\t\tvar check_text_par = document.createElement( 'p' );\n                    check_text_par.innerHTML = this.help_text;\n                    check_text_par.innerHTML = check_text_par.innerText || check_text_par.textContent;\n\n\n\t\t\t\t\tif ( 'undefined' != typeof this.help_text && 0 != jQuery.trim( jQuery( check_text_par ).text() ).length ) {\n\t\t\t\t\t\tvar icon = document.createElement( 'span' );\n\t\t\t\t\t\ticon.classList.add( 'fa', 'fa-info-circle', 'nf-help' );\n\t\t\t\t\t\ticon.setAttribute( 'data-text', this.getHelpText() );\n\t\t\t\t\t\treturn icon.outerHTML;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\trenderDescText: function() {\n\t\t\t\t\tif ( 'undefined' == typeof this.desc_text ) {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t\tvar check, checkText;\n\t\t\t\t\tcheckText = document.createTextNode( this.desc_text );\n\t\t\t\t\tcheck = document.createElement( 'p' );\n\t\t\t\t\tcheck.appendChild( checkText );\n\t\t\t\t\tif ( 0 != jQuery.trim( jQuery( check ).text() ).length ) {\n\t\t\t\t\t\tvar descriptionText, fieldDescription;\n                        descriptionText  = document.createRange().createContextualFragment( this.desc_text );\n                        fieldDescription  = document.createElement( 'div' );\n\t\t\t\t\t\tfieldDescription.classList.add( 'nf-field-description' );\n\t\t\t\t\t\tfieldDescription.appendChild( descriptionText );\n\t\t\t\t\t\treturn fieldDescription.outerHTML;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\trenderCurrencyFormatting: function( number ) {\n\t\t\t\t\t/*\n\t\t\t\t\t * Our number will have a . as a decimal point. We want to replace that with our locale decimal, nfi18n.decimal_point.\n\t\t\t\t\t */\n\t\t\t\t\tvar replacedDecimal = number.toString().replace( '.', '||' );\n\t\t\t\t\t/*\n\t\t\t\t\t * Add thousands separator. Our original number var won't have thousands separators.\n\t\t\t\t\t */\n\t\t\t\t\tvar replacedThousands = replacedDecimal.replace( /\\B(?=(\\d{3})+(?!\\d))/g, nfi18n.thousands_sep );\n\t\t\t\t\tvar formattedNumber = replacedThousands.replace( '||', nfi18n.decimal_point );\n\n\t\t\t\t\tvar form = nfRadio.channel( 'app' ).request( 'get:form', that.model.get( 'formID' ) );\n\t\t\t\t\tvar currency_symbol = form.get( 'settings' ).currency_symbol;\n\t\t\t\t\treturn currency_symbol + formattedNumber;\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\n\t\tevents: {\n\t\t\t'change .nf-element': 'fieldChange',\n\t\t\t'keyup .nf-element': 'fieldKeyup',\n\t\t\t'click .nf-element': 'fieldClick',\n\t\t\t'click .extra': 'extraClick',\n\t\t\t'blur .nf-element': 'fieldBlur'\n\t\t},\n\n\t\tfieldChange: function( e ) {\n\t\t\tvar el = jQuery( e.currentTarget );\n\t\t\tvar response = nfRadio.channel( 'nfAdmin' ).request( 'change:field', el, this.model );\n\t\t},\n\n\t\tfieldKeyup: function( e ) {\n\t\t\tvar el = jQuery( e.currentTarget );\n\t\t\tvar keyCode = e.keyCode;\n\t\t\tnfRadio.channel( 'field-' + this.model.get( 'id' ) ).trigger( 'keyup:field', el, this.model, keyCode );\n\t\t\tnfRadio.channel( this.model.get( 'type' ) ).trigger( 'keyup:field', el, this.model, keyCode );\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'keyup:field', el, this.model, keyCode );\n\t\t},\n\n\t\tfieldClick: function( e ) {\n\t\t\tvar el = jQuery( e.currentTarget );\n\t\t\tnfRadio.channel( 'field-' + this.model.get( 'id' ) ).trigger( 'click:field', el, this.model );\n\t\t\tnfRadio.channel( this.model.get( 'type' ) ).trigger( 'click:field', el, this.model );\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'click:field', el, this.model );\n\t\t},\n\n\t\textraClick: function( e ) {\n\t\t\tnfRadio.channel( 'field-' + this.model.get( 'id' ) ).trigger( 'click:extra', e, this.model );\n\t\t\tnfRadio.channel( this.model.get( 'type' ) ).trigger( 'click:extra', e, this.model );\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'click:extra', e, this.model );\n\t\t},\n\n\t\tfieldBlur: function( e ) {\n\t\t\tvar el = jQuery( e.currentTarget );\n\t\t\tnfRadio.channel( 'field-' + this.model.get( 'id' ) ).trigger( 'blur:field', el, this.model );\n\t\t\tnfRadio.channel( this.model.get( 'type' ) ).trigger( 'blur:field', el, this.model );\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'blur:field', el, this.model );\n\t\t},\n\n\t\tonAttach: function() {\n\t\t\tnfRadio.channel( this.model.get( 'type' ) ).trigger( 'attach:view', this );\n\t\t}\n\t});\n\n\treturn view;\n} );\n\n","define( 'views/beforeField',[], function() {\n    var view = Marionette.ItemView.extend({\n        tagName: 'nf-section',\n        template: '#tmpl-nf-field-before'\n    });\n\n    return view;\n} );\n","define( 'views/fieldErrorItem',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'nf-section',\n\t\ttemplate: '#tmpl-nf-field-error',\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t},\n\t});\n\n\treturn view;\n} );\n","define( 'views/fieldErrorCollection',['views/fieldErrorItem'], function( fieldErrorItem ) {\n\tvar view = Marionette.CollectionView.extend({\n\t\ttagName: \"nf-errors\",\n\t\tchildView: fieldErrorItem,\n\n\t\tinitialize: function( options ) {\n\t\t\tthis.fieldModel = options.fieldModel;\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tif ( 0 == this.fieldModel.get( 'errors' ).models.length ) {\n                this.fieldModel.removeWrapperClass( 'nf-error' );\n                this.fieldModel.removeWrapperClass( 'nf-fail' );\n                this.fieldModel.addWrapperClass( 'nf-pass' );\n                this.fieldModel.setInvalid( false );\n            } else {\n                this.fieldModel.removeWrapperClass( 'nf-pass' );\n                this.fieldModel.addWrapperClass( 'nf-fail' );\n                this.fieldModel.addWrapperClass( 'nf-error' );\n                this.fieldModel.setInvalid( true );\n            }\n\n\t\t}\n\t});\n\n\treturn view;\n} );\n\n","define( 'views/inputLimit',[], function() {\n    var view = Marionette.ItemView.extend({\n        tagName: 'nf-section',\n        template: '#tmpl-nf-field-input-limit',\n\n        initialize: function() {\n        \tthis.listenTo( nfRadio.channel( 'field-' + this.model.get( 'id' ) ), 'keyup:field', this.updateCount );\n        \tthis.count = this.model.get( 'input_limit' );\n        \tthis.render();\n        },\n\n        updateCount: function( el, model ) {\n            var value = jQuery( el ).val();\n            var regex = /\\s+/gi;\n            var words = value.trim().replace(regex, ' ').split(' ');\n            var wordCount = words.length;\n            var charCount = value.length;\n\n            if ( 'characters' == this.model.get( 'input_limit_type' ) ) {\n                jQuery( el ).attr( 'maxlength', this.model.get( 'input_limit' ) );\n                this.count = this.model.get( 'input_limit' ) - charCount;\n            } else {\n                this.count = this.model.get( 'input_limit' ) - wordCount;\n                var limit = this.model.get( 'input_limit' );\n                if( wordCount > limit ){\n                    jQuery( el ).val( words.slice( 0, limit).join( ' ' ) );\n                }\n            }\n\n        \tthis.render();\n        },\n\n        templateHelpers: function() {\n        \tvar that = this;\n        \treturn {\n        \t\tcurrentCount: function() {\n        \t\t\treturn that.count;\n        \t\t}\n        \t}\n        }\n\n    });\n\n    return view;\n} );\n","define( 'views/afterField',['views/fieldErrorCollection', 'views/inputLimit'], function( fieldErrorCollection, InputLimitView ) {\n    var view = Marionette.ItemView.extend({\n        tagName: 'nf-section',\n        template: '#tmpl-nf-field-after',\n\n        initialize: function() {\n    \t\tthis.model.on( 'change:errors', this.changeError, this );\n        },\n\n        onRender: function() {\n        \t/*\n        \t * If we have an error, render our error view.\n        \t * TODO: Perhaps move to a controller?\n        \t */\n        \tvar errorEl = jQuery( this.el ).children( '.nf-error-wrap' );\n    \t\tthis.errorCollectionView = new fieldErrorCollection( { el: errorEl, collection: this.model.get( 'errors' ), fieldModel: this.model } );\n            if ( 0 < this.model.get( 'errors' ).length ) {\n               this.errorCollectionView.render(); \n            }\n            \n    \t\t/*\n    \t\t * If we have an input limit set, render the view that contains our counter\n    \t\t * TODO: Move this to a controller so that the logic isn't in the view.\n    \t\t */\n    \t\tif ( 'undefined' != typeof this.model.get( 'input_limit' ) && '' != jQuery.trim( this.model.get( 'input_limit' ) ) ){\n    \t\t\tvar inputLimitEl = jQuery( this.el ).children( '.nf-input-limit');\n    \t\t\tthis.inputLimitView = new InputLimitView( { el: inputLimitEl, model: this.model } );\n    \t\t}\n        },\n\n        changeError: function() {\n\t\t\tthis.errorCollectionView.render();\n\t\t},\n\n    });\n\n    return view;\n} );\n","define( 'views/fieldLayout',['views/fieldItem', 'views/beforeField', 'views/afterField'], function( fieldItem, beforeField, afterField ) {\n\n    var view = Marionette.LayoutView.extend({\n        tagName: 'nf-field',\n\n        regions: {\n            beforeField: '.nf-before-field',\n            field: '.nf-field',\n            afterField: '.nf-after-field',\n        },\n\n        initialize: function() {\n            this.listenTo( this.model, 'change:visible', this.render, this );\n        },\n\n        getTemplate: function() {\n            if ( this.model.get( 'visible' ) ) {\n                return '#tmpl-nf-field-layout';\n            } else {\n                return '#tmpl-nf-empty';\n            }\n        },\n\n        onRender: function() {\n            if ( this.model.get( 'visible' ) ) {\n                this.beforeField.show( new beforeField( { model: this.model } ) );\n                this.field.show( new fieldItem( { model: this.model } ) );\n                this.afterField.show( new afterField( { model: this.model } ) );\n            }\n        },\n\n        templateHelpers: function() {\n            return {\n                renderContainerClass: function() {\n                    var containerClass = ' label-' + this.label_pos + ' ';\n                    // If we have a description position, add that to our container.\n                    if ( 'undefined' != typeof this.desc_pos ) {\n                        containerClass += 'desc-' + this.desc_pos + ' ';\n                    }\n                    // if we have a container_class field setting, add that to our container.\n                    if ( 'undefined' != typeof this.container_class && 0 < jQuery.trim( this.container_class ).length ) {\n                        containerClass += this.container_class + ' ';\n                    }\n\n                    //check if the parent type and type are different. If\n                    // so, add parent type container styling\n                    \n                    if( this.type !== this.parentType ) {\n                        containerClass += ' ' + this.parentType + '-container';\n                    }\n                    return containerClass;\n                }\n            }\n        }\n\n    });\n\n    return view;\n} );\n\n","/**\n * Return views that might be used in extensions.\n * These are un-instantiated views.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/loadViews',['views/fieldItem', 'views/fieldLayout'], function( fieldItemView, fieldLayoutView ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Reply to requests for our field item view.\n\t\t\tnfRadio.channel( 'views' ).reply( 'get:fieldItem', this.getFieldItem );\n\n\t\t\tnfRadio.channel( 'views' ).reply( 'get:fieldLayout', this.getFieldLayout );\n\t\t},\n\n\t\tgetFieldItem: function( model ) {\n\t\t\treturn fieldItemView;\n\t\t},\n\n\t\tgetFieldLayout: function() {\n\t\t\treturn fieldLayoutView;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * If a form has at least one field error, we should disable the submit button and add a form error.\n * If a form had errors, but all the field errors have been removed, we should remove the form error.\n *\n * @since 3.0\n */\ndefine('controllers/formErrors',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * Listen for error messages being added to and removed from fields.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'add:error', this.addError );\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'remove:error', this.removeError );\n\n\t\t\t/*\n\t\t\t * Respond to requests to get form errors\n\t\t\t */\n\t\t\tnfRadio.channel( 'form' ).reply( 'get:errors', this.getFormErrors );\n\t\t},\n\n\t\taddError: function( fieldModel, errorID, errorMsg ) {\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:form', fieldModel.get( 'formID' ) );\n\t\t\t/*\n\t\t\t * We store our errors in this object by field ID so that we don't have to loop over all our fields when we're testing for errors.\n\t\t\t * They are stored as an object within an array, using the field ID as the key.\n\t\t\t *\n\t\t\t * If we haven't setup an array item for this field, set it as an object.\n\t\t\t */\n\t\t\tif ( 'undefined' == typeof formModel.get( 'fieldErrors' )[ fieldModel.get( 'id' ) ] ) {\n\t\t\t\tformModel.get( 'fieldErrors' )[ fieldModel.get( 'id' ) ] = {};\n\t\t\t}\n\t\t\t// Add an error to our tracking array\n\t\t\tformModel.get( 'fieldErrors' )[ fieldModel.get( 'id' ) ][ errorID ] = errorMsg;\n\t\t\t/*\n\t\t\t * We have at least one field error, so submmission should be prevented.\n\t\t\t * Add a form error.\n\t\t\t */\n\t\t\tnfRadio.channel( 'form-' + fieldModel.get( 'formID' ) ).request( 'add:error', 'field-errors', formModel.get( 'settings' ).formErrorsCorrectErrors );\n\t\t},\n\n\t\tremoveError: function( fieldModel, errorID ) {\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:form', fieldModel.get( 'formID' ) );\n\t\t\t// Remove this error ID from our tracking array.\n\t\t\tformModel.get( 'fieldErrors' )[ fieldModel.get( 'id' ) ] = _.omit( formModel.get( 'fieldErrors' )[ fieldModel.get( 'id' ) ], errorID );\n\t\t\t/*\n\t\t\t * If we don't have any more error IDs on this field, then we need to remove this field from the array.\n\t\t\t *\n\t\t\t * Then, if the fieldErrors tracking array has a length of 0, we remove our form error, because all field errors have been dealt with.\n\t\t\t */\n\t\t\tif ( 0 == _.size( formModel.get( 'fieldErrors' )[ fieldModel.get( 'id' ) ] ) ) {\n\t\t\t\tdelete formModel.get( 'fieldErrors' )[ fieldModel.get( 'id' ) ];\n\t\t\t}\n\n\t\t\tif ( 0 == _.size( formModel.get( 'fieldErrors' ) ) ) {\n\t\t\t\t// Remove our form error.\n\t\t\t\tnfRadio.channel( 'form-' + fieldModel.get( 'formID' ) ).request( 'remove:error', 'field-errors' );\n\t\t\t}\n\t\t},\n\n\t\tgetFormErrors: function( formID ) {\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:form', formID );\n\t\t\tvar errors = false;\n\t\t\t\n\t\t\tif ( formModel ) {\n\t\t\t\t/*\n\t\t\t\t * Check to see if we have any errors on our form model.\n\t\t\t\t */\n\t\t\t\tif ( 0 !== formModel.get( 'errors' ).length ) {\n\t\t\t\t\t_.each( formModel.get( 'errors' ).models, function( error ) {\n\t\t\t\t\t\terrors = errors || {};\n\t\t\t\t\t\terrors[ error.get( 'id' ) ] = error.get( 'msg' );\n\t\t\t\t\t} );\t\t\t\t\t\t\n\t\t\t\t}\n\n\t\t\t\t\n\t\t\t}\n\t\t\treturn errors;\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles submission of our form.\n */\ndefine('controllers/submit',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'forms' ), 'init:model', this.registerSubmitHandler );\n\t\t},\n\n\t\t/**\n\t\t * Register the submission handler function.\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  Backbone.model \tformModel\n\t\t * @return void\n\t\t */\n\t\tregisterSubmitHandler: function( formModel ) {\n\t\t\tnfRadio.channel( 'form-' + formModel.get( 'id' ) ).reply( 'submit', this.submit );\n\t\t},\n\n\t\t/**\n\t\t * Handles the actual submission of our form.\n\t\t * When we submit:\n\t\t *\n\t\t * 1) Send out a message saying that we're about to begin form submission.\n\t\t * 2) Check the form for errors\n\t\t * 3) Submit the data\n\t\t * 4) Send out a message with our response\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  Backbone.model \tformModel\n\t\t * @return void\n\t\t */\n\t\tsubmit: function( formModel ) {\n\n\t\t\t/*\n\t\t\t * Send out a radio message saying that we're about to begin submitting.\n\t\t\t * First we send on the generic forms channel, and then on the form-specific channel.\n\t\t\t */\n\t\t\tnfRadio.channel( 'forms' ).trigger( 'before:submit', formModel );\n\t\t\tnfRadio.channel( 'form-' + formModel.get( 'id' ) ).trigger( 'before:submit', formModel );\n\n\t\t\t/*\n\t\t\t * Validate our field models.\n\t\t\t */\n\t\t\tvar validate = nfRadio.channel( 'forms' ).request( 'maybe:validate', formModel );\n\t\t \tif( false !== validate ){\n\n                // When validating all fields, set clean to false to force validation.\n                _.each( formModel.get( 'fields' ).models, function( fieldModel ) {\n                    fieldModel.set( 'clean', false );\n                } );\n\n\t\t\t\t/*\n\t\t\t\t * This method is defined in our models/fieldCollection.js file,\n\t\t\t\t * except where overridden by an add-on (ie Layout & Styles).\n\t\t\t\t */\n\t\t\t\tformModel.get( 'formContentData' ).validateFields();\n\t\t\t}\n\n\t\t\tvar submit = nfRadio.channel( 'form-' + formModel.get( 'id' ) ).request( 'maybe:submit', formModel );\n\t\t\tif ( false == submit ) {\n\t\t\t\tnfRadio.channel( 'forms' ).trigger( 'submit:cancel', formModel );\n\t\t\t\tnfRadio.channel( 'form-' + formModel.get( 'id' ) ).trigger( 'submit:cancel', formModel );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif( false !== validate ){\n\n\t\t\t\t// Ignore non-blocking errors.\n\t\t\t\tvar blockingFormErrors = _.filter( formModel.get( 'errors' ).models, function( error ){\n\n\t\t\t\t\t// Ignore email action related errors.\n\t\t\t\t\tif( 'invalid_email' == error.get( 'id' ) || 'email_not_sent' == error.get( 'id' ) ) return false;\n\n\t\t\t\t\treturn true; // Error is blocking.\n\t\t\t\t});\n\n\t\t\t\t/*\n\t\t\t\t * Make sure we don't have any form errors before we submit.\n\t\t\t\t * Return false if we do.\n\t\t\t\t */\n\t\t\t\tif ( 0 != _.size( blockingFormErrors ) ) {\n\t\t\t\t\tnfRadio.channel( 'forms' ).trigger( 'submit:failed', formModel );\n\t\t\t\t\tnfRadio.channel( 'form-' + formModel.get( 'id' ) ).trigger( 'submit:failed', formModel );\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Send out a radio message saying that we're about to begin submitting.\n\t\t\t * First we send on the generic forms channel, and then on the form-specific channel.\n\t\t\t */\n\t\t\tnfRadio.channel( 'forms' ).trigger( 'after:submitValidation', formModel );\n\t\t\tnfRadio.channel( 'form-' + formModel.get( 'id' ) ).trigger( 'after:submitValidation', formModel );\n\n\t\t\t/*\n\t\t\t * Actually submit our form, and send out a message with our response.\n\t\t\t */\n\n \t\t\tvar formID = formModel.get( 'id' );\n\t\t\tvar fields = {};\n\t\t\t_.each( formModel.get( 'fields' ).models, function( field ) {\n\t\t\t\tvar fieldDataDefaults = { value:field.get( 'value' ), id:field.get( 'id' ) };\n\n\t\t\t\t// Add field data at the field ID for efficient access.\n\t\t\t\tfields[ field.get( 'id' ) ] = nfRadio.channel( field.get( 'type' ) ).request( 'get:submitData', fieldDataDefaults, field ) || fieldDataDefaults;;\n\t\t\t} );\n\t\t\tvar extra = formModel.get( 'extra' );\n\t\t\tvar settings = formModel.get( 'settings' );\n\t\t\tdelete settings.formContentData;\n\t\t\tvar formData = JSON.stringify( { id: formID, fields: fields, settings: settings, extra: extra } );\n\t\t\tvar data = {\n\t\t\t\t'action': 'nf_ajax_submit',\n\t\t\t\t'security': nfFrontEnd.ajaxNonce,\n\t\t\t\t'formData': formData\n\t\t\t}\n\n\t\t\tvar that = this;\n\n\t\t\tjQuery.ajax({\n\t\t\t    url: nfFrontEnd.adminAjax,\n\t\t\t    type: 'POST',\n\t\t\t    data: data,\n\t\t\t    cache: false,\n\t\t\t   \tsuccess: function( data, textStatus, jqXHR ) {\n\t\t\t   \t\ttry {\n\t\t\t\t   \t\tvar response = jQuery.parseJSON( data );\n\t\t\t\t        nfRadio.channel( 'forms' ).trigger( 'submit:response', response, textStatus, jqXHR, formModel.get( 'id' ) );\n\t\t\t\t    \tnfRadio.channel( 'form-' + formModel.get( 'id' ) ).trigger( 'submit:response', response, textStatus, jqXHR );\n\t\t\t\t    \tjQuery( document ).trigger( 'nfFormSubmitResponse', { response: response, id: formModel.get( 'id' ) } );\n\t\t\t   \t\t} catch( e ) {\n\t\t\t   \t\t\tconsole.log( e );\n\t\t\t   \t\t\tconsole.log( 'Parse Error' );\n\t\t\t\t\t\tconsole.log( e );\n\t\t\t   \t\t}\n\n\t\t\t    },\n\t\t\t    error: function( jqXHR, textStatus, errorThrown ) {\n\t\t\t        // Handle errors here\n\t\t\t        console.log('ERRORS: ' + errorThrown);\n\t\t\t\t\tconsole.log( jqXHR );\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvar response = jQuery.parseJSON( jqXHR.responseText );\n\t\t\t\t\t\tnfRadio.channel( 'forms' ).trigger( 'submit:response', response, textStatus, jqXHR, formModel.get( 'id' ) );\n\t\t\t\t\t\tnfRadio.channel( 'form-' + formModel.get( 'id' ) ).trigger( 'submit:response', response, textStatus, jqXHR );\n\t\t\t\t\t} catch( e ) {\n\t\t\t\t\t\tconsole.log( 'Parse Error' );\n\t\t\t\t\t}\n\n\t\t\t        // STOP LOADING SPINNER\n\t\t\t\t\tnfRadio.channel( 'forms' ).trigger( 'submit:response', 'error', textStatus, jqXHR, errorThrown );\n\t\t\t    }\n\t\t\t});\n\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n\n","define( 'views/fieldCollection',['views/fieldLayout'], function( fieldLayout ) {\n\tvar view = Marionette.CollectionView.extend({\n\t\ttagName: 'nf-fields-wrap',\n\t\tchildView: fieldLayout\n\n\t});\n\n\treturn view;\n} );\n","/**\n * Default filters\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/defaultFilters',[ 'views/fieldCollection', 'models/fieldCollection' ], function( FieldCollectionView, FieldCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'form' ), 'before:filterData', this.registerDefaultDataFilter );\n\t\t},\n\n\t\tregisterDefaultDataFilter: function( formModel ) {\n\t\t\t/*\n\t\t\t * Set our default formContent load filter\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContent' ).request( 'add:loadFilter', this.defaultFormContentLoad, 10, this );\n\t\t\t/*\n\t\t\t * Set our default formContentView.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContent' ).request( 'add:viewFilter', this.defaultFormContentView, 10, this );\n\t\t},\n\n\t\tdefaultFormContentLoad: function( formContentData, formModel, context ) {\n\t\t\tvar fieldCollection = formModel.get( 'fields' );\n\t\t\t/*\n\t\t\t * If we only have one load filter, we can just return the field collection.\n\t\t\t */\n\t\t\tvar formContentLoadFilters = nfRadio.channel( 'formContent' ).request( 'get:loadFilters' );\n\t\t\tvar sortedArray = _.without( formContentLoadFilters, undefined );\n\t\t\tif ( 1 == sortedArray.length || 'undefined' == typeof formContentData || true === formContentData instanceof Backbone.Collection ) return formModel.get( 'fields' );\n\n        \tvar fieldModels = _.map( formContentData, function( key ) {\n        \t\treturn formModel.get( 'fields' ).findWhere( { key: key } );\n        \t}, this );\n\n        \tvar currentFieldCollection = new FieldCollection( fieldModels );\n\n        \tfieldCollection.on( 'reset', function( collection ) {\n        \t\tvar resetFields = [];\n        \t\tcurrentFieldCollection.each( function( fieldModel ) {\n        \t\t\tif ( 'submit' != fieldModel.get( 'type' ) ) {\n        \t\t\t\tresetFields.push( collection.findWhere( { key: fieldModel.get( 'key' ) } ) );\n        \t\t\t} else {\n        \t\t\t\tresetFields.push( fieldModel );\n        \t\t\t}\n        \t\t} );\n\n                currentFieldCollection.options = { formModel: formModel };\n        \t\tcurrentFieldCollection.reset( resetFields );\n        \t} );\n\n        \treturn currentFieldCollection;\n        },\n\n        defaultFormContentView: function() {\n        \treturn FieldCollectionView;\n        }\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Controller responsible for removing unique field errors.\n */\n\ndefine('controllers/uniqueFieldError',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * Listen to keyup and field changes.\n\t\t\t *\n\t\t\t * If those fields have a unique field error, remove that error.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'change:modelValue', this.removeError );\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'keyup:field', this.removeError );\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'blur:field', this.removeError );\n\n\t\t},\n\n\t\tremoveError: function( el, model ) {\n\t\t\tmodel = model || el;\n\t\t\t/*\n\t\t\t * Remove any unique field errors.\n\t\t\t */\n\t\t\tnfRadio.channel( 'fields' ).request( 'remove:error', model.get( 'id' ), 'unique_field' );\n\t\t},\n\n\t});\n\n\treturn controller;\n} );\n","define(\n\t'controllers/loadControllers',[\n\t\t'controllers/formData',\n\t\t'controllers/fieldError',\n\t\t'controllers/changeField',\n\t\t'controllers/changeEmail',\n\t\t'controllers/fieldCheckbox',\n\t\t'controllers/fieldCheckboxList',\n\t\t'controllers/fieldRadio',\n\t\t'controllers/fieldNumber',\n\t\t'controllers/mirrorField',\n\t\t'controllers/confirmField',\n\t\t'controllers/updateFieldModel',\n\t\t'controllers/submitButton',\n\t\t'controllers/submitDebug',\n\t\t'controllers/getFormErrors',\n\t\t'controllers/validateRequired',\n\t\t'controllers/submitError',\n\t\t'controllers/actionRedirect',\n\t\t'controllers/actionSuccess',\n\t\t'controllers/fieldSelect',\n\t\t'controllers/coreSubmitResponse',\n\t\t'controllers/fieldProduct',\n\t\t'controllers/fieldTotal',\n\t\t'controllers/fieldQuantity',\n\t\t'controllers/calculations',\n\t\t'controllers/fieldDate',\n\t\t'controllers/fieldRecaptcha',\n\t\t'controllers/fieldHTML',\n\t\t'controllers/helpText',\n\t\t'controllers/fieldTextareaRTE',\n\t\t'controllers/fieldStarRating',\n\t\t'controllers/fieldTerms',\n\t\t'controllers/formContentFilters',\n\t\t'controllers/loadViews',\n\t\t'controllers/formErrors',\n\t\t'controllers/submit',\n\t\t'controllers/defaultFilters',\n\t\t'controllers/uniqueFieldError'\n\t],\n\tfunction(\n\t\tFormData,\n\t\tFieldError,\n\t\tChangeField,\n\t\tChangeEmail,\n\t\tFieldCheckbox,\n\t\tFieldCheckboxList,\n\t\tFieldRadio,\n\t\tFieldNumber,\n\t\tMirrorField,\n\t\tConfirmField,\n\t\tUpdateFieldModel,\n\t\tSubmitButton,\n\t\tSubmitDebug,\n\t\tGetFormErrors,\n\t\tValidateRequired,\n\t\tSubmitError,\n\t\tActionRedirect,\n\t\tActionSuccess,\n\t\tFieldSelect,\n\t\tCoreSubmitResponse,\n\t\tFieldProduct,\n\t\tFieldTotal,\n\t\tFieldQuantity,\n\t\tCalculations,\n\t\tFieldDate,\n\t\tFieldRecaptcha,\n\t\tFieldHTML,\n\t\tHelpText,\n\t\tFieldTextareaRTE,\n\t\tFieldStarRating,\n\t\tFieldTerms,\n\t\tFormContentFilters,\n\t\tLoadViews,\n\t\tFormErrors,\n\t\tSubmit,\n\t\tDefaultFilters,\n\t\tUniqueFieldError\n\t) {\n\t\tvar controller = Marionette.Object.extend( {\n\t\t\tinitialize: function() {\n\n\t\t\t\t/**\n\t\t\t\t * App Controllers\n\t\t\t\t */\n\t\t\t\tnew LoadViews();\n\t\t\t\tnew FormErrors();\n\t\t\t\tnew Submit();\n\t\t\t\t\n\t\t\t\t/**\n\t\t\t\t * Field type controllers\n\t\t\t\t */\n\t\t\t\tnew FieldCheckbox();\n\t\t\t\tnew FieldCheckboxList();\n\t\t\t\tnew FieldRadio();\n\t\t\t\tnew FieldNumber();\n\t\t\t\tnew FieldSelect();\n\t\t\t\tnew FieldProduct();\n\t\t\t\tnew FieldTotal();\n\t\t\t\tnew FieldQuantity();\n\t\t\t\tnew FieldRecaptcha();\n\t\t\t\tnew FieldHTML();\n\t\t\t\tnew HelpText();\n\t\t\t\tnew FieldTextareaRTE();\n\t\t\t\tnew FieldStarRating();\n\t\t\t\tnew FieldTerms();\n\t\t\t\tnew FormContentFilters();\n\t\t\t\tnew UniqueFieldError();\n\t\t\t\t/**\n\t\t\t\t * Misc controllers\n\t\t\t\t */\n\t\t\t\tnew FieldError();\n\t\t\t\tnew ChangeField();\n\t\t\t\tnew ChangeEmail();\n\t\t\t\t\n\t\t\t\tnew MirrorField();\n\t\t\t\tnew ConfirmField();\n\t\t\t\tnew UpdateFieldModel();\n\t\t\t\tnew SubmitButton();\n\t\t\t\tnew SubmitDebug();\n\t\t\t\tnew GetFormErrors();\n\t\t\t\tnew ValidateRequired();\n\t\t\t\tnew SubmitError();\n\t\t\t\tnew ActionRedirect();\n\t\t\t\tnew ActionSuccess();\n\t\t\t\t\n\t\t\t\tnew CoreSubmitResponse();\n\t\t\t\tnew Calculations();\n\n\t\t\t\tnew DefaultFilters();\n\n\t\t\t\t/**\n\t\t\t\t * Data controllers\n\t\t\t\t */\n\t\t\t\tnew FieldDate();\n\t\t\t\tnew FormData();\n\t\t\t\t\n\t\t\t}\n\t\t});\n\n\t\treturn controller;\n} );\n\n","define( 'views/beforeForm',[], function( ) {\n\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: \"nf-section\",\n\t\ttemplate: \"#tmpl-nf-before-form\",\n\n\t});\n\n\treturn view;\n} );\n","define( 'views/formErrorItem',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'nf-section',\n\t\ttemplate: '#tmpl-nf-form-error',\n\n\t\tonRender: function() {\n\t\t\t// this.$el = this.$el.children();\n\t\t\t// this.$el.unwrap();\n\t\t\t// this.setElement( this.$el );\n\t\t},\n\t});\n\n\treturn view;\n} );\n","define( 'views/formErrorCollection',['views/formErrorItem'], function( formErrorItem ) {\n\tvar view = Marionette.CollectionView.extend({\n\t\ttagName: \"nf-errors\",\n\t\tchildView: formErrorItem\n\t});\n\n\treturn view;\n} );\n","define( 'views/honeyPot',[], function() {\n    var view = Marionette.ItemView.extend({\n        tagName: 'nf-section',\n        template: '#tmpl-nf-form-hp',\n\n        events: {\n        \t'keyup .nf-field-hp': 'maybeError',\n            'change .nf-field-hp': 'maybeError'\n        },\n\n        maybeError: function( e ) {\n            /*\n             * If we have an empty honeyPot field, remove the honeypot form error.\n             * If we do not have an empty honeyPot field, add the honeypot form error.\n             */\n            if ( 0 == jQuery( e.target ).val().length ) {\n                nfRadio.channel( 'form-' + this.model.get( 'id' ) ).request( 'remove:error', 'honeyPot' );\n            } else {\n                var formModel  = nfRadio.channel( 'app'    ).request( 'get:form',  this.model.get( 'id' ) );\n                nfRadio.channel( 'form-' + this.model.get( 'id' ) ).request( 'add:error', 'honeyPot', formModel.get( 'settings' ).honeypotHoneypotError );\n            }\n        }\n    });\n\n    return view;\n} );\n","define( 'views/afterFormContent',['views/formErrorCollection', 'views/honeyPot'], function( FormErrors, HoneyPot ) {\n\n    var view = Marionette.LayoutView.extend({\n        tagName: \"nf-section\",\n        template: \"#tmpl-nf-after-fields\",\n\n\t\tregions: {\n\t\t\terrors: \".nf-form-errors\",\n            hp: \".nf-form-hp\"\n\t\t},\n\n        onShow: function() {\n        \tthis.errors.show( new FormErrors( { collection: this.model.get( 'errors' ) } ) );\n            this.hp.show( new HoneyPot( { model: this.model } ) );\n        }\n\n    });\n\n    return view;\n} );\n","define( 'views/beforeFormContent',[], function( ) {\n\n    var view = Marionette.ItemView.extend({\n        tagName: \"nf-section\",\n        template: \"#tmpl-nf-before-fields\",\n\n        templateHelpers: function () {\n            return {\n\n                renderFieldsMarkedRequired: function() {\n\n                    var requiredFields = this.fields.filter( { required: 1 } );\n                    return ( requiredFields.length ) ? this.fieldsMarkedRequired : '';\n                },\n            };\n        },\n\n    });\n\n    return view;\n} );\n","define( 'views/formLayout',[ 'views/afterFormContent', 'views/beforeFormContent', 'models/fieldCollection' ], function( AfterFormContent, BeforeFormContent, FieldCollection ) {\n\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: \"nf-section\",\n\t\ttemplate: \"#tmpl-nf-form-layout\",\n\n\t\tregions: {\n\t\t\tbeforeFormContent: \".nf-before-form-content\",\n\t\t\tformContent: \".nf-form-content\",\n\t\t\tafterFormContent: \".nf-after-form-content\"\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'form-' + this.model.get( 'id' ) ).reply( 'get:el', this.getEl, this );\n\t\t\t\n\t\t\t/*\n\t\t\t * If we need to hide a form, set the visibility of this form to hidden.\n\t\t\t */\n\t\t\t this.listenTo( this.model, 'hide', this.hide );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tthis.beforeFormContent.show( new BeforeFormContent( { model: this.model } ) );\n\t\t\t\n\t\t\t/*\n\t\t\t * Set our formContentData to our form setting 'formContentData'\n\t\t\t */\n\t\t\tvar formContentData = this.model.get( 'formContentData' );\n\t\t\t\n\t\t\t/*\n\t\t\t * Check our fieldContentViewsFilter to see if we have any defined.\n\t\t\t * If we do, overwrite our default with the view returned from the filter.\n\t\t\t */\n\t\t\tvar formContentViewFilters = nfRadio.channel( 'formContent' ).request( 'get:viewFilters' );\n\t\t\t\n\t\t\t/* \n\t\t\t* Get our first filter, this will be the one with the highest priority.\n\t\t\t*/\n\t\t\tvar sortedArray = _.without( formContentViewFilters, undefined );\n\t\t\tvar callback = _.first( sortedArray );\n\t\t\tformContentView = callback();\n\t\t\t\n\t\t\tvar options = {\n\t\t\t\tdata: formContentData,\n\t\t\t\tformModel: this.model\n\t\t\t};\n\t\t\t\n\t\t\t/*\n\t\t\t * If we have a collection, pass the returned data as the collection.\n\t\t\t *\n\t\t\t * If we have a model, pass the returned data as the collection.\n\t\t\t */\n\t\t\tif ( false !== formContentData instanceof Backbone.Collection ) {\n\t\t\t\toptions.collection = formContentData;\n\t\t\t} else if ( false !== formContentData instanceof Backbone.Model ) {\n\t\t\t\toptions.model = formContentData;\n\t\t\t}\n\n\t\t\tthis.formContent.show( new formContentView( options ) );\n\t\t\tthis.afterFormContent.show( new AfterFormContent( { model: this.model } ) );\n\t\t},\n\n\t\tgetEl: function() {\n\t\t\treturn this.el;\n\t\t},\n\n        templateHelpers: function () {\n            return {\n\n                renderClasses: function() {\n                    return '';\n                }\n\n            };\n        },\n\n        hide: function() {\n        \tjQuery( this.el ).hide();\n        }\n\n\t});\n\n\treturn view;\n} );\n","define( 'views/afterForm',[], function( ) {\n\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: \"nf-section\",\n\t\ttemplate: \"#tmpl-nf-after-form\",\n\t\t\n\t});\n\n\treturn view;\n} );\n","define( 'views/mainLayout',['views/beforeForm', 'views/formLayout', 'views/afterForm'], function( BeforeForm, FormLayout, AfterForm ) {\n\n\tvar view = Marionette.LayoutView.extend({\n\t\ttemplate: '#tmpl-nf-layout',\n\n\t\tregions: {\n\t\t\tresponseMsg: '.nf-response-msg',\n\t\t\tbeforeForm: '.nf-before-form',\n\t\t\tformLayout: '.nf-form-layout',\n\t\t\tafterForm: '.nf-after-form'\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.$el = jQuery( '#nf-form-' + this.model.id + '-cont' );\n\t\t\tthis.el = '#nf-form-' + this.model.id + '-cont';\n\n\t\t\tthis.render();\n\n\t\t\tthis.beforeForm.show( new BeforeForm( { model: this.model } ) );\n\t\t\tthis.formLayout.show( new FormLayout( { model: this.model, fieldCollection: this.options.fieldCollection } ) );\n\t\t\tthis.afterForm.show( new AfterForm( { model: this.model } ) );\n\n\t\t\t/*\n\t\t\t * If we need to hide a form, set the visibility of this form to hidden.\n\t\t\t */\n\t\t\t this.listenTo( this.model, 'hide', this.hide );\n\t\t},\n\n        hide: function() {\n        \tjQuery( this.el ).find( '.nf-form-title' ).hide();\n        }\n\n\t});\n\n\treturn view;\n} );\n","/*\n * Because our backbone listens to .change() events on elements, changes made using jQuery .val() don't bubble properly.\n * This patch overwrites the default behaviour of jQuery .val() so that IF the item has an nf-element class, we fire a change event.\n */\n( function( jQuery ) {\n\t/*\n\t * Store our original .val() function.\n\t */\n    var originalVal = jQuery.fn.val;\n    /*\n     * Create our own .val() function.\n     */\n    jQuery.fn.val = function(){\n        var prev;\n        /* \n         * Store a copy of the results of the original .val() call.\n         * We use this to make sure that we've actually changed something.\n         */\n        if( arguments.length > 0 ){\n            prev = originalVal.apply( this,[] );\n        }\n        /*\n         * Get the results of the original .val() call. \n         */\n        var result = originalVal.apply( this, arguments );\n\n        /*\n         * If we have arguments, we have actually made a change, AND this has the nf-element class, trigger .change().\n         */\n        if( arguments.length > 0 && prev != originalVal.apply( this, [] ) && jQuery( this ).hasClass( 'nf-element' ) ) {\n\t\t\tjQuery(this).change();\n        }\n\n        return result;\n    };\n} ) ( jQuery );\n\njQuery( document ).ready( function( $ ) {\n\trequire( [ 'models/formCollection', 'models/formModel', 'models/fieldCollection', 'controllers/loadControllers', 'views/mainLayout'], function( formCollection, FormModel, FieldCollection, LoadControllers, mainLayout ) {\n\n\t\tif( 'undefined' == typeof nfForms ) {\n\t\t\t/*\n\t\t\t * nfForms is not defined. This means that something went wrong loading the form data.\n\t\t\t * Bail form setup and empty the form containers to remove any loading animations.\n\t\t\t */\n\t\t\tjQuery( '.nf-form-cont' ).empty();\n\t\t\treturn;\n\t\t}\n\n\t\tvar NinjaForms = Marionette.Application.extend({\n\t\t\tforms: {},\n\t\t\tinitialize: function( options ) {\n\n\t\t\t\tvar that = this;\n\t\t\t\tMarionette.Renderer.render = function(template, data){\n\t\t\t\t\tvar template = that.template( template );\n\t\t\t\t\treturn template( data );\n\t\t\t\t};\n\n\t\t\t\t// Underscore one-liner for getting URL Parameters\n\t\t\t\tthis.urlParameters = _.object(_.compact(_.map(location.search.slice(1).split('&'), function(item) {  if (item) return item.split('='); })));\n\n\t\t\t\tif( 'undefined' != typeof this.urlParameters.nf_resume ) {\n\t\t\t\t\tthis.listenTo(nfRadio.channel('form-' + this.urlParameters.nf_resume), 'loaded', this.restart);\n\t\t\t\t}\n\n\t\t\t\tvar loadControllers = new LoadControllers();\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'after:loadControllers' );\n\n\t\t\t\tnfRadio.channel( 'app' ).reply( 'get:template', this.template );\n\t\t\t},\n\t\t\t\n\t\t\tonStart: function() {\n\t\t\t\tvar formCollection = nfRadio.channel( 'app' ).request( 'get:forms' );\n\t\t\t\t_.each( formCollection.models, function( form, index ) {\n\t\t\t\t\tvar layoutView = new mainLayout( { model: form, fieldCollection: form.get( 'fields' ) } );\t\t\t\n\t\t\t\t\tnfRadio.channel( 'form' ).trigger( 'render:view', layoutView );\n\t\t\t\t\tjQuery( document ).trigger( 'nfFormReady', layoutView );\n\t\t\t\t} );\n\t\t\t},\n\n\t\t\trestart: function( formModel ) {\n\t\t\t\tif( 'undefined' != typeof this.urlParameters.nf_resume ){\n\t\t\t\t\tvar data = {\n\t\t\t\t\t\t'action': 'nf_ajax_submit',\n\t\t\t\t\t\t'security': nfFrontEnd.ajaxNonce,\n\t\t\t\t\t\t'nf_resume': this.urlParameters\n\t\t\t\t\t};\n\n\t\t\t\t\tnfRadio.channel( 'form-' + formModel.get( 'id' ) ).trigger( 'disable:submit' );\n\t\t\t\t\tnfRadio.channel( 'form-' + formModel.get( 'id' ) ).trigger( 'processingLabel' );\n\n\t\t\t\t\tthis.listenTo( nfRadio.channel( 'form' ), 'render:view', function() {\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * TODO: This needs to be re-worked for backbone. It's not dynamic enough.\n\t\t\t\t\t\t */\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * Hide form fields (but not the submit button).\n\t\t\t\t\t\t */\n\t\t\t\t\t\tjQuery( '#nf-form-' + formModel.get( 'id' ) + '-cont .nf-field-container:not(.submit-container)' ).hide();\n\t\t\t\t\t});\n\n\t\t\t\t\t// TODO: Refactor Duplication\n\t\t\t\t\tjQuery.ajax({\n\t\t\t\t\t\turl: nfFrontEnd.adminAjax,\n\t\t\t\t\t\ttype: 'POST',\n\t\t\t\t\t\tdata: data,\n\t\t\t\t\t\tcache: false,\n\t\t\t\t\t\tsuccess: function( data, textStatus, jqXHR ) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t   \t\tvar response = jQuery.parseJSON( data );\n\t\t\t\t\t\t        nfRadio.channel( 'forms' ).trigger( 'submit:response', response, textStatus, jqXHR, formModel.get( 'id' ) );\n\t\t\t\t\t\t    \tnfRadio.channel( 'form-' + formModel.get( 'id' ) ).trigger( 'submit:response', response, textStatus, jqXHR );\n\t\t\t\t\t\t\t} catch( e ) {\n\t\t\t\t\t\t\t\tconsole.log( 'Parse Error' );\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t    },\n\t\t\t\t\t    error: function( jqXHR, textStatus, errorThrown ) {\n\t\t\t\t\t        // Handle errors here\n\t\t\t\t\t        console.log('ERRORS: ' + textStatus);\n\t\t\t\t\t        // STOP LOADING SPINNER\n\t\t\t\t\t\t\tnfRadio.channel( 'forms' ).trigger( 'submit:response', 'error', textStatus, jqXHR, errorThrown );\n\t\t\t\t\t    }\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\n\t\t\ttemplate: function( template ) {\n\t\t\t\treturn _.template( $( template ).html(),  {\n\t\t\t\t\tevaluate:    /<#([\\s\\S]+?)#>/g,\n\t\t\t\t\tinterpolate: /\\{\\{\\{([\\s\\S]+?)\\}\\}\\}/g,\n\t\t\t\t\tescape:      /\\{\\{([^\\}]+?)\\}\\}(?!\\})/g,\n\t\t\t\t\tvariable:    'data'\n\t\t\t\t} );\n\t\t\t}\n\t\t});\n\t\n\t\tvar ninjaForms = new NinjaForms();\n\t\tninjaForms.start();\t\t\n\t} );\n} );\n\ndefine(\"main\", function(){});\n\n"]}